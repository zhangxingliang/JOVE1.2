<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sobey.Core</name>
    </assembly>
    <members>
        <member name="T:Sobey.Core.Cache.CacheManager">
            <summary>
            缓存管理类
            </summary>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Add(System.String,System.Object)">
            <summary>
            将对象添加到缓存中，使用此方法所添加的对象将不会过期，除非你显示第从缓存中移除掉
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="cacheObject">缓存对象</param>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Add(System.String,System.Object,System.Int32)">
            <summary>
            将对象添加到缓存中，缓存中的对象将在指定的毫秒后过期
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="cacheObject">缓存对象</param>
            <param name="persistMilliseconds">过期时间(毫秒)</param>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            将对象添加到缓存中，缓存中的对象将在指定的时间后过期
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="cacheObject">缓存对象</param>
            <param name="persistTime">过期时间</param>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Add(System.String,System.Object,System.DateTime)">
            <summary>
            将对象添加到缓存中，缓存中的对象将在指定时间点后过期
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="cacheObject">缓存对象</param>
            <param name="expiredTime">过期时间点</param>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Add(System.String,System.Object,System.String)">
            <summary>
            将对象添加到缓存中，该对象与指定的文件关联，如果指定的文件被修改，缓存将失效
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="cacheObject">缓存对象</param>
            <param name="dependenceFileName">与缓存对象关联的文件路径</param>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Add(System.String,System.Object,System.String,System.TimeSpan)">
            <summary>
            将对象添加到缓存中，该对象与指定的文件关联，如果指定的文件被修改，缓存将失效
            或者缓存到达指定的时间后亦将失效
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="cacheObject">缓存对象</param>
            <param name="dependenceFileName">关联的文件路径</param>
            <param name="maxPersistTime">缓存可被保留的最长时间</param>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Add(System.String,System.String,System.Object)">
            <summary>
            将对象添加到缓存中，对象将不会自动失效，除非你显示地从缓存中移除对象
            </summary>
            <param name="cacheClassification">缓存的类别</param>
            <param name="cacheKey">缓存键</param>
            <param name="cacheObject">缓存对象</param>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Add(System.String,System.String,System.Object,System.Int32)">
            <summary>
            将对象添加到缓存中,缓存将在指定的毫秒时间后失效
            </summary>
            <param name="cacheClassification">缓存的类别</param>
            <param name="cacheKey">缓存键</param>
            <param name="cacheObject">缓存对象</param>
            <param name="persistMilliseconds">缓存时间(毫秒)</param>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Add(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            将对象添加到缓存中,缓存将在指定秒时间后失效
            </summary>
            <param name="cacheClassification">缓存的类别</param>
            <param name="cacheKey">缓存键</param>
            <param name="cacheObject">缓存对象</param>
            <param name="persistTime">缓存时间</param>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Add(System.String,System.String,System.Object,System.DateTime)">
            <summary>
            将对象添加到缓存中,缓存将在指定时间点后失效
            </summary>
            <param name="cacheClassification">缓存的类别</param>
            <param name="cacheKey">缓存键</param>
            <param name="cacheObject">缓存对象</param>
            <param name="expiredTime">缓存终止的时间点</param>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Add(System.String,System.String,System.Object,System.String)">
            <summary>
            将对象添加到缓存中，该对象与指定的文件关联，如果指定的文件被修改，缓存将失效
            </summary>
            <param name="cacheClassification">缓存类别</param>
            <param name="cacheKey">缓存键</param>
            <param name="cacheObject">缓存对象</param>
            <param name="dependenceFileName">与缓存对象关联的文件路径</param>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Add(System.String,System.String,System.Object,System.String,System.TimeSpan)">
            <summary>
            将对象添加到缓存中，该对象与指定的文件关联，如果指定的文件被修改，缓存将失效
            或者缓存到达指定的时间后亦将失效
            </summary>
            <param name="cacheClassification">缓存类别</param>
            <param name="cacheKey">缓存键</param>
            <param name="cacheObject">缓存对象</param>
            <param name="dependenceFileName">关联的文件路径</param>
            <param name="maxPersistTime">缓存可被保留的最长时间</param>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Remove(System.String)">
            <summary>
            从缓存中移除缓存对象
            </summary>
            <param name="cacheKey">缓存键</param>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Remove(System.String,System.String)">
            <summary>
            从缓存中移除缓存对象
            </summary>
            <param name="cacheClassification">缓存类别</param>
            <param name="cacheKey">缓存键</param>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Clear">
            <summary>
            清除当前缓存的所有对象
            </summary>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Get(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="cacheKey">缓存键</param>
            <returns>缓存对象，如果给定的键值不存在将返回null</returns>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Get(System.String,System.Object)">
            <summary>
            获取缓存对象
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="defaultValue">默认值</param>
            <returns>缓存对象，如果给定的键值不存在将返回默认值</returns>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Get``1(System.String,``0)">
            <summary>
            获取缓存对象
            </summary>
            <typeparam name="TValue">缓存对象的类型</typeparam>
            <param name="cacheKey">缓存键</param>
            <param name="defaultValue">默认值</param>
            <returns>缓存对象，如果给定的键值不存在将返回默认值</returns>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Get(System.String,System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="cacheClassification">缓存类别</param>
            <param name="cacheKey">缓存键</param>
            <returns>缓存对象，如果给定的键值不存在将返回null</returns>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Get(System.String,System.String,System.Object)">
            <summary>
            获取缓存对象
            </summary>
            <param name="cacheClassification">缓存类别</param>
            <param name="cacheKey">缓存键</param>
            <param name="defaultValue">默认值</param>
            <returns>缓存对象，如果给定的键值不存在将返回默认值</returns>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.Get``1(System.String,System.String,``0)">
            <summary>
            获取缓存对象
            </summary>
            <typeparam name="TValue">缓存对象的类型</typeparam>
            <param name="cacheClassification">缓存类别</param>
            <param name="cacheKey">缓存键</param>
            <param name="defaultValue">默认值</param>
            <returns>缓存对象，如果给定的键值不存在将返回默认值</returns>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.IsExist(System.String)">
            <summary>
            检查指定的缓存对象是否存在
            </summary>
            <remarks>
            此检查并不十分精确， 可能会包括一些已经过期但是还没被删除的对象。
            如果需要精确检查，请通过Get方法获取缓存对象，如果返回null说明该对象在缓存中不存在
            </remarks>
            <param name="cacheKey">缓存键</param>
            <returns>存在返回true，否则返回false</returns>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.IsExist(System.String,System.String)">
            <summary>
            检查指定的缓存对象是否存在
            </summary>
            <remarks>
            此检查并不十分精确， 可能会包括一些已经过期但是还没被删除的对象。
            如果需要精确检查，请通过Get方法获取缓存对象，如果返回null说明该对象在缓存中不存在
            </remarks>
            <param name="cacheClassification">缓存类别</param>
            <param name="cacheKey">缓存键</param>
            <returns>存在返回true，否则返回false</returns>
        </member>
        <member name="M:Sobey.Core.Cache.CacheManager.getCacheKey(System.String,System.String)">
            <summary>
            获取缓存键
            </summary>
            <remarks>此方法将会对给定的缓存键进行验证，如果给定的键值不符合要求将引发异常</remarks>
            <param name="cacheClassification">缓存类别</param>
            <param name="cacheKey">缓存键</param>
            <returns>实际缓存键</returns>
        </member>
        <member name="P:Sobey.Core.Cache.CacheManager.Count">
            <summary>
            缓存对象数量
            </summary>
            <remarks>
            此数量并不是十分精确， 可能会包括一些已经过期但是还没被删除的对象
            </remarks>
        </member>
        <member name="T:Sobey.Core.Configuration.BinaryFileConfigurationBase">
            <summary>
            使用二进制序列化的配置基类
            </summary>
        </member>
        <member name="T:Sobey.Core.Configuration.ConfigurationBase">
            <summary>
            基于仓储模式的配置类
            </summary>
        </member>
        <member name="T:Sobey.Core.Configuration.IConfiguration">
            <summary>
            配置接口
            </summary>
        </member>
        <member name="M:Sobey.Core.Configuration.IConfiguration.Save">
            <summary>
            保存配置
            </summary>
            <returns>保存是否成功</returns>
        </member>
        <member name="M:Sobey.Core.Configuration.IConfiguration.Get">
            <summary>
            从仓储中获取配置
            </summary>
        </member>
        <member name="M:Sobey.Core.Configuration.IConfiguration.GetDefaultConfig">
            <summary>
            获取默认配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sobey.Core.Configuration.ConfigurationBase.Save">
            <summary>
            保存
            </summary>
            <returns>是否保存成功</returns>
        </member>
        <member name="M:Sobey.Core.Configuration.ConfigurationBase.Get">
            <summary>
            从仓储中获取配置对象
            </summary>
        </member>
        <member name="M:Sobey.Core.Configuration.ConfigurationBase.Clear">
            <summary>
            清除配置
            </summary>
        </member>
        <member name="M:Sobey.Core.Configuration.ConfigurationBase.GetDefaultConfig">
            <summary>
            获取默认配置数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sobey.Core.Configuration.ConfigurationBase.Clone">
            <summary>
            深度复制
            </summary>
            <returns>新的配置对象</returns>
        </member>
        <member name="M:Sobey.Core.Configuration.ConfigurationBase.CopyFrom(Sobey.Core.Configuration.ConfigurationBase)">
            <summary>
            将指定的配置对象属性拷贝到当前实例中
            </summary>
            <param name="sourceConfig">原配置</param>
        </member>
        <member name="P:Sobey.Core.Configuration.ConfigurationBase.ConfigKey">
            <summary>
            配置类型的标识关键字，默认为配置类名称，可重载
            </summary>
        </member>
        <member name="T:Sobey.Core.Configuration.ConfigurationBinaryFileRepository">
            <summary>
            基于二进制文件的仓储
            </summary>
        </member>
        <member name="T:Sobey.Core.Configuration.IConfigurationRepository">
            <summary>
            配置仓储接口
            </summary>
        </member>
        <member name="M:Sobey.Core.Configuration.IConfigurationRepository.Save(Sobey.Core.Configuration.ConfigurationBase)">
            <summary>
            将配置对象保存到仓储中
            </summary>
            <param name="config">配置对象</param>
            <returns>保存是否成功</returns>
        </member>
        <member name="M:Sobey.Core.Configuration.IConfigurationRepository.Get(System.String,System.Type)">
            <summary>
            从仓储中获取配置对象
            </summary>
            <param name="configKey">用于标识配置的关键字</param>
            <param name="configType">配置类型</param>
            <returns>配置对象</returns>
        </member>
        <member name="M:Sobey.Core.Configuration.IConfigurationRepository.DeleteConfig(System.String)">
            <summary>
            删除配置
            </summary>
            <param name="configKey">用于标识配置的关键字</param>
        </member>
        <member name="F:Sobey.Core.Configuration.ConfigurationBinaryFileRepository.ConfigDirectoryBase">
            <summary>
            保存配置文件的目录
            </summary>
        </member>
        <member name="T:Sobey.Core.Configuration.ConfigurationFileRepository">
            <summary>
            基于文件系统的配置仓储
            </summary>
        </member>
        <member name="F:Sobey.Core.Configuration.ConfigurationFileRepository.ConfigDirectoryBase">
            <summary>
            保存配置文件的目录
            </summary>
        </member>
        <member name="T:Sobey.Core.Configuration.FileConfigurationBase">
            <summary>
            基于文件系统的配置类
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackgroundScheduler">
            <summary>
            Represents a cache scavenger that runs on a background thread.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackgroundScheduler"/> will make its best effort to avoid scheduling a new scavenge request 
            when it is safe to assume that it's not necessary. Since <see cref="P:Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask.NumberOfItemsToBeScavenged"/> 
            elements are scavenged each time, there should be at least one scavenge request every 
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask.NumberOfItemsToBeScavenged"/> elements the cache over the 
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Caching.CacheCapacityScavengingPolicy.MaximumItemsAllowedBeforeScavenging"/> threshold.
            <para/>
            Each time a scheduled scavenge task is processed the counter used to avoid superfluous scavenges is reset to 
            zero, so the next scavenge request will result in a new scheduled scavenge task.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheScavenger">
            <summary>
            Represents a cache scavenger.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheScavenger.StartScavenging">
            <summary>
            Starts the scavenging process.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackgroundScheduler.#ctor(Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask,Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask,Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackgroundScheduler"/> with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask"/> and 
            a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask"/>.
            </summary>
            <param name="expirationTask">The expiration task to use.</param>
            <param name="scavengerTask">The scavenger task to use.</param>
            <param name="instrumentationProvider">The instrumentation provider to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackgroundScheduler.ExpirationTimeoutExpired(System.Object)">
            <summary>
            Queues a message that the expiration timeout has expired.
            </summary>
            <param name="notUsed">Ignored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackgroundScheduler.StartScavenging">
            <summary>
            Starts the scavenging process.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore">
            <summary>
            Base class for backing stores. Contains implementations of common policies
            and utilities usable by all backing stores.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore">
            <summary>
            <P>This interface defines the contract that must be implemented by all backing stores. 
            Implementors of this method are responsible for interacting with their underlying
            persistence mechanisms to store and retrieve CacheItems. All methods below must guarantee 
            Weak Exception Safety. This means that operations must complete entirely, or they must completely
            clean up from the failure and leave the cache in a consistent state. The mandatory
            cleanup process will remove all traces of the item that caused the failure, causing that item
            to be expunged from the cache entirely.
            </P>
            </summary>
            <remarks>
            Due to the way the Caching class is implemented, implementations of this class will always be called in 
            a thread-safe way. There is no need to make derived classes thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore.Add(Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            <p>
            This method is responsible for adding a CacheItem to the BackingStore. This operation must be successful 
            even if an item with the same key already exists. This method must also meet the Weak Exception Safety guarantee
            and remove the item from the backing store if any part of the Add fails.
            </p> 
            </summary>
            <param name="newCacheItem">CacheItem to be added</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Add
            </p>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore.Remove(System.String)">
            <summary>
            Removes an item with the given key from the backing store
            </summary>
            <param name="key">Key to remove. Must not be null.</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Remove
            </p>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore.UpdateLastAccessedTime(System.String,System.DateTime)">
            <summary>
            Updates the last accessed time for a cache item.
            </summary>
            <param name="key">Key to update</param>
            <param name="timestamp">Time at which item updated</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during UpdateLastAccessedTime
            </p>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore.Flush">
            <summary>
            Flushes all CacheItems from backing store. This method must meet the Weak Exception Safety guarantee.
            </summary>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Flush
            </p>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore.Load">
            <summary>
            Loads all CacheItems from backing store. 
            </summary>
            <returns>Hashtable filled with all existing CacheItems.</returns>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Load
            </p>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore.Count">
            <summary>
            Number of objects stored in the backing store
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.#ctor">
            <summary>
            Inherited constructor
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Finalize">
            <summary>
            Finalizer for BaseBackingStore
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Dispose">
            <summary>
            Dispose method for all backing stores. This implementation is sufficient for any class that does not need any finalizer behavior
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Dispose(System.Boolean)">
            <summary>
            Disposing method as used in the Dispose pattern
            </summary>
            <param name="disposing">True if called during Dispose. False if called from finalizer</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Remove(System.String)">
            <summary>
            Removes an item with the given key from the backing store
            </summary>
            <param name="key">Key to remove. Must not be null.</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Remove
            </p>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Remove(System.Int32)">
            <summary>
            Removes an item with the given storage key from the backing store.
            </summary>
            <param name="storageKey">Unique storage key for the cache item to be removed</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Remove
            </p>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.UpdateLastAccessedTime(System.String,System.DateTime)">
            <summary>
            Updates the last accessed time for a cache item.
            </summary>
            <param name="key">Key to update</param>
            <param name="timestamp">Time at which item updated</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during UpdateLastAccessedTime
            </p>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.UpdateLastAccessedTime(System.Int32,System.DateTime)">
            <summary>
            Updates the last accessed time for a cache item referenced by this unique storage key
            </summary>
            <param name="storageKey">Unique storage key for cache item</param>
            <param name="timestamp">Time at which item updated</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Flush">
            <summary>
            Flushes all CacheItems from backing store. This method must meet the Strong Exception Safety guarantee.
            </summary>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Flush
            </p>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Add(Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            <p>
            This method is responsible for adding a CacheItem to the BackingStore. This operation must be successful 
            even if an item with the same key already exists. This method must also meet the exception safety guarantee
            and make sure that all traces of the new or old item are gone if the add fails in any way.
            </p> 
            </summary>
            <param name="newCacheItem">CacheItem to be added</param>
            <remarks>
            <p>
            Other exceptions can be thrown, depending on what individual Backing Store implementations throw during Add
            </p>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Load">
            <summary>
            Loads all CacheItems from underlying persistence mechanism.
            </summary>
            <returns>Hashtable containing all existing CacheItems.</returns>
            <remarks>Exceptions thrown depend on the implementation of the underlying database.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.RemoveOldItem(System.Int32)">
            <summary>
            Removed existing item stored in persistence store with same key as new item
            </summary>
            <param name="storageKey">Unique key for cache item</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.AddNewItem(System.Int32,Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Adds new item to persistence store
            </summary>
            <param name="storageKey">Unique key for cache item</param>
            <param name="newItem">Item to be added to cache. May not be null.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.LoadDataFromStore">
            <summary>
            Responsible for loading items from underlying persistence store. This method should do
            no filtering to remove expired items.
            </summary>
            <returns>Hash table of all items loaded from persistence store</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.BaseBackingStore.Count">
            <summary>
            Number of objects stored in the backing store
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore">
            <summary>
            Implementation of IBackingStore that stores its CacheItems into IsolatedStorage.
            </summary>
            <remarks>
            This class assumes a tree-structured storage schema. Each named instance of an Isolated Storage area creates a 
            separate, top-level directory in Isolated Storage. This is to allow a user to segregate different areas in Isolated Storage
            to allow multiple applications to use their own logically separate areas. Inside each of these areas, each CacheItem is stored
            in its own subdirectory, with separate files in those subdirectories representing the different pieces of a CacheItem. 
            The item was split like this to allow for several optimizations. The first optimization is that now, the essence of a CacheItem
            can be restored independently of the underlying value. It is the deserialization of the value object that could conceivably 
            be very time consuming, so by splitting it off into its own file, that deserialization process could be delayed until the value is 
            actually needed. The second optimization is that we are now able to update the last accessed time for a CacheItem without 
            bringing the entire CacheItem into memory, make the update, and then reserialize it.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.#ctor(System.String)">
            <summary>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> that stores objects in Isolated Storage, identified by <paramref name="storageAreaName"/>.
            </summary>
            <param name="storageAreaName">Identifier for this Isolated Storage area. May not be null.</param>
            <permission cref="T:System.Security.Permissions.IsolatedStorageFilePermission">Demanded to ensure caller has permission to access Isolated Storage.</permission>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider)">
            <summary>
            Initialize Isolated Storage for this CacheItem by creating the directory where it will be stored. This 
            constructor should only be used for testing, and never called from production code.
            </summary>
            <param name="storageAreaName">Identifier for this Isolated Storage area. May not be null.</param>
            <param name="encryptionProvider">
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/> to use to encrypt data in storage. This value can be <see langword="null"/>.
            </param>
            <permission cref="T:System.Security.Permissions.IsolatedStorageFilePermission">Demanded to ensure caller has permission to access Isolated Storage.</permission>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.Flush">
            <summary>
            Removes all items from this Isolated Storage area.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.Remove(System.Int32)">
            <summary>
            Removes the named item from Isolated Storage.
            </summary>
            <param name="storageKey">Identifier for CacheItem to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.UpdateLastAccessedTime(System.Int32,System.DateTime)">
            <summary>
            Updates the last accessed time for the specified CacheItem stored in Isolated Storage
            </summary>
            <param name="storageKey">Identifer for CacheItem to remove.</param>
            <param name="timestamp">New timestamp for CacheItem.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.LoadDataFromStore">
            <summary>
            Loads data from persistence store
            </summary>
            <returns>A Hashtable containing the cache items.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.RemoveOldItem(System.Int32)">
            <summary>
            Remove existing item stored in persistence store with same key as new item
            </summary>
            <param name="storageKey">Item being removed from cache.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.AddNewItem(System.Int32,Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Adds new item to persistence store
            </summary>
            <param name="storageKey">Unique key for storage item</param>
            <param name="newItem">Item to be added to cache. May not be null.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore.Count">
            <summary>
            Returns the number of CacheItems in the Isolated Storage segment identified by the name passed in at construction
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItem">
            <summary>
            Represents a CacheItem as stored in Isolated Storage. This class is responsible for storing and
            restoring the item from the underlying file system store.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItem.#ctor(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider)">
            <summary>
            Instance constructor. Ensures that the storage location in Isolated Storage is prepared
            for reading and writing. This class stores each individual field of the CacheItem into its own
            file inside the directory specified by itemDirectoryRoot.
            </summary>
            <param name="storage">Isolated Storage area to use. May not be null.</param>
            <param name="itemDirectoryRoot">Complete path in Isolated Storage where the cache item should be stored. May not be null.</param>
            <param name="encryptionProvider">Encryption provider</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItem.Store(Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Stores specified CacheItem into IsolatedStorage at location specified in constructor
            </summary>
            <param name="itemToStore">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> to store.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItem.Load">
            <summary>
            Loads a CacheItem from IsolatedStorage from the location specified in the constructor
            </summary>
            <returns>CacheItem loaded from IsolatedStorage</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItem.UpdateLastAccessedTime(System.DateTime)">
            <summary>
            Updates the last accessed time for the CacheItem stored at this location in Isolated Storage
            </summary>
            <param name="newTimestamp">New timestamp</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItemField">
            <summary>
            Defines the mechanism to store and read individual fields from IsolatedStorage. This class maintains no
            state with respect to the data read from IsolatedStorage, so it may be reused to reread or rewrite the same field
            repeatedly.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItemField.#ctor(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.String,Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider)">
            <summary>
            Instance constructor
            </summary>
            <param name="storage">IsolatedStorage area to use. May not be null.</param>
            <param name="fieldName">Name of the file in which the field value is stored. May not be null.</param>
            <param name="fileSystemLocation">Complete path to directory where file specified in fieldName is to be found. May not be null.</param>
            <param name="encryptionProvider">Encryption provider</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItemField.Write(System.Object,System.Boolean)">
            <summary>
            Writes value to specified location in IsolatedStorage
            </summary>
            <param name="itemToWrite">Object to write into Isolated Storage</param>
            <param name="encrypted">True if item written is to be encrypted</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItemField.Overwrite(System.Object)">
            <summary>
            Overwrites given field in Isolated Storage. Item will not be encrypted
            </summary>
            <param name="itemToWrite">Object to write into Isolated Storage</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItemField.Read(System.Boolean)">
            <summary>
            Reads value from specified location in IsolatedStorage
            </summary>
            <param name="encrypted">True if field is stored as encrypted</param>
            <returns>Value read from IsolatedStorage. This value may be null if the value stored is null.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItemField.WriteField(System.Object,System.IO.IsolatedStorage.IsolatedStorageFileStream,System.Boolean)">
            <summary>
            Responsible for writing value to IsolatedStorage using given IsolatedStorageFileStream reference. Subclasses
            may override this method to provide different implementations of writing to Isolated Storage.
            </summary>
            <param name="itemToWrite">Value to write. May be null.</param>
            <param name="fileStream">Stream to which value should be written. May not be null.</param>
            <param name="encrypted">True if item is to be encrypted</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageCacheItemField.ReadField(System.IO.IsolatedStorage.IsolatedStorageFileStream,System.Boolean)">
            <summary>
            Responsible for reading value from IsolatedStorage using given IsolatedStorageFileStream reference. Subclasses
            may override this method to provide different implementations of reading from IsolatedStorage.
            </summary>
            <param name="fileStream">Stream from which value should be written. May not be null.</param>
            <param name="encrypted">True if item is stored encrypted</param>
            <returns>Value read from Isolated Storage. May be null if value stored is null</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider">
            <summary>
            Not intended for direct use.  Provides symmetric encryption and decryption services 
            to Isolated and Database backing stores.  Allows this block to use 
            Security.Cryptography without having a direct reference to that assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider.Encrypt(System.Byte[])">
            <summary>
            Encrypt backing store data.
            </summary>
            <param name="plaintext">Clear bytes.</param>
            <returns>Encrypted bytes.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider.Decrypt(System.Byte[])">
            <summary>
            Decrypt backing store data.
            </summary>
            <param name="ciphertext">Encrypted bytes.</param>
            <returns>Decrypted bytes.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore">
            <summary>
            This class is used when no backing store is needed to support the caching storage policy.
            Its job is to provide an implementation of a backing store that does nothing, merely enabling
            the cache to provide a strictly in-memory cache.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore.Add(Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Not used
            </summary>
            <param name="newCacheItem">Not used</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore.Remove(System.String)">
            <summary>
            Not used
            </summary>
            <param name="key">Not used</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore.UpdateLastAccessedTime(System.String,System.DateTime)">
            <summary>
            Not used
            </summary>
            <param name="key">Not used</param>
            <param name="timestamp">Not used</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore.Flush">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore.Load">
            <summary>
            Always returns an empty hash table.
            </summary>
            <returns>Empty hash table</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore.Dispose">
            <summary>
            Empty dispose implementation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore.Count">
            <summary>
            Always returns 0
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Cache">
            <summary>
            The real worker of the block. The Cache class is the traffic cop that prevents 
            resource contention among the different threads in the system. It also will act
            as the remoting gateway when that feature is added to the cache.
            </summary>	
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations">
            <summary>
            Represents cache operations.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations.RemoveItemFromCache(System.String,Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason)">
            <summary>
            Removes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/>.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <param name="removalReason">One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason"/> values.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations.CurrentCacheState">
            <summary>
            Gets the current cache state.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations.Count">
            <summary>
            Returns the number of items contained in the cache.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Cache.#ctor(Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore,Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider)">
            <summary>
            Initialzie a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Cache"/> class with a backing store, and scavenging policy.
            </summary>
            <param name="backingStore">The cache backing store.</param>
            <param name="instrumentationProvider">The instrumentation provider.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Contains(System.String)">
            <summary>
            Determines if a particular key is contained in the cache.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>
            <see langword="true"/> if the key is contained in the cache; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Add(System.String,System.Object)">
            <summary>
            Add a new keyed object to the cache.
            </summary>
            <param name="key">The key of the object.</param>
            <param name="value">The object to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Add(System.String,System.Object,Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority,Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction,Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration[])">
            <summary>
            Add a new keyed object to the cache.
            </summary>
            <param name="key">The key of the object.</param>
            <param name="value">The object to add.</param>
            <param name="scavengingPriority">One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority"/> values.</param>
            <param name="refreshAction">An <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction"/> object.</param>
            <param name="expirations">An array of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration"/> objects.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Remove(System.String)">
            <summary>
            Remove an item from the cache by key.
            </summary>
            <param name="key">The key of the item to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Remove(System.String,Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason)">
            <summary>
            Remove an item from the cache by key.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <param name="removalReason">One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason"/> values.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Cache.RemoveItemFromCache(System.String,Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="key">The key to remove.</param>
            <param name="removalReason">One of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason"/> values.</param>
            <remarks>
            This seemingly redundant method is here to be called through the ICacheOperations 
            interface. I put this in place to break any dependency from any other class onto 
            the Cache class
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Cache.GetData(System.String)">
            <summary>
            Get the object from the cache for the key.
            </summary>
            <param name="key">
            The key whose value to get.
            </param>
            <returns>
            The value associated with the specified key. 
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Flush">
            <summary>
            Flush the cache.
            </summary>
            <remarks>
            There may still be thread safety issues in this class with respect to cacheItemExpirations
            and scavenging, but I really doubt that either of those will be happening while
            a Flush is in progress. It seems that the most likely scenario for a flush
            to be called is at the very start of a program, or when absolutely nothing else
            is going on. Calling flush in the middle of an application would seem to be
            an "interesting" thing to do in normal circumstances.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Finalize">
            <summary>
            Dispose of the backing store before garbage collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Dispose">
            <summary>
            Dispose of the backing store before garbage collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Dispose(System.Boolean)">
            <summary>
            Dispose of the backing store before garbage collection.
            </summary>
            <param name="disposing">
            <see langword="true"/> if disposing; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Cache.Count">
            <summary>
            Gets the count of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> objects.
            </summary>
            <value>
            The count of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> objects.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Cache.CurrentCacheState">
            <summary>
            Gets the current cache.
            </summary>
            <returns>
            The current cache.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheCapacityScavengingPolicy">
            <summary>
            Cache scavenging policy based on capacity.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheCapacityScavengingPolicy.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheCapacityScavengingPolicy"/> class with the name of the cache manager and the proxy to the configuration data.
            </summary>
            <param name="maximumElementsInCacheBeforeScavenging">The proxy to the latest configuration data.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheCapacityScavengingPolicy.IsScavengingNeeded(System.Int32)">
            <summary>
            Determines if scavenging is needed.
            </summary>
            <param name="currentCacheItemCount">The current number of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> objects in the cache.</param>
            <returns>
            <see langword="true"/> if scavenging is needed; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.CacheCapacityScavengingPolicy.MaximumItemsAllowedBeforeScavenging">
            <summary>
            Gets the maximum items to allow before scavenging.
            </summary>
            <value>
            The maximum items to allow before scavenging.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheFactory">
            <summary>
            Static factory class used to get instances of a specified CacheManager
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheFactory.GetCacheManager">
            <summary>
            Returns the default CacheManager instance. The same instance should be returned each time this method
            is called. The name of the instance to treat as the default CacheManager is defined in the configuration file.
            Guaranteed to return an intialized CacheManager if no exception thrown
            </summary>
            <returns>Default cache manager instance.</returns>
            <exception cref="T:System.Configuration.ConfigurationException">Unable to create default CacheManager</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheFactory.GetCacheManager(System.String)">
            <summary>
            Returns the named ICacheManager instance. Guaranteed to return an initialized ICacheManager if no exception thrown.
            </summary>
            <param name="cacheManagerName">Name defined in configuration for the cache manager to instantiate</param>
            <returns>The requested CacheManager instance.</returns>
            <exception cref="T:System.ArgumentNullException">cacheManagerName is null</exception>
            <exception cref="T:System.ArgumentException">cacheManagerName is empty</exception>
            <exception cref="T:System.Configuration.ConfigurationException">Could not find instance specified in cacheManagerName</exception>
            <exception cref="T:System.InvalidOperationException">Error processing configuration information defined in application configuration file.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem">
            <summary>
            This class contains all data important to define an item stored in the cache. It holds both the key and 
            value specified by the user, as well as housekeeping information used internally by this block. It is public, 
            rather than internal, to allow block extenders access to it inside their own implementations of IBackingStore.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.#ctor(System.String,System.Object,Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority,Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction,Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration[])">
            <summary>
            Constructs a fully formed CacheItem. 
            </summary>
            <param name="key">Key identifying this CacheItem</param>
            <param name="value">Value to be stored. May be null.</param>
            <param name="scavengingPriority">Scavenging priority of CacheItem. See <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority"/> for values.</param>
            <param name="refreshAction">Object supplied by caller that will be invoked upon expiration of the CacheItem. May be null.</param>
            <param name="expirations">Param array of ICacheItemExpiration objects. May provide 0 or more of these.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.#ctor(System.DateTime,System.String,System.Object,Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority,Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction,Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration[])">
            <summary>
            Constructs a fully formed CacheItem. This constructor is to be used when restoring an existing
            CacheItem from the backing store. As such, it does not generate its own Guid for this instance,
            but allows the GUID to be passed in, as read from the backing store.
            </summary>
            <param name="lastAccessedTime">Time this CacheItem last accessed by user.</param>
            <param name="key">Key provided  by the user for this cache item. May not be null.</param>
            <param name="value">Value to be stored. May be null.</param>
            <param name="scavengingPriority">Scavenging priority of CacheItem. See <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority"/> for values.</param>
            <param name="refreshAction">Object supplied by caller that will be invoked upon expiration of the CacheItem. May be null.</param>
            <param name="expirations">Param array of ICacheItemExpiration objects. May provide 0 or more of these.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.Replace(System.Object,Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction,Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority,Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration[])">
            <summary>
            Replaces the internals of the current cache item with the given new values. This is strictly used in the Cache
            class when adding a new item into the cache. By replacing the item's contents, rather than replacing the item
            itself, it allows us to keep a single reference in the cache, simplifying locking.
            </summary>
            <param name="cacheItemData">Value to be stored. May be null.</param>
            <param name="cacheItemPriority">Scavenging priority of CacheItem. See <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority"/> for values.</param>
            <param name="cacheItemRefreshAction">Object supplied by caller that will be invoked upon expiration of the CacheItem. May be null.</param>
            <param name="cacheItemExpirations">Param array of ICacheItemExpiration objects. May provide 0 or more of these.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.GetExpirations">
            <summary>
            Returns array of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration"/> objects for this instance.
            </summary>
            <returns>
            An array of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration"/> objects.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.HasExpired">
            <summary>
            Evaluates all cacheItemExpirations associated with this cache item to determine if it 
            should be considered expired. Evaluation stops as soon as any expiration returns true. 
            </summary>
            <returns>True if item should be considered expired, according to policies
            defined in this item's cacheItemExpirations.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.TouchedByUserAction(System.Boolean)">
            <summary>
            Intended to be used internally only. This method is called whenever a CacheItem is touched through the action of a user. It
            prevents this CacheItem from being expired or scavenged during an in-progress expiration or scavenging process. It has no effect
            on subsequent expiration or scavenging processes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.TouchedByUserAction(System.Boolean,System.DateTime)">
            <summary>
            Intended to be used internally only. This method is called whenever a CacheItem is touched through the action of a user. It
            prevents this CacheItem from being expired or scavenged during an in-progress expiration or scavenging process. It has no effect
            on subsequent expiration or scavenging processes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.MakeEligibleForScavenging">
            <summary>
            Makes the cache item eligible for scavenging.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.MakeNotEligibleForScavenging">
            <summary>
            Makes the cache item not eligible for scavenging.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.SetLastAccessedTime(System.DateTime)">
            <summary>
            Sets the last accessed time for the cache item.
            </summary>
            <param name="specificAccessedTime">The last accessed time.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.ScavengingPriority">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority"/> assigned to this CacheItem
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.LastAccessedTime">
            <summary>
            Returns the last accessed time.
            </summary>
            <value>
            Gets the last accessed time.
            </value>
            <remarks>
            The set is present for testing purposes only. Should not be called by application code 
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.WillBeExpired">
            <summary>
            Intended to be used internally only. The value should be true when an item is eligible to be expired.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.EligibleForScavenging">
            <summary>
            Intended to be used internally only. The value should be true when an item is eligible for scavenging.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.Value">
            <summary>
            Returns the cached value of this CacheItem
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.Key">
            <summary>
            Returns the key associated with this CacheItem
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem.RefreshAction">
            <summary>
            Intended to be used internally only. Returns object used to refresh expired CacheItems.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority">
            <summary>
            Specifies the item priority levels.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority.None">
            <summary>
            Should never be seen in nature.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority.Low">
            <summary>
            Low priority for scavenging.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority.Normal">
            <summary>
            Normal priority for scavenging.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority.High">
            <summary>
            High priority for scavenging.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority.NotRemovable">
            <summary>
            Non-removable priority for scavenging.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason">
            <summary>
            The reason that the cache item was removed.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason.Expired">
            <summary>
            The item has expired.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason.Removed">
            <summary>
            The item was manually removed from the cache.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason.Scavenged">
            <summary>
            The item was removed by the scavenger because it had a lower priority that any other item in the cache.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason.Unknown">
            <summary>
            Reserved. Do not use.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager">
            <summary>
            This class represents the interface to caching as shown to the user. All caching operations are performed through this class.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager">
            <summary>
            This interface defines the contract that must be implemented by all cache managers. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.Add(System.String,System.Object)">
            <summary>
            Adds new CacheItem to cache. If another item already exists with the same key, that item is removed before
            the new item is added. If any failure occurs during this process, the cache will not contain the item being added. 
            Items added with this method will be not expire, and will have a Normal <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority"/> priority.
            </summary>
            <param name="key">Identifier for this CacheItem</param>
            <param name="value">Value to be stored in cache. May be null.</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.Add(System.String,System.Object,Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority,Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction,Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration[])">
            <summary>
            Adds new CacheItem to cache. If another item already exists with the same key, that item is removed before
            the new item is added. If any failure occurs during this process, the cache will not contain the item being added.
            </summary>
            <param name="key">Identifier for this CacheItem</param>
            <param name="value">Value to be stored in cache. May be null.</param>
            <param name="scavengingPriority">Specifies the new item's scavenging priority. 
            See <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority"/> for more information.</param>
            <param name="refreshAction">Object provided to allow the cache to refresh a cache item that has been expired. May be null.</param>
            <param name="expirations">Param array specifying the expiration policies to be applied to this item. May be null or omitted.</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.Contains(System.String)">
            <summary>
            Returns true if key refers to item current stored in cache
            </summary>
            <param name="key">Key of item to check for</param>
            <returns>True if item referenced by key is in the cache</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.Flush">
            <summary>
            Removes all items from the cache. If an error occurs during the removal, the cache is left unchanged.
            </summary>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.GetData(System.String)">
            <summary>
            Returns the value associated with the given key.
            </summary>
            <param name="key">Key of item to return from cache.</param>
            <returns>Value stored in cache</returns>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.Remove(System.String)">
            <summary>
            Removes the given item from the cache. If no item exists with that key, this method does nothing.
            </summary>
            <param name="key">Key of item to remove from cache.</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.Count">
            <summary>
            Returns the number of items currently in the cache.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager.Item(System.String)">
            <summary>
            Returns the item identified by the provided key
            </summary>
            <param name="key">Key to retrieve from cache</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the cache items.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.#ctor(Microsoft.Practices.EnterpriseLibrary.Caching.Cache,Microsoft.Practices.EnterpriseLibrary.Caching.BackgroundScheduler,Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationPollTimer)">
            <summary>
            
            </summary>
            <param name="realCache"></param>
            <param name="backgroundScheduler"></param>
            <param name="pollTimer"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Contains(System.String)">
            <summary>
            Returns true if key refers to item current stored in cache
            </summary>
            <param name="key">Key of item to check for</param>
            <returns>True if item referenced by key is in the cache</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Add(System.String,System.Object)">
            <summary>
            Adds new CacheItem to cache. If another item already exists with the same key, that item is removed before
            the new item is added. If any failure occurs during this process, the cache will not contain the item being added. 
            Items added with this method will be not expire, and will have a Normal <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority"/> priority.
            </summary>
            <param name="key">Identifier for this CacheItem</param>
            <param name="value">Value to be stored in cache. May be null.</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Add(System.String,System.Object,Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority,Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction,Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration[])">
            <summary>
            Adds new CacheItem to cache. If another item already exists with the same key, that item is removed before
            the new item is added. If any failure occurs during this process, the cache will not contain the item being added.
            </summary>
            <param name="key">Identifier for this CacheItem</param>
            <param name="value">Value to be stored in cache. May be null.</param>
            <param name="scavengingPriority">Specifies the new item's scavenging priority. 
            See <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemPriority"/> for more information.</param>
            <param name="refreshAction">Object provided to allow the cache to refresh a cache item that has been expired. May be null.</param>
            <param name="expirations">Param array specifying the expiration policies to be applied to this item. May be null or omitted.</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Remove(System.String)">
            <summary>
            Removes the given item from the cache. If no item exists with that key, this method does nothing.
            </summary>
            <param name="key">Key of item to remove from cache.</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.GetData(System.String)">
            <summary>
            Returns the value associated with the given key.
            </summary>
            <param name="key">Key of item to return from cache.</param>
            <returns>Value stored in cache</returns>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Flush">
            <summary>
            Removes all items from the cache. If an error occurs during the removal, the cache is left unchanged.
            </summary>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Dispose">
            <summary>
            Not intended for public use. Only public due to requirements of IDisposable. If you call this method, your
            cache will be unusable.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Count">
            <summary>
            Returns the number of items currently in the cache.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager.Item(System.String)">
            <summary>
            Returns the item identified by the provided key
            </summary>
            <param name="key">Key to retrieve from cache</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the cache items.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManagerFactory">
            <summary>
            Factory for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>s. This class is responsible for creating all the internal
            classes needed to implement a CacheManager.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1">
            <summary>
            Class that can be used as a base class for instance factories.
            </summary>
            <remarks>
            This class is used to create instances of types compatible with <typeparamref name="T"/> described 
            by a configuration source.
            </remarks>
            <typeparam name="T">Type of instance to create</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1"/> that resolves objects
            using the supplied <paramref name="container"/>.
            </summary>
            <param name="container"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> to use to resolve objects.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1"/>. A container will be
            constructed under the hood and be initialized with the information in <paramref name="configurationSource"/>.
            </summary>
            <param name="configurationSource">Configuration information.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1.#ctor">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1"/> that resolves objects
            through the Entlib default container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1.CreateDefault">
            <summary>
            Returns a new instance of <typeparamref name="T"/> based on the default instance configuration.
            </summary>
            <returns>
            A new instance of <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1.Create(System.String)">
            <summary>
            Returns an new instance of <typeparamref name="T"/> based on the configuration for <paramref name="name"/>.
            </summary>
            <param name="name">The name of the required instance.</param>
            <returns>
            A new instance of <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerBasedInstanceFactory`1.Dispose">
            <summary>
            Releases resources currently held by this object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManagerFactory.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManagerFactory"/> class 
            with the default configuration source.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManagerFactory.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            
            </summary>
            <param name="serviceLocator"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManagerFactory.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManagerFactory"/> class 
            with the given configuration source.</para>
            </summary>
            <param name="configurationSource">The configuration source that contains information on how to build the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> instances</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData">
            <summary>
            Configuration data defining CacheManagerData. Defines the information needed to properly configure
            a CacheManager instance.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase">
            <summary>
            Base class for configuration data defining CacheManagerDataBase. Defines the information needed to properly configure
            a ICacheManager instance.
            </summary>    	
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement">
            <summary>
            Represents a <see cref="T:System.Configuration.ConfigurationElement"/> that has a name and type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement">
            <summary>
            Represents a named <see cref="T:System.Configuration.ConfigurationElement"/> where the name is the key to a collection.
            </summary>
            <remarks>
            This class is used in conjunction with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName">
            <summary>
            Represents the abstraction of an object with a name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithName.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.nameProperty">
            <summary>
            Name of the property that holds the name of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.#ctor">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.#ctor(System.String)">
            <summary>
            Intialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> class with a name.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.DeserializeElement(System.Xml.XmlReader)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Updates the configuration properties of the receiver with the information in the current element in the <paramref name="reader"/>.
            </summary>
            <param name="reader">The reader over the configuration file.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType">
            <summary>
            Represents the abstraction of an object with a name and a type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IObjectWithNameAndType.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.typeProperty">
            <summary>
            Name of the property that holds the type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.#ctor">
            <summary>
            Intialzie an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.#ctor(System.String,System.Type)">
            <summary>
            Initialize an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> class
            </summary>
            <param name="name">The name of the element.</param>
            <param name="type">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> that this element is the configuration for.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </summary>
            <value>
            The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.TypeName">
            <summary>
            Gets or sets the fully qualified name of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </summary>
            <value>
            the fully qualified name of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase.#ctor(System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase"/> class.
            </summary>
            <param name="type">The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase.#ctor(System.String,System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase"/> class.
            </summary>
            <param name="name">
            The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase"/>.
            </param>
            <param name="type">The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase.GetRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Get the set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> object needed to
            register the CacheManager represented by this config element.
            </summary>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase.GetCacheManagerCreationExpression">
            <summary>
            Gets the creation expression used to produce a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> during
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerDataBase.GetRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)"/>.
            </summary>
            <remarks>
            This must be overridden by a subclass, but is not marked as abstract due to configuration serialization needs.
            </remarks>
            <returns>A <see cref="T:System.Linq.Expressions.Expression"/> that creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/> class.
            </summary>
            <param name="name">
            The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>.
            </param>
            <param name="expirationPollFrequencyInSeconds">
            Frequency in seconds of expiration polling cycle
            </param>
            <param name="maximumElementsInCacheBeforeScavenging">
            Maximum number of items in cache before an add causes scavenging to take place
            </param>
            <param name="numberToRemoveWhenScavenging">
            Number of items to remove from cache when scavenging
            </param>
            <param name="cacheStorage">
            CacheStorageData object from configuration describing how data is stored 
            in the cache.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.GetRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Get the set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> object needed to
            register the CacheManager represented by this config element.
            </summary>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.GetCacheManagerCreationExpression">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.ExpirationPollFrequencyInSeconds">
            <summary>
            Frequency in seconds of expiration polling cycle
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.MaximumElementsInCacheBeforeScavenging">
            <summary>
            Maximum number of items in cache before an add causes scavenging to take place
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.NumberToRemoveWhenScavenging">
            <summary>
            Number of items to remove from cache when scavenging
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.CacheStorage">
            <summary>
            CacheStorageData object from configuration describing how data is stored 
            in the cache.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings">
            <summary>
            Overall configuration settings for Caching
            </summary>    
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection">
            <summary>
            Represents a configuration section that can be serialized and deserialized to XML.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection.GetSchema">
            <summary>
            Returns the XML schema for the configuration section.
            </summary>
            <returns>A string with the XML schema, or <see langword="null"/> (<b>Nothing</b> 
            in Visual Basic) if there is no schema.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Updates the configuration section with the values from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that reads the configuration source located at the element that describes the configuration section.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SerializableConfigurationSection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the configuration section values as an XML element to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> that writes to the configuration source.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider">
            <summary>
            This interface represents an object that can return configuration information
            used to configure a container to resolve Entlib objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider.GetRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to configure
            the container.
            </summary>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider.GetUpdatedRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings.SectionName">
            <summary>
            Configuration key for cache manager settings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings.GetRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings.GetUpdatedRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings.DefaultCacheManager">
            <summary>
            Defines the default manager instance to use when no other manager is specified
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings.CacheManagers">
            <summary>
            Gets the collection of defined <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> objects.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings.BackingStores">
            <summary>
            Gets the collection of defined <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> objects.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings.EncryptionProviders">
            <summary>
            Gets the collection of defined <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/> objects.
            </summary>
            <value>
            The collection of defined <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/> objects.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData">
            <summary>
            Configuration data defining CacheStorageData. This configuration section defines the name and type
            of the IBackingStore used by a CacheManager
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData.#ctor(System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> class with a name and the type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.
            </summary>
            <param name="type">The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData.#ctor(System.String,System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> class with a name and the type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.
            </summary>
            <param name="name">The name of the configured <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>. </param>
            <param name="type">The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/> class with a name, the type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>, and a reference to a named instance of an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.
            </summary>
            <param name="name">The name of the configured <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>. </param>
            <param name="type">The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.</param>
            <param name="storageEncryption">The name of the referenced <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData.GetRegistrations">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData.StorageEncryption">
            <summary>
            Gets the name of the referenced <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData">
            <summary>
            Configuration object for Custom Providers.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1">
            <summary>
            This interface must be implemented by configuration objects for custom providers that rely
            on a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1"/> to perform the dynamic properties management.
            </summary>
            <remarks>
            This interface is generic so that the helper can be strongly-typed.
            </remarks>
            <typeparam name="T">The configuration object type. It must match the type implementing the interface.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICustomProviderData">
            <summary>
            Represents the configuration settings for a custom provider.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICustomProviderData.Name">
            <summary>
            Gets the name for the represented provider.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICustomProviderData.Attributes">
            <summary>
            Gets the attributes for the represented provider.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns the value for the specified property using the inherited implementation.
            </summary>
            <param name="property">The property to get the value from.</param>
            <returns>The value for the property.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseIsModified">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Returns the modification status using the inherited implementation.
            </summary>
            <returns><b>true</b> if the configuration element has been modified, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseReset(System.Configuration.ConfigurationElement)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Resets the internal state of the configuration object using the inherited implementation.
            </summary>
            <param name="parentElement">The parent node of the configuration element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Sets the value for the specified property using the inherited implementation.
            </summary>
            <param name="property">The property to set the value to.</param>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Modifies the <b>ConfigurationElement</b> object to remove all values that should not be saved using the inherited implementation.
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">The parent <b>ConfigurationElement</b> object, or a null reference (Nothing in Visual Basic) if this is the top level.</param>
            <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode"/> object that determines which property values to include.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IHelperAssistedCustomConfigurationData`1.Helper">
            <summary>
            Gets the helper that manages the configuration information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.#ctor">
            <summary>
            Initializes with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.#ctor(System.String,System.Type)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.#ctor(System.String,System.String)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheManagerData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheManagerData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheManagerData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheManagerData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheManagerData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.GetRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Get the set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> object needed to
            register the CacheManager represented by this config element.
            </summary>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.TypeName">
            <summary>
            Overridden in order to apply <see cref="T:System.ComponentModel.BrowsableAttribute"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheManagerData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData">
            <summary>
            Configuration object for Custom Providers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.#ctor">
            <summary>
            Initializes with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.#ctor(System.String,System.Type)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.#ctor(System.String,System.String)">
            <summary>
            Initializes with name and provider type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheStorageData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheStorageData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheStorageData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheStorageData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheStorageData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.GetRegistrations">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.TypeName">
            <summary>
            Overridden in order to apply <see cref="T:System.ComponentModel.BrowsableAttribute"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Caching#Configuration#CustomCacheStorageData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.AddCachingSettings">
            <summary>
              查找类似 Add Caching Settings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataBaseDescription">
            <summary>
              查找类似 Persists the cached data in memory, and optionally interacts with a persistent backing store. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataBaseDisplayName">
            <summary>
              查找类似 Cache Manager 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataBaseNameDescription">
            <summary>
              查找类似 The name of the Cache Manager. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataBaseNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataBaseTypeNameDescription">
            <summary>
              查找类似 The fully qualified type name of the Cache Manager. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataBaseTypeNameDisplayName">
            <summary>
              查找类似 Type Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataCacheStorageDescription">
            <summary>
              查找类似 The name of the Backing Store to use for this Cache Manager. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataCacheStorageDisplayName">
            <summary>
              查找类似 Backing Store 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataDescription">
            <summary>
              查找类似 Persists the cached data in memory, and optionally interacts with a persistent backing store. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataDisplayName">
            <summary>
              查找类似 Cache Manager 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataExpirationPollFrequencyInSecondsDescription">
            <summary>
              查找类似 Time in seconds between each cycle that removes expired cached items. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataExpirationPollFrequencyInSecondsDisplayName">
            <summary>
              查找类似 Expiration Polling Frequency (seconds) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataMaximumElementsInCacheBeforeScavengingDescription">
            <summary>
              查找类似 Maximum number of items in the cache before adding another causes scavenging to occur. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataMaximumElementsInCacheBeforeScavengingDisplayName">
            <summary>
              查找类似 Max. Elements In Cache Before Scavenging 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataNumberToRemoveWhenScavengingDescription">
            <summary>
              查找类似 Number of items to remove from the cache during each scavenging cycle. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerDataNumberToRemoveWhenScavengingDisplayName">
            <summary>
              查找类似 Number to Remove when Scavenging 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsBackingStoresDescription">
            <summary>
              查找类似 Persists the cached items to a store such as a database or Isolated Storage. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsBackingStoresDisplayName">
            <summary>
              查找类似 Backing Stores 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsCacheManagersDescription">
            <summary>
              查找类似 The Cache Managers configured for the Caching Application Block 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsCacheManagersDisplayName">
            <summary>
              查找类似 Cache Managers 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsDefaultCacheManagerDescription">
            <summary>
              查找类似 The default Cache Manager to use when code does not specify a named Cache Manager. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsDefaultCacheManagerDisplayName">
            <summary>
              查找类似 Default Cache Manager 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsDescription">
            <summary>
              查找类似 Configuration settings for the Caching Application Block 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsDisplayName">
            <summary>
              查找类似 Caching Settings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsEncryptionProvidersDescription">
            <summary>
              查找类似 Provide encryption of the data persisted in a backing store, but not in memory. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheManagerSettingsEncryptionProvidersDisplayName">
            <summary>
              查找类似 Encryption Providers 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataDescription">
            <summary>
              查找类似 The name of the referenced Backing Store for this Cache Manager. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataDisplayName">
            <summary>
              查找类似 Cache Storage 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataNameDescription">
            <summary>
              查找类似 The name of the backing store. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataStorageEncryptionDescription">
            <summary>
              查找类似 The name of the Encryption Provider to use for this Backing Store. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataStorageEncryptionDisplayName">
            <summary>
              查找类似 Encryption Provider 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataTypeNameDescription">
            <summary>
              查找类似 The fully qualified type name of the Backing Store. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CacheStorageDataTypeNameDisplayName">
            <summary>
              查找类似 Type Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheManagerDataAddCommand">
            <summary>
              查找类似 Custom Cache Manager (using type picker) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheManagerDataDescription">
            <summary>
              查找类似 Custom implementation that persists the cached data in memory, and optionally interacts with a persistent backing store. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheManagerDataDisplayName">
            <summary>
              查找类似 Custom Cache Manager 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheManagerDataNameDescription">
            <summary>
              查找类似 The name of the Custom Cache Manager. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheManagerDataNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheManagerDataTypeNameDescription">
            <summary>
              查找类似 The fully qualified type name of the Custom Cache Manager. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheManagerDataTypeNameDisplayName">
            <summary>
              查找类似 Type Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataAddCommand">
            <summary>
              查找类似 Custom Cache Store (using type picker) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataDescription">
            <summary>
              查找类似 A Backing Store implemented as a custom class that persists the cached data, and is added to Enterprise Library. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataDisplayName">
            <summary>
              查找类似 Custom Cache Storage 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataNameDescription">
            <summary>
              查找类似 The name of the Custom Backing Store. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataStorageEncryptionDescription">
            <summary>
              查找类似 The name of the Encryption Provider for this Backing Store. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataStorageEncryptionDisplayName">
            <summary>
              查找类似 Encryption Provider 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataTypeNameDescription">
            <summary>
              查找类似 The fully qualified type name of the Custom Backing Store. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.CustomCacheStorageDataTypeNameDisplayName">
            <summary>
              查找类似 Type Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataDescription">
            <summary>
              查找类似 Stores the cached data in a persistent Isolated Storage store on the local machine. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataDisplayName">
            <summary>
              查找类似 Isolated Storage Cache Store 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataNameDescription">
            <summary>
              查找类似 The name of the Isolated Storage Cache Store 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataPartitionNameDescription">
             <summary>
               查找类似 The section or partition of the Isolated Storage area for the cached data. 
            This allows different users to cache data on the same machine safely, and prevents different users accessing the same cached data. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataPartitionNameDisplayName">
            <summary>
              查找类似 Partition Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataStorageEncryptionDescription">
            <summary>
              查找类似 The name of the Encryption Provider to use for this Isolated Storage Cache Store. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataStorageEncryptionDisplayName">
            <summary>
              查找类似 Encryption Provider 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataTypeNameDescription">
            <summary>
              查找类似 The fully qualified type name of the Isolated Storage Cache Store. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.IsolatedStorageCacheStorageDataTypeNameDisplayName">
            <summary>
              查找类似 Type Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.StorageEncryptionProviderDataDescription">
            <summary>
              查找类似 Encrypts the data in the backing store (but not in memory) using a Cryptography Provider defined in the Cryptography Application Block. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.StorageEncryptionProviderDataDisplayName">
            <summary>
              查找类似 Encryption Provider 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.StorageEncryptionProviderDataNameDescription">
            <summary>
              查找类似 The name of the Encryption Provider. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.StorageEncryptionProviderDataNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.StorageEncryptionProviderDataTypeNameDescription">
            <summary>
              查找类似 The fully qualified type name of the Encryption Provider. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.DesignResources.StorageEncryptionProviderDataTypeNameDisplayName">
            <summary>
              查找类似 Type Name 的本地化字符串。
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension">
            <summary>
            Base class for fluent interface builders that extend the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager"/> interface.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheStorageExtension">
            <summary>
            Allows access to the underlying configuration classes that are used for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance being configured.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface">
            <summary>
            Interface that is used to build fluent interfaces and hides methods declared by <see cref="T:System.Object"/> from IntelliSense.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.GetType">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetType"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.GetHashCode">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.GetHashCode"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.ToString">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.ToString"/> method from IntelliSense.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.IFluentInterface.Equals(System.Object)">
            <summary>
            Redeclaration that hides the <see cref="M:System.Object.Equals(System.Object)"/> method from IntelliSense.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheStorageExtension.CacheStorage">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> instance that corresponds to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheStorageExtension.CachingSettings">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> instance that is currently being build up.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension"/> passing the current <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.CacheManager"/>'s fluent interface builder.
            </summary>
            <param name="context">The current <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.CacheManager"/>'s fluent interface builder.<br/>
            This interface must implement <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManagerExtension"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.AddBackingStoreToCachingConfigurationAndCurrentCacheManager(Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> as well as adds a reference to the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.CacheManager"/> instance currently being configured.
            </summary>
            <param name="backingStore">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> that should be added to configuration.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.CacheManager">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/> instance that corresponds to the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.CacheManager"/> being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerExtension.CachingSettings">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> instance that is currently being build up.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManagerExtension">
            <summary>
            Allows access to the underlying configuration classes that are used for the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManagerExtension.CacheManager"/> instance being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManagerExtension.CacheManager">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/> instance that corresponds to the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManagerExtension.CacheManager"/> being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManagerExtension.CachingSettings">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> instance that is currently being build up.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerSettingsExtension">
            <summary>
            Base class for fluent interface builders that extend the caching configuration fluent interface.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration">
            <summary>
            Root fluent interface for building up caching configuration.<br/>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationExtension">
            <summary>
            Allows access to the underlying <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationExtension.CachingSettings">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> instance that is currently being build up.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerSettingsExtension.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerSettingsExtension"/> passing the caching configuration's fluent interface builder.
            </summary>
            <param name="context">The current caching configuration's fluent interface builder.<br/>
            This interface must implement <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationExtension"/>.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheManagerSettingsExtension.CachingSettings">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> instance that is currently being build up.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheStorageExtension">
            <summary>
            Base class for fluent interface builders that extend the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IBackingStoreEncryptItemsUsing"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheStorageExtension.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IBackingStoreEncryptItemsUsing)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheStorageExtension"/> passing the current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>'s fluent interface builder.
            </summary>
            <param name="context">The current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>'s fluent interface builder.<br/>
            This interface must implement <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheStorageExtension"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheStorageExtension.AddEncryptionProviderToCachingConfigurationAndBackingStore(Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData"/> to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> as well as adds a reference to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance currently being configured.
            </summary>
            <param name="storageEncyption">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData"/> that should be added to configuration.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheStorageExtension.CacheStorage">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> instance that corresponds to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.CacheStorageExtension.CachingSettings">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> instance that is currently being build up.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CachingConfigurationSourceBuilderExtensions">
            <summary>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder"/> extensions to support creation of caching configuration settings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CachingConfigurationSourceBuilderExtensions.ConfigureCaching(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder)">
            <summary>
            Main entry point to create a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/> section.
            </summary>
            <param name="configurationSourceBuilder">The builder interface to extend.</param>
            <returns>A fluent interface to further configure the caching configuration section.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ForCacheManagerNamedExtension">
            <summary>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration"/> extensions to support configuring <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> intances.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ForCacheManagerNamedExtension.ForCacheManagerNamed(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration,System.String)">
            <summary>
            Adds a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> to the caching configuration.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="cacheManagerName">The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>. </returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager">
            <summary>
            Fluent interface used to configure a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> instance.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager.UseAsDefaultCache">
            <summary>
            Specifies the current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> as the default cache manager instance.
            </summary>
            <returns>Fluent interface that can be used to further configure this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager.StoreInSharedBackingStore(System.String)">
            <summary>
            Specifies cache items should be stored using a previously configured <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> of name <paramref name="backingStoreName"/>.
            </summary>
            <param name="backingStoreName">The name of the backing store that should be used to store cache items.</param>
            <returns>Fluent interface that can be used to further configure caching configuration.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager.StoreInMemory">
            <summary>
            Specifies cache items should not be persisted, but kept in memory using a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore"/>.
            </summary>
            <returns>Fluent interface that can be used to further configure caching configuration.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager.WithOptions">
            <summary>
            Returns a fluent interface to further configure this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> instance.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Fluent.ICachingConfigurationCacheManagerOptions">
            <summary>
            Fluent interface used to further configure a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> instance.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Fluent.ICachingConfigurationCacheManagerOptions.PollWhetherItemsAreExpiredIntervalSeconds(System.Int32)">
            <summary>
            Specifies the time interval, in seconds, that should be waited to see whether cache items should be expired. <br/>
            The default interval is 60 seconds.
            </summary>
            <param name="pollExperitionSeconds">The time interval, in seconds, that should be waited to see whether cache items should be expired.</param>
            <returns>Fluent interface that can be used to further configure this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Fluent.ICachingConfigurationCacheManagerOptions.StartScavengingAfterItemCount(System.Int32)">
            <summary>
            Specifies the maximum numer of cache items after which scavenging will be performed. <br/>
            The default maximum number of cache items is 1000.
            </summary>
            <param name="numberOfElementsBeforeScavenging">The maximum numer of cache items after which scavenging will be performed.</param>
            <returns>Fluent interface that can be used to further configure this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Fluent.ICachingConfigurationCacheManagerOptions.WhenScavengingRemoveItemCount(System.Int32)">
            <summary>
            Specifies the number of cache items that should be removed when scavenging cache items. <br/>
            The default number of cache items that should be removed is 10.
            </summary>
            <param name="numberOfElementsBeforeScavenging">The number of cache items that should be removed when scavenging cache items.</param>
            <returns>Fluent interface that can be used to further configure this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ForCustomCacheManagerNamedExtension">
            <summary>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration"/> extensions to support configuring custom <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/> instances.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ForCustomCacheManagerNamedExtension.ForCustomCacheManagerNamed``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration,System.String)">
            <summary>
            Adds a custom cache mananger of type <typeparamref name="TCustomCacheManager"/> to the caching configuration.
            </summary>
            <typeparam name="TCustomCacheManager">The concrete type of the custom cache manager.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="cacheManagerName">The name of the cache manager that should be added to configuration.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>. </returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ForCustomCacheManagerNamedExtension.ForCustomCacheManagerNamed(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration,System.String,System.Type)">
            <summary>
            Adds a custom cache mananger of type <paramref name="customCacheManagerType"/> to the caching configuration.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="cacheManagerName">The name of the cache manager that should be added to configuration.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>. </returns>
            <param name="customCacheManagerType">The concrete type of the custom cache manager. This type must implement <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ForCustomCacheManagerNamedExtension.ForCustomCacheManagerNamed``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds a custom cache mananger of type <typeparamref name="TCustomCacheManager"/> to the caching configuration.<br/>
            Specifying additional conifguration attributes.
            </summary>
            <typeparam name="TCustomCacheManager">The concrete type of the custom cache manager.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="cacheManagerName">The name of the cache manager that should be added to configuration.</param>
            <param name="attributes">Attributes that should be passed to <typeparamref name="TCustomCacheManager"/> when creating an instance.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>. </returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ForCustomCacheManagerNamedExtension.ForCustomCacheManagerNamed(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfiguration,System.String,System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds a custom cache mananger of type <paramref name="customCacheManagerType"/> to the caching configuration.<br/>
            Specifying additional conifguration attributes.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="cacheManagerName">The name of the cache manager that should be added to configuration.</param>
            <param name="customCacheManagerType">The concrete type of the custom cache manager. This type must implement <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/>.</param>
            <param name="attributes">Attributes that should be passed to <paramref name="customCacheManagerType"/> when creating an instance.</param>
            <returns>Fluent interface that can be used to further configure the created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>. </returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCustomCacheManager">
            <summary>
            Fluent interface used to configure a custom cache manager.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCustomCacheManager.UseAsDefaultCache">
            <summary>
            Specifies the current custom cache manager as the default cache manager instance.
            </summary>
            <returns>Fluent interface that can be used to further configure this custom cache manager.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IBackingStoreEncryptItemsUsing">
            <summary>
            Fluent interface used to add an encryption provider to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance being configured.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IBackingStoreEncryptItemsUsing.SharedEncryptionProviderNamed(System.String)">
            <summary>
            Specifies the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance being configured should use the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/> by the name of <paramref name="cacheStorageEncryptionProviderName"/>.
            </summary>
            <param name="cacheStorageEncryptionProviderName">The name od the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/> that should be used.</param>
            <returns>A fluent interface that can be used to further configure caching settings.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IStoreInCustomStore">
            <summary>
            Fluent interface used to configure a custom <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IStoreInCustomStore.EncryptUsing">
            <summary>
            Returns a fluent interface that can be used to set up encryption for the current custom <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IStoreInIsolatedStorage">
            <summary>
            Fluent interface used to configure a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> instance.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IStoreInIsolatedStorage.UsePartition(System.String)">
            <summary>
            Specifies the which partition should be used for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> instance being configured.
            </summary>
            <param name="partitionName">The name of the partition that should be used.</param>
            <returns>A fluent interface that can be used to further configure the current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> instance.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IStoreInIsolatedStorage.EncryptUsing">
            <summary>
            Returns a fluent interface that can be used to set up encryption for the current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> instance.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.StoreInCustomStoreExtension">
            <summary>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager"/> extension that allows a custom <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> to be configured.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.StoreInCustomStoreExtension.StoreInCustomStore``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager,System.String)">
            <summary>
            Specifies that current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>'s items should be stored using a custom implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.
            </summary>
            <typeparam name="TCustomCacheStorageType">The implementation type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> that should be used.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="backingStoreName">The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance.</param>
            <returns>Fluent interface to further configure the custom <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> implementation.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.StoreInCustomStoreExtension.StoreInCustomStore(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager,System.String,System.Type)">
            <summary>
            Specifies that current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>'s items should be stored using a custom implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="backingStoreName">The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance.</param>
            <param name="customCacheStoreType">The implementation type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> that should be used.</param>
            <returns>Fluent interface to further configure the custom <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> implementation.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.StoreInCustomStoreExtension.StoreInCustomStore``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Specifies that current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>'s items should be stored using a custom implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.
            </summary>
            <typeparam name="TCustomCacheStorageType">The implementation type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> that should be used.</typeparam>
            <param name="context">Fluent interface extension point.</param>
            <param name="backingStoreName">The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance.</param>
            <param name="attributes">Attributes that should be passed to <typeparamref name="TCustomCacheStorageType"/> when creating an instance.</param>
            <returns>Fluent interface to further configure the custom <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> implementation.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.StoreInCustomStoreExtension.StoreInCustomStore(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager,System.String,System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Specifies that current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>'s items should be stored using a custom implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/>.
            </summary>
            <param name="context">Fluent interface extension point.</param>
            <param name="backingStoreName">The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> instance.</param>
            <param name="customCacheStoreType">The implementation type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> that should be used.</param>
            <param name="attributes">Attributes that should be passed to <paramref name="customCacheStoreType"/> when creating an instance.</param>
            <returns>Fluent interface to further configure the custom <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.IBackingStore"/> implementation.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.StoreInIsolatedStorageExtension">
            <summary>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager"/> extension that allows an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> to be configured.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.StoreInIsolatedStorageExtension.StoreInIsolatedStorage(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.ICachingConfigurationCacheManager,System.String)">
            <summary>
            Specifies that current <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>'s items should be stored using a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> instance.
            </summary>
            <param name="backingStoreName">The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/> instance</param>
            <param name="context">Fluent interface extension point.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IsolatedStorageBackingStore"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData">
            <summary>
            Configuration data defining IsolatedStorageCacheStorageData. This configuration section adds the name
            of the Isolated Storage area to use to store data.
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/> class.
            </summary>
            <param name="name">
            The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/>.
            </param>
            <param name="storageEncryption">
            Storage Encryption data defined in configuration
            </param>
            <param name="partitionName">
            Name of the Isolated Storage area to use.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData.GetRegistrations">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData.PartitionName">
            <summary>
            Name of the Isolated Storage area to use.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider">
            <summary>
            <para>This type supports the Enterprise Library Manageability Extensions infrastructure and is not intended to 
            be used directly from your code.</para>
            Represents the behavior required to provide Group Policy updates for the Caching Application Block, and it also manages
            the creation of the ADM template categories and policies required to edit Group Policy Objects for the block.
            </summary>
            <remarks>
            This class performs the actual Group Policy update for the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings"/>
            configuration section and the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData"/> instances contained by it. Processing for 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> and <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData"/> instances is delegated to 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> objects registered to the configuration object data types.
            <para>
            The Group Policy directives for the Caching Application Block differ from other block's directives in that policies are
            only generated for cache managers, and these policies contain the parts used to override the settings for the
            CacheStorageData instance identified by the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerData.CacheStorage">CacheManagerData.CacheStorage</see> 
            property and the StorageEncryptionProviderData instance identified by the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData.StorageEncryption">
            CacheStorageData.StorageEncryption</see> property, if any. Manageability providers registered for CacheStorageData and 
            StorageEncryptionProviderData subclasses must not generate policies, and the parts they generate must include the
            corresponding key name, as they will be included in the cache managers' policies. The purpose for this policy structure
            is to make the experience of editing a Group Policy Object's policies for the Caching Application Block similar to that
            of the Enterprise Library Configuration Console.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1">
            <summary>
            Provides a default base implementation for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> that
            processes policy override processing, performing appropriate logging of
            policy processing errors, from policy override processing for configuration objects
            contained by the section.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider">
            <summary>
            Represents the behavior required to provide Group Policy updates for a <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <remarks>
            Subclasses define the implementation necessary to provide manageability for a specific type of configuration
            section.
            Section providers delegate the manageability support for internal configuration elements to registered instances
            of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> when collections of heterogeneous elements are involved 
            and the concrete type of the configuration elements is unknown in advance. 
            Section providers are registered with the configuration section name they provide manageability to using 
            the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute"/> attribute, which is bound to assemblies.
            Section providers are also responsible for generating the ADM instructions that describe the policies that can be
            used to override the values for all the configuration settings in the section. Usually the ADM instructions generated 
            for a section consist of a policy for block-wide settings and one policy for each configuration element in a collection; 
            however some sections might require a different structure. Manageability providers for elements in a section must be 
            consistent with the ADM structure defined by the section's manageability provider.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute"/>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.PolicyValueName">
            <summary>
            The name of the value used to hold policy enablement status.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.#ctor(System.Collections.Generic.IDictionary{System.Type,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> class with a 
            given set of manageability providers for the elements in the section's collections.
            </summary>
            <param name="providers">The mapping from configuration element type to
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationSection,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information represented by a configuration section.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration section instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="applicationName">The key path for which the generated instructions' keys must be sub keys of.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddAdministrativeTemplateDirectivesForElement``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,``0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information for the element using the supplied element manageability provider.
            </summary>
            <typeparam name="T">The base type for the configuration element.</typeparam>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="element">The configuration element.</param>
            <param name="subProvider">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> used to append the ADM instructions
            for the element.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="parentKey">The key path for which the generated instructions' keys must be sub keys of.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddElementsPolicies``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information for the elements in a collection of configuration elements, using the registered element 
            manageability providers for each element.
            </summary>
            <remarks>
            A new category and one policy for each element in the collection are generated; the element manageability
            providers are responsible for generating the policies.
            Elements for which no manageability provider is registered are ignored.
            </remarks>
            <typeparam name="T">The base type for the configuration elements collection.</typeparam>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="elements">The collection of configuration elements.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="parentKey">The key path for which the generated instructions' keys must be sub keys of.</param>
            <param name="categoryName">The name for the category where the generated policies will be created.</param>
            <devdoc>
            FxCop message CA1004 is supressed because it seems like the rule does not detect the
            existing 'elements' method parameter that uses the generic parameter T.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.GetPolicyKey(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Returns the registry key that represents a policy.
            </summary>
            <param name="machineKey">The key for the policy on the machine tree.</param>
            <param name="userKey">The key for the policy on the user tree.</param>
            <returns>The <paramref name="machineKey"/> if it is not <see langword="null"/> and
            it represents a policy; otherwise the <paramref name="machineKey"/> if it is not 
            <see langword="null"/> and it represents a policy, otherwise <see langword="null"/>.</returns>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.IsPolicyKey">IRegistryKey.IsPolicyKey</seealso>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.GetSubProvider(System.Type)">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> instance registered 
            for type <paramref name="configurationObjectType"/>.
            </summary>
            <param name="configurationObjectType">The configuration element type of the instance needing management.</param>
            <returns>The manageability provider registered to manage the type, or <see langword="null"/> 
            if no provider is registered for the type.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.LoadRegistrySubKeys(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey@,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey@)">
            <summary>
            Utility method that loads sub keys at the machine and user level.
            </summary>
            <param name="subKeyName">The name of the required sub key.</param>
            <param name="machineKey">The parent key at the machine level, or <see langword="null"/> 
            if there is no registry key.</param>
            <param name="userKey">The parent key at the user level, or <see langword="null"/> 
            if there is no registry key.</param>
            <param name="machineSubKey">When this method returns, contains a reference to the sub key of
            <paramref name="machineKey"/> named <paramref name="subKeyName"/>, or <see langword="null"/> 
            if either machineKey is <see langword="null"/> or it does not have a sub key with
            the requested name.</param>
            <param name="userSubKey">When this method returns, contains a reference to the sub key of
            <paramref name="userKey"/> named <paramref name="subKeyName"/>, or <see langword="null"/> 
            if either userKey is <see langword="null"/> or it does not have a sub key with
            the requested name.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.LogExceptionWhileOverriding(System.Exception)">
            <summary>
            Logs an error detected while overriding a configuration object with policy values.
            </summary>
            <param name="exception">The exception representing the error.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.OverrideWithGroupPolicies(System.Configuration.ConfigurationSection,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s and its internal configuration elements' properties 
            with the Group Policy values from the registry, if any.
            </summary>
            <param name="configurationObject">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration section, otherwise
            <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.OverrideWithGroupPolicies``1(``0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the properties for the configuration element.
            </summary>
            <typeparam name="T">The base type for the configuration elements collection.</typeparam>
            <param name="element">The configuration element.</param>
            <param name="subProvider">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> used to override the element's
            properties.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration element, otherwise
            <see langword="false"/>.</returns>
            <remarks>
            This method assumes a specific layout for the policy values: there is a registry key representing the collection
            of elements, and a sub key with the policy values for each element. An element's sub key may also contains a value
            stating whether the policy for an element is disabled; in that case the element is removed from the collection.
            Such a layout for the policy values can be constructed manually, or method 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddElementsPolicies``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String,System.String)"/> can be invoked during the construction
            of the ADM template to generate it.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.OverrideWithGroupPoliciesForElementCollection``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},System.String,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the properties for the configuration elements in the given collection.
            </summary>
            <typeparam name="T">The base type for the configuration elements collection.</typeparam>
            <param name="elements">The collection of configuration elements.</param>
            <param name="keyName">The name of the sub key where the policy values for the elements in the collection
            reside.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <remarks>
            This method assumes a specific layout for the policy values: there is a registry key representing the collection
            of elements, and a sub key with the policy values for each element. An element's sub key may also contains a value
            stating whether the policy for an element is disabled; in that case the element is removed from the collection.
            Such a layout for the policy values can be constructed manually, or method 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddElementsPolicies``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String,System.String)"/> can be invoked during the construction
            of the ADM template to generate it.
            </remarks>
            <devdoc>
            FxCop message CA1004 is supressed because it seems like the rule does not detect the
            existing 'elements' method parameter that uses the generic parameter T.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.ReleaseRegistryKeys(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey[])">
            <summary>
            Utility method that closes registry keys.
            </summary>
            <param name="keys">The registry keys to close.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.Providers">
            <summary>
            Gets the mapping from configuration element type to
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
            </summary>
            <value>
            The mapping from configuration element type to
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.#ctor(System.Collections.Generic.IDictionary{System.Type,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1"/> class with a 
            given set of manageability providers for the elements in the section's collections.
            </summary>
            <param name="subProviders">The mapping from configuration element type to
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationSection,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information represented by a configuration section.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration section instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="applicationName">The key path for which the generated instructions' keys must be sub keys of.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information represented by a configuration section.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationSection">The configuration section instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="sectionKey">The root key for the section's policies.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.OverrideWithGroupPolicies(System.Configuration.ConfigurationSection,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s and its internal configuration elements' properties 
            with the Group Policy values from the registry, if any.
            </summary>
            <param name="configurationObject">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration section, otherwise
            <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">when the type of <paramref name="configurationObject"/> is not 
            the type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.OverrideWithGroupPoliciesForConfigurationSection(`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s properties with the Group Policy values from 
            the registry.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="policyKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationSection"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.OverrideWithGroupPoliciesForConfigurationElements(`0,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s configuration elements' properties 
            with the Group Policy values from the registry, if any.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <remarks>Errors detected while processing policy overrides for the configuration elements in the section 
            must be logged but processing for other objects must not be interrupted.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.SectionCategoryName">
            <summary>
            Gets the name of the category that represents the whole configuration section.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderBase`1.SectionName">
            <summary>
            Gets the name of the managed configuration section.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.BackingStoresKeyName">
            <summary>
            The name of the backing stores property.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.CacheManagerExpirationPollFrequencyInSecondsPropertyName">
            <summary>
            The name of the expiration poll frequency property.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.CacheManagerMaximumElementsInCacheBeforeScavengingPropertyName">
            <summary>
            The name of the maximum number of items in cache before scavenging property.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.CacheManagerNumberToRemoveWhenScavengingPropertyName">
            <summary>
            The name of the number of items to remove when scavenging property.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.CacheManagersKeyName">
            <summary>
            The name of the cache managers property.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.DefaultCacheManagerPropertyName">
            <summary>
            The name of the default cache manager property.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.EncryptionProvidersKeyName">
            <summary>
            The name of the encryption providers property.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.#ctor(System.Collections.Generic.IDictionary{System.Type,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider})">
            <summary>
            <para>This method supports the Enterprise Library Manageability Extensions infrastructure and is not intended to 
            be used directly from your code.
            </para>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider"/> class with a 
            given set of manageability providers to use when dealing with the configuration for cache storage and encryption providers.
            </summary>
            <param name="subProviders">The mapping from configuration element type to
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            <para>This method supports the Enterprise Library Manageability Extensions infrastructure and is not intended to 
            be used directly from your code.</para>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information for the Caching Application Block.
            </summary>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationSection,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.AddAdministrativeTemplateDirectivesForCacheManagers(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <devdoc>
            ADM templates for caching are different from the other blocks' templates to match the configuration console's 
            user experience. Instead of having separate categories with policies for cache managers, backing stores and 
            encryption providers, the policy for a cache manager includes the parts for its backing store and eventual
            encryption provider.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.OverrideWithGroupPoliciesForConfigurationElements(Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s configuration elements' properties 
            with the Group Policy values from the registry, if any.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.OverrideWithGroupPoliciesForConfigurationSection(Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s properties with the Group Policy values from 
            the registry.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="policyKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.SectionCategoryName">
            <summary>
            Gets the name of the category that represents the whole configuration section.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheManagerSettingsManageabilityProvider.SectionName">
            <summary>
            Gets the name of the managed configuration section.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheStorageDataManageabilityProvider">
            <summary>
            Provides a default implementation for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1">
            <summary>
            Provides a default implementation for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
            <typeparam name="T">The managed configuration element type. Must inherit from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.
            </typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider">
            <summary>
            Represents the behavior required to provide Group Policy updates for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.
            </summary>
            <remarks>
            Subclasses define the implementation necessary to provide manageability for a specific type of configuration
            element.
            Element providers are usually necessary when dealing with collections of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/>,
            as the concrete type of the elements in the collections is only known at runtime, and it is possible that 
            the elements are defined in 'extension' assemblies.
            Element providers are registered with the configuration element types they provide manageability to using 
            the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute"/> attribute, which is bound to assemblies.
            Element providers are also responsible for generating the ADM instructions that describe the policies that can be
            used to override the values in the configuration elements. Usually the ADM instructions generated by element providers
            consist of a single policy with parts that map to the specific configuration element instance of the type the provider 
            manages. This is not mandatory, however, and the ADM instructions generated by element providers must be consistent 
            with the ADM structure determined by the section provider that interacts with them.
            ADM instructions must be generated for each element instance in a given context, using the elements' names to build
            each instruction key.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute"/>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.PolicyValueName">
            <summary>
            The name of the value used to hold policy enablement status.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationElement,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="parentKey">The key path for which the generated instructions' keys must be subKeys of.</param>
            <remarks>
            ADM instructions are generated on a per-instance basis.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.OverrideWithGroupPolicies(System.Configuration.ConfigurationElement,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry, if any.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration element, otherwise
            <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">when the type of <paramref name="configurationObject"/> is not 
            the type.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.LogExceptionWhileOverriding(System.Exception)">
            <summary>
            Logs an error detected while overriding a configuration object with policy values.
            </summary>
            <param name="exception">The exception representing the error.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.#ctor">
            <summary>
            
            </summary>
            <remarks>Default to ReadOnly</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.Configuration.ConfigurationElement,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="parentKey">The key path for which the generated instructions' keys must be subKeys of.</param>
            <remarks>
            Class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1"/> provides a default implementation for this method that
            calls the strongly-typed 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            method.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            The default implementation for this method creates a policy, using 
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate"/> to create the policy name and invoking
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to add the policy parts.
            Subclasses managing objects that must not create a policy must override this method to just add the parts.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddCheckboxPartsForFlagsEnumeration``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,System.String,``0)">
            <summary>
            Adds a new drop down list part to the current policy with items representing an enumeration's values.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="contentBuilder">The content builder.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="defaultValue">The default value for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.OverrideWithGroupPolicies(System.Configuration.ConfigurationElement,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry, if any.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <returns><see langword="true"/> if the policy settings do not disable the configuration element, otherwise
            <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">when the type of <paramref name="configurationObject"/> is not 
            the type <typeparamref name="T"/>.</exception>
            <remarks>
            Provides a default implementation that performs appropriate logging of errors when processing
            policy overrides.
            </remarks>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider.OverrideWithGroupPolicies(System.Configuration.ConfigurationElement,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">ConfigurationElementManageabilityProvider.OverrideWithGroupPolicies</seealso>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.OverrideWithGroupPolicies(`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.GetFlagsEnumOverride``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="policyKey"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheStorageDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheStorageDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheStorageDataManageabilityProvider.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            The default implementation for this method creates a policy, using 
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate"/> to create the policy name and invoking
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to add the policy parts.
            Subclasses managing objects that must not create a policy must override this method to just add the parts.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheStorageDataManageabilityProvider.AddElementAdministrativeTemplateParts(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheStorageDataManageabilityProvider.OverrideWithGroupPolicies(Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheStorageData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CacheStorageDataManageabilityProvider.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheManagerDataManageabilityProvider">
            <summary>
            Provides a default implementation for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheManagerData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1">
            <summary>
            Base class for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> implementations that provide manageability
            support for custom provider's configuration.
            </summary>
            <typeparam name="T">The custon provider's configuration element type.</typeparam>
            <remarks>
            The basic configuration for a custom provider includes the provider type and a collection of attributes.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.AttributesPropertyName">
            <summary>
            Name for the value holding the policy overrides for the custom provider's attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.ProviderTypePropertyName">
            <summary>
            Name for the value holding the policy overrides for the custom provider's type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1"/> class with a 
            policy name template.
            </summary>
            <param name="policyTemplate">The template to use when generating the policy associated to a custom provider
            configuration instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.AddElementAdministrativeTemplateParts(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses that manage custom provider's configuration objects with additional properties may
            override this method to add the corresponding parts.
            </remarks>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.GenerateAttributesString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a string with the encoded key/value pairs that represent the <paramref name="attributes"/> collection.
            </summary>
            <param name="attributes">The collection of attributes.</param>
            <returns>The encoded representation of the attributes collection.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.OverrideWithGroupPolicies(`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses that manage custom provider's configuration objects with additional properties may
            override this method to override these properties.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.CustomProviderDataManageabilityProvider`1.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheManagerDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheManagerDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheStorageDataManageabilityProvider">
            <summary>
            Provides a default implementation for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheStorageDataManageabilityProvider.AttributesPropertyName">
            <summary>
            The name of the attributes property.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheStorageDataManageabilityProvider.ProviderTypePropertyName">
            <summary>
            The name of the provider type property.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheStorageDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheStorageDataManageabilityProvider"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheStorageDataManageabilityProvider.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            The default implementation for this method creates a policy, using 
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate"/> to create the policy name and invoking
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to add the policy parts.
            Subclasses managing objects that must not create a policy must override this method to just add the parts.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.CustomCacheStorageDataManageabilityProvider.AddElementAdministrativeTemplateParts(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CustomCacheStorageData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses that manage custom provider's configuration objects with additional properties may
            override this method to add the corresponding parts.
            </remarks>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider">
            <summary>
            Provides a default implementation for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData"/> that
            processes policy overrides, performing appropriate logging of 
            policy processing errors.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider.PartitionNamePropertyName">
            <summary>
            The name of the partition name property.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider"/> clas.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            The default implementation for this method creates a policy, using 
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.ElementPolicyNameTemplate"/> to create the policy name and invoking
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddElementAdministrativeTemplateParts(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to add the policy parts.
            Subclasses managing objects that must not create a policy must override this method to just add the parts.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider.AddElementAdministrativeTemplateParts(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM parts that represent the properties of
            a specific instance of the configuration element type managed by the receiver.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationObject">The configuration object instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="elementPolicyKeyName">The key for the element's policies.</param>
            <remarks>
            Subclasses managing objects that must not create a policy will likely need to include the elements' keys when creating the parts.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider.OverrideWithGroupPolicies(Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.IsolatedStorageCacheStorageData,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationObject"/>'s properties with the Group Policy values from the 
            registry.
            </summary>
            <param name="configurationObject">The configuration object for instances that must be managed.</param>
            <param name="policyKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration element.</param>
            <remarks>Subclasses implementing this method must retrieve all the override values from the registry
            before making modifications to the <paramref name="configurationObject"/> so any error retrieving
            the override values will cancel policy processing.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.IsolatedStorageCacheStorageDataManageabilityProvider.ElementPolicyNameTemplate">
            <summary>
            Gets the template for the name of the policy associated to the object.
            </summary>
            <remarks>
            Elements that override 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderBase`1.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,`0,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)"/>
            to avoid creating a policy must still override this property.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.BackingStoreSettingsPartName">
            <summary>
              查找类似 Backing store settings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CacheManagerExpirationPollFrequencyInSecondsPartName">
            <summary>
              查找类似 Expiration poll frequency (secs.) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CacheManagerMaximumElementsInCacheBeforeScavengingPartName">
            <summary>
              查找类似 Maximum elements in cache before scavenging 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CacheManagerNumberToRemoveWhenScavengingPartName">
            <summary>
              查找类似 Number to remove when scavenging 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CacheManagerPolicyNameTemplate">
            <summary>
              查找类似 Specify settings for cache manager &apos;{0}&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CacheManagersCategoryName">
            <summary>
              查找类似 Cache managers 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CacheManagerSettingsDefaultCacheManagerPartName">
            <summary>
              查找类似 Default cache manager 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CacheManagerSettingsPolicyName">
            <summary>
              查找类似 Specify settings for Caching Application Block 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CachingSectionCategoryName">
            <summary>
              查找类似 Caching 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CustomProviderAttributesPartName">
            <summary>
              查找类似 Attributes 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.CustomProviderTypePartName">
            <summary>
              查找类似 Type 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.IsolatedStorageCacheStorageDataPartitionNamePartName">
            <summary>
              查找类似 Partition name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.NullBackingStoreNoSettingsPartName">
            <summary>
              查找类似 In memory store - no settings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Manageability.Properties.Resources.StorageEncryptionProviderSettingsPartName">
            <summary>
              查找类似 Encryption provider settings 的本地化字符串。
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData">
            <summary>
            Base class for configuration data defined for all types of StorageEncryptionProviders
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData.#ctor(System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData"/> class with a name and the type of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.
            </summary>
            <param name="type">
            The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData.#ctor(System.String,System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData"/> class with a name and the type of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.
            </summary>
            <param name="name">
            The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.
            </param>
            <param name="type">
            The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/>.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData.GetRegistrations">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData.GetCreationExpression">
            <summary>
            Gets the creation expression used to produce a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> during
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.StorageEncryptionProviderData.GetRegistrations"/>.
            </summary>
            <remarks>
            This must be overridden by a subclass, but is not marked as abstract due to configuration serialization needs.
            </remarks>
            <returns>A Expression that creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.IStorageEncryptionProvider"/></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.Unity.CachingBlockExtension">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.UnityContainerExtension"/> that registers the policies necessary
            to create <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheManager"/> instances described in the standard
            configuration file.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryBlockExtension">
            <summary>
            Base class for Enterprise Library Blocks' container extensions.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.UnityContainerExtension">
            <summary>
            Base class for all <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> extension objects.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.IUnityContainerExtensionConfigurator">
            <summary>
            Base interface for all extension configuration interfaces.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.IUnityContainerExtensionConfigurator.Container">
            <summary>
            Retrieve the container instance that we are currently configuring.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtension.InitializeExtension(Microsoft.Practices.Unity.ExtensionContext)">
            <summary>
            The container calls this method when the extension is added.
            </summary>
            <param name="context">A <see cref="T:Microsoft.Practices.Unity.ExtensionContext"/> instance that gives the
            extension access to the internals of the container.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtension.Initialize">
            <summary>
            Initial the container with this extension's functionality.
            </summary>
            <remarks>
            When overridden in a derived class, this method will modify the given
            <see cref="T:Microsoft.Practices.Unity.ExtensionContext"/> by adding strategies, policies, etc. to
            install it's functions into the container.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtension.Remove">
            <summary>
            Removes the extension's functions from the container.
            </summary>
            <remarks>
            <para>
            This method is called when extensions are being removed from the container. It can be
            used to do things like disconnect event handlers or clean up member state. You do not
            need to remove strategies or policies here; the container will do that automatically.
            </para>
            <para>
            The default implementation of this method does nothing.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.Unity.UnityContainerExtension.Container">
            <summary>
            The container this extension has been added to.
            </summary>
            <value>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> that this extension has been added to.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.UnityContainerExtension.Context">
            <summary>
            The <see cref="T:Microsoft.Practices.Unity.ExtensionContext"/> object used to manipulate
            the inner state of the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryBlockExtension.Initialize">
            <summary>
            Ensure that this container has been configured to resolve Enterprise Library
            objects.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationPollTimer">
            <summary>
            Represents an expiration poll timer.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationPollTimer.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="expirationPollFrequencyInMilliSeconds"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationPollTimer.StartPolling(System.Threading.TimerCallback)">
            <summary>
            Start the polling process.
            </summary>
            <param name="callbackMethod">The method to callback when a cycle has completed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationPollTimer.StopPolling">
            <summary>
            Stop the polling process.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.AbsoluteTime">
            <summary>
            This class tests if a data item was expired using a absolute time 
            schema.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration">
            <summary>
            Allows end users to implement their own cache item expiration schema.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration.HasExpired">
            <summary>
            Specifies if item has expired or not.
            </summary>
            <returns>Returns true if the item has expired, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration.Notify">
            <summary>
            Called to tell the expiration that the CacheItem to which this expiration belongs has been touched by the user
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemExpiration.Initialize(Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Called to give the instance the opportunity to initialize itself from information contained in the CacheItem.
            </summary>
            <param name="owningCacheItem">CacheItem that owns this expiration object</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.AbsoluteTime.#ctor(System.DateTime)">
            <summary>
            Create an instance of the class with a time value as input and 
            convert it to UTC.
            </summary>
            <param name="absoluteTime">
            The time to be checked for expiration
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.AbsoluteTime.#ctor(System.TimeSpan)">
            <summary>
            Creates an instance based on a time interval starting from now.
            </summary>
            <param name="timeFromNow">Time interval</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.AbsoluteTime.HasExpired">
            <summary>
            Specifies if item has expired or not.
            </summary>
            <remarks>
            bool isExpired = ICacheItemExpiration.HasExpired();
            </remarks>
            <returns>
            "True", if the data item has expired or "false", if the data item 
            has not expired
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.AbsoluteTime.Notify">
            <summary>
            Called to notify this object that the CacheItem owning this expiration was just touched by a user action
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.AbsoluteTime.Initialize(Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Called to give this object an opportunity to initialize itself from data inside a CacheItem
            </summary>
            <param name="owningCacheItem">CacheItem provided to read initialization information from. Will never be null.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.AbsoluteTime.AbsoluteExpirationTime">
            <summary>
            Gets the absolute expiration time.
            </summary>
            <value>
            The absolute expiration time.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat">
             <summary>
             Represents the extended format for the cache.
             </summary>    
             <remarks>
             Extended format syntax : <br/><br/>
             
             Minute       - 0-59 <br/>
             Hour         - 0-23 <br/>
             Day of month - 1-31 <br/>
             Month        - 1-12 <br/>
             Day of week  - 0-6 (Sunday is 0) <br/>
             Wildcards    - * means run every <br/>
             Examples: <br/>
             * * * * *    - expires every minute<br/>
             5 * * * *    - expire 5th minute of every hour <br/>
             * 21 * * *   - expire every minute of the 21st hour of every day <br/>
             31 15 * * *  - expire 3:31 PM every day <br/>
             7 4 * * 6    - expire Saturday 4:07 AM <br/>
             15 21 4 7 *  - expire 9:15 PM on 4 July <br/>
            	Therefore 6 6 6 6 1 means:
            	•	have we crossed/entered the 6th minute AND
            	•	have we crossed/entered the 6th hour AND 
            	•	have we crossed/entered the 6th day AND
            	•	have we crossed/entered the 6th month AND
            	•	have we crossed/entered A MONDAY?
            
            	Therefore these cases should exhibit these behaviors:
            
            	getTime = DateTime.Parse( "02/20/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/07/2003 07:07:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	TRUE, ALL CROSSED/ENTERED
            			
            	getTime = DateTime.Parse( "02/20/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/07/2003 07:07:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 5", getTime, nowTime );
            	TRUE
            			
            	getTime = DateTime.Parse( "02/20/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 *", getTime, nowTime );
            	TRUE
            	
            			
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 5", getTime, nowTime );
            	TRUE
            						
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2005 05:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	TRUE
            						
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 05:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	FALSE:  we did not cross 6th hour, nor did we cross Monday
            						
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 5", getTime, nowTime );
            	TRUE, we cross/enter Friday
            
            
            	getTime = DateTime.Parse( "06/05/2003 04:06:55 AM" );
            	nowTime = DateTime.Parse( "06/06/2003 06:06:00 AM" );
            	isExpired = ExtendedFormatHelper.IsExtendedExpired( "6 6 6 6 1", getTime, nowTime );
            	FALSE:  we don’t cross Monday but all other conditions satisfied
             </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.Validate(System.String)">
            <summary>
            Validates the format.
            </summary>
            <param name="timeFormat">
            The format to validate.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.#ctor(System.String)">
            <summary>
            Initializes a new instnace of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat"/> class with a format.
            </summary>
            <param name="format">The extended format time.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.GetMinutes">
            <summary>
            Gets the minutes to expire.
            </summary>
            <value>
            The minutes to expire.
            </value>
            <remarks>
            This returns a copy of the integer array of minutes to expire.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.GetHours">
            <summary>
            Gets the hours to expire.
            </summary>
            <value>
            The hours to expire.
            </value>
            <remarks>
            This returns a copy of the integer array of hours to expire.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.GetDays">
            <summary>
            Gets the days to expire.
            </summary>
            <value>
            The days to expire.
            </value>
            <remarks>
            This returns a copy of the integer array of days to expire.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.GetMonths">
            <summary>
            Gets the months of the year to expire.
            </summary>
            <value>
            The months of the year to expire.
            </value>
            <remarks>
            This returns a copy of the integer array of months to expire.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.GetDaysOfWeek">
            <summary>
            Gets the days of the week to expire.
            </summary>
            <value>
            The days of the week to expire.
            </value>
            <remarks>
            This returns a copy of the integer array of the days of the week to expire.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.IsExpired(System.DateTime,System.DateTime)">
            <summary>
            Determines if the time has expired.
            </summary>
            <param name="getTime">The time to compare.</param>
            <param name="nowTime">The current time.</param>
            <returns>
            <see langword="true"/> if the time is expired; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.Format">
            <summary>
            Gets the exteneded format.
            </summary>
            <value>
            The extended format.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.ExpireEveryMinute">
            <summary>
            Determines if should expire every minute.
            </summary>
            <value>
            <see langword="true"/> if should expire every minute; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.ExpireEveryDay">
            <summary>
            Determines if item should expire every day.
            </summary>
            <value>
            <see langword="true"/> if should expire every day; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.ExpireEveryHour">
            <summary>
            Determines if should expire every hour.
            </summary>
            <value>
            <see langword="true"/> if should expire every hour; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.ExpireEveryMonth">
            <summary>
            Determines if should expire every month.
            </summary>
            <value>
            <see langword="true"/> if should expire every month; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormat.ExpireEveryDayOfWeek">
            <summary>
            Determines if should expire every day of the week.
            </summary>
            <value>
            <see langword="true"/> if should expire every day of the week; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormatTime">
            <summary>
            This provider tests if a item was expired using a extended format.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormatTime.#ctor(System.String)">
            <summary>
            Convert the input format to the extented time format.
            </summary>
            <param name="timeFormat">
            This contains the expiration information
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormatTime.HasExpired">
            <summary>
            Specifies if item has expired or not.
            </summary>
            <returns>
            Returns true if the data is expired otherwise false
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormatTime.Notify">
            <summary>
            Notifies that the item was recently used.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormatTime.Initialize(Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Not used
            </summary>
            <param name="owningCacheItem">Not used</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.ExtendedFormatTime.TimeFormat">
            <summary>
            Gets the extended time format.
            </summary>
            <value>
            The extended time format.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.FileDependency">
            <summary>
            This class tracks a file cache dependency.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.FileDependency.#ctor(System.String)">
            <summary>
            Constructor with one argument.
            </summary>
            <param name="fullFileName">
            Indicates the name of the file
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.FileDependency.HasExpired">
            <summary>
            Specifies if the item has expired or not.
            </summary>
            <returns>Returns true if the item has expired, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.FileDependency.Notify">
            <summary>
            Notifies that the item was recently used.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.FileDependency.Initialize(Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Not used
            </summary>
            <param name="owningCacheItem">Not used</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.FileDependency.FileName">
            <summary>
            Gets the name of the dependent file.
            </summary>
            <value>
            The name of the dependent file.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.FileDependency.LastModifiedTime">
            <summary>
            Gets the last modifed time of the file.
            </summary>
            <value>
            The last modifed time of the file
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.NeverExpired">
            <summary>
            This class reflects an expiration policy of never being expired.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.NeverExpired.HasExpired">
            <summary>
            Always returns false
            </summary>
            <returns>False always</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.NeverExpired.Notify">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.NeverExpired.Initialize(Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Not used
            </summary>
            <param name="owningCacheItem">Not used</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime">
            <summary>
            This provider tests if a item was expired using a time slice schema.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.#ctor(System.TimeSpan)">
            <summary>
            Create an instance of this class with the timespan for expiration.
            </summary>
            <param name="slidingExpiration">
            Expiration time span
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.#ctor(System.TimeSpan,System.DateTime)">
            <summary>
            For internal use only.
            </summary>
            <param name="slidingExpiration"/>
            <param name="originalTimeStamp"/>
            <remarks>
            This constructor is for testing purposes only. Never, ever call it in a real program
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.HasExpired">
            <summary>
            Specifies if item has expired or not.
            </summary>
            <returns>Returns true if the item has expired otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.Notify">
            <summary>
            Notifies that the item was recently used.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.Initialize(Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem)">
            <summary>
            Used to set the initial value of TimeLastUsed. This method is invoked during the reinstantiation of
            an instance from a persistent store. 
            </summary>
            <param name="owningCacheItem">CacheItem to which this expiration belongs.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.CheckSlidingExpiration(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Check whether the sliding time has expired.
            </summary>
            <param name="nowDateTime">Current time </param>
            <param name="lastUsed">The last time when the item has been used</param>
            <param name="slidingExpiration">The span of sliding expiration</param>
            <returns>True if the item was expired, otherwise false</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.ItemSlidingExpiration">
            <summary>
            Returns sliding time window that must be exceeded for expiration to occur
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Expirations.SlidingTime.TimeLastUsed">
            <summary>
            Returns time that this object was last touched
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask">
            <summary>
            Represents a task to perform expiration on cached items.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask.#ctor(Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations,Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider)">
            <summary>
            Initialize an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask"/> class with an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations"/> object.
            </summary>
            <param name="cacheOperations">An <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations"/> object.</param>
            <param name="instrumentationProvider">An instrumentation provider.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask.DoExpirations">
            <summary>
            Perform the cacheItemExpirations.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask.MarkAsExpired(System.Collections.Hashtable)">
            <summary>
            Mark each <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> as expired. 
            </summary>
            <param name="liveCacheRepresentation">The set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> objects to expire.</param>
            <returns>
            The number of items marked.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask.SweepExpiredItemsFromCache(System.Collections.Hashtable)">
            <summary>
            Sweep and remove the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/>s.
            </summary>
            <param name="liveCacheRepresentation">
            The set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> objects to remove.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ExpirationTask.PrepareForSweep">
            <summary>
            Prepare to sweep the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction">
            <summary>
            This interface defines the contract that must be implemented to create an object that can be used to refresh 
            an expired item from the cache. The implementing class must be serializable. Care must be taken when implementing 
            this interface not to create an object that maintains too much state about its environment, as all portions of its
            environment will be serialized as well, creating possibly a huge object graph.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheItemRefreshAction.Refresh(System.String,System.Object,Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason)">
            <summary>
            Called when an item expires from the cache. This method can be used to notify an application that
            the expiration occured, cause the item to be refetched and refreshed from its original location, or 
            perform any other application-specific action. 
            </summary>
            <param name="removedKey">Key of item removed from cache. Will never be null.</param>
            <param name="expiredValue">Value from cache item that was just expired</param>
            <param name="removalReason">Reason the item was removed from the cache. See <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason"/></param>
            <remarks>This method should catch and handle any exceptions thrown during its operation. No exceptions should leak
            out of it.</remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationInstaller">
            <summary>
            Let the system know that the InstallUtil.exe tool will be run against this assembly
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationInstaller.#ctor">
            <summary>
            Represents the installer for the instrumentation events. Not intended for direct use.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationInstaller.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationInstaller.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationInstaller.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider"/> that generates
            performance counter updates in response to instrumentation activities.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener">
            <summary>
            Listens for events raised by block classes and reports them to appropriate instrumentation 
            services (EventLog, or PeformanceCounters).
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.#ctor(System.Boolean,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Base constructor for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </summary>
            <overloads>
            Base constructor for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </overloads>
            <param name="performanceCountersEnabled">True if performance counter reporting is enabled</param>
            <param name="eventLoggingEnabled">True if event logging is enabled</param>
            <param name="nameFormatter">Creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.#ctor(System.String,System.Boolean,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Base constructor for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </summary>
            <param name="instanceName">Unique name for this instance</param>
            <param name="performanceCountersEnabled">True if performance counter reporting is enabled</param>
            <param name="eventLoggingEnabled">True if event logging is enabled</param>
            <param name="nameFormatter">Creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.#ctor(System.String[],System.Boolean,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Base constructor for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener"></see>. 
            </summary>
            <param name="instanceNames">Unique names for th <see cref="T:System.Diagnostics.PerformanceCounter"></see> instances to be managed by this listener.</param>
            <param name="performanceCountersEnabled">True if performance counter reporting is enabled</param>
            <param name="eventLoggingEnabled">True if event logging is enabled</param>
            <param name="nameFormatter">Creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.GetEventSourceName">
            <summary>
            Gets the event source name as defined in the class metadata.
            </summary>
            <returns>The event source name.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.CreatePerformanceCounters(System.String[])">
            <summary>
            Initializes the performance counter instances managed by this listener.
            </summary>
            <param name="instanceNames">Instance names for performance counters.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.CreateInstanceName(System.String)">
            <summary>
            Creates a unique name for a specific performance counter instance.
            </summary>
            <param name="nameSuffix">Instance name for a specific performance counter.</param>
            <returns>The created instance name.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.EventLoggingEnabled">
            <summary>
            Gets and sets the EventLoggingEnabled property
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListener.PerformanceCountersEnabled">
            <summary>
            Gets and sets the PerformanceCountersEnabled property
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider">
            <summary>
            This interface defines the instrumentation events that can be raised from a
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider.FireCacheUpdated(System.Int64,System.Int64)">
            <summary>
            Fires the CacheUpdated event - reported when items added or
            removed from the cache.
            </summary>
            <param name="updatedEntriesCount">The number of entries updated.</param>
            <param name="totalEntriesCount">The total number of entries in cache.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider.FireCacheAccessed(System.String,System.Boolean)">
            <summary>
            Fires the CacheAccessed event - reported when an item is retrieved from the
            cache, or if an item was requested but not found.
            </summary>
            <param name="key">The key which was used to access the cache.</param>
            <param name="hit"><code>true</code> if accessing the cache was successful</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider.FireCacheExpired(System.Int64)">
            <summary>
            Fires the CacheExpired event - reported when items are expired from the cache.
            </summary>
            <param name="itemsExpired">The number of items that are expired.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider.FireCacheScavenged(System.Int64)">
            <summary>
            Fires the CacheScavenged event - reported when the cache is scavenged.
            </summary>
            <param name="itemsScavenged">The number of items scavenged from cache.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider.FireCacheCallbackFailed(System.String,System.Exception)">
            <summary>
            Fires the CacheCallbackFailed event - reported when an exception occurs during
            a cache callback.
            </summary>
            <param name="key">The key that was used accessing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> when this failure occurred.</param>
            <param name="exception">The exception causing the failure.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider.FireCacheFailed(System.String,System.Exception)">
            <summary>
            Fires the CacheFailed event - reported when an exception is thrown during a cache operation.
            </summary>
            <param name="errorMessage">The message that describes the failure.</param>
            <param name="exception">The message that represents the exception causing the failure.</param>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.CounterCategoryName">
            <summary>
            The name of the caching counters.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.EventLogSourceName">
            <summary>
            The name of the event log source.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.TotalCacheExpiriesCounterName">
            <summary>
            The total cache expires counter name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.TotalCacheHitsCounterName">
            <summary>
            The total cache hits counter name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.TotalCacheMissesCounterName">
            <summary>
            The total cache misses counter name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.TotalCacheScavengedItemsCounterName">
            <summary>
            The total cache scavenged items counter name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.TotalUpdatedEntriesItemsCounterName">
            <summary>
            The total updated entries counter name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider"/> class.
            </summary>
            <param name="instanceName">The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> instance this instrumentation listener is created for.</param>
            <param name="performanceCountersEnabled"><b>true</b> if performance counters should be updated.</param>
            <param name="eventLoggingEnabled"><b>true</b> if event log entries should be written.</param>
            <param name="applicationInstanceName">The application instance name.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.#ctor(System.String,System.Boolean,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider"/> class.
            </summary>
            <param name="instanceName">The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> instance this instrumentation listener is created for.</param>
            <param name="performanceCountersEnabled"><b>true</b> if performance counters should be updated.</param>
            <param name="eventLoggingEnabled"><b>true</b> if event log entries should be written.</param>
            <param name="nameFormatter">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter"/> that is used to creates unique name for each <see cref="T:System.Diagnostics.PerformanceCounter"/> instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.FireCacheUpdated(System.Int64,System.Int64)">
            <summary>
            Fires the CacheUpdated event - reported when items added or
            removed from the cache.
            </summary>
            <param name="updatedEntriesCount">The number of entries updated.</param>
            <param name="totalEntriesCount">The total number of entries in cache.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.FireCacheAccessed(System.String,System.Boolean)">
            <summary>
            Fires the CacheAccessed event - reported when an item is retrieved from the
            cache, or if an item was requested but not found.
            </summary>
            <param name="key">The key which was used to access the cache.</param>
            <param name="hit"><code>true</code> if accessing the cache was successful</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.FireCacheExpired(System.Int64)">
            <summary>
            Fires the CacheExpired event - reported when items are expired from the cache.
            </summary>
            <param name="itemsExpired">The number of items that are expired.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.FireCacheScavenged(System.Int64)">
            <summary>
            Fires the CacheScavenged event - reported when the cache is scavenged.
            </summary>
            <param name="itemsScavenged">The number of items scavenged from cache.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.FireCacheCallbackFailed(System.String,System.Exception)">
            <summary>
            Fires the CacheCallbackFailed event - reported when an exception occurs during
            a cache callback.
            </summary>
            <param name="key">The key that was used accessing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> when this failure occurred.</param>
            <param name="exception">The exception causing the failure.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.FireCacheFailed(System.String,System.Exception)">
            <summary>
            Fires the CacheFailed event - reported when an exception is thrown during a cache operation.
            </summary>
            <param name="errorMessage">The message that describes the failure.</param>
            <param name="exception">The message that represents the exception causing the failure.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.CachingInstrumentationProvider.CreatePerformanceCounters(System.String[])">
            <summary>
            Creates the performance counters to instrument the caching events for the specified instance names.
            </summary>
            <param name="instanceNames">The instance names for the performance counters.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.DefaultCachingEventLogger">
            <summary>
            The instrumentation gateway when no instances of the objects from the block are involved.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.DefaultCachingEventLogger.EventLogSourceName">
            <summary>
            The event log source name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.DefaultCachingEventLogger.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.DefaultCachingEventLogger"/> class, specifying whether 
            logging to the event log is allowed.
            </summary>
            <param name="eventLoggingEnabled"><b>true</b> if writing to the event log is allowed, <b>false</b> otherwise.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.DefaultCachingEventLogger.LogConfigurationError(System.String,System.Exception)">
            <summary>
            Logs the occurrence of a configuration error for the Enterprise Library Caching Application Block through the 
            available instrumentation mechanisms.
            </summary>
            <param name="instanceName">Name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> instance in which the configuration error was detected.</param>
            <param name="exception">The exception raised for the configuration error.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.PriorityDateComparer">
            <summary>
            Sorts the cache items in data for scavenging
            </summary>>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.PriorityDateComparer.#ctor(System.Collections.Hashtable)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.PriorityDateComparer"/> class with a list of unsorted cache items.
            </summary>
            <param name="unsortedItems">
            A set of unsorted cache items.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.PriorityDateComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> objects and returns a value indicating whether one is less than, equal to or greater than the other in priority by date.
            </summary>
            <param name="x">
            First <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> to compare.
            </param>
            <param name="y">
            Second <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem"/> to compare.
            </param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Condition</description>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description><paramref name="x"/> is less than <paramref name="y"/></description>
            </item>
            <item>
            <term>Zero</term>
            <description><paramref name="x"/> equals <paramref name="y"/></description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description><paramref name="x"/> is greater than <paramref name="y"/></description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.RefreshActionInvoker">
            <summary>
            Purpose of this class is to encapsulate the behavior of how ICacheItemRefreshActions
            are invoked in the background.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.RefreshActionInvoker.InvokeRefreshAction(Microsoft.Practices.EnterpriseLibrary.Caching.CacheItem,Microsoft.Practices.EnterpriseLibrary.Caching.CacheItemRemovedReason,Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider)">
            <summary>
            Invokes the refresh action on a thread pool thread
            </summary>
            <param name="removedCacheItem">Cache item being removed. Must never be null.</param>
            <param name="removalReason">The reason the item was removed.</param>	
            <param name="instrumentationProvider">The instrumentation provider.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.BackgroundSchedulerProducerConsumerQueueFailure">
            <summary>
              查找类似 Internal ProducerConsumerQueue thread failed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.BlockName">
            <summary>
              查找类似 Enterprise Library Caching Application Block 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheAccessAttemptsCounterHelpResource">
            <summary>
              查找类似 Total # of Cache Access Attempts is the number of reads from the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheAccessedExpiredItemsRatioBaseCounterHelpResource">
            <summary>
              查找类似 Cache Accessed Expired Items Ratio Base is the total number of items expired from the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheAccessedExpiredItemsRatioCounterHelpResource">
            <summary>
              查找类似 Cache Accessed Expired Items Ratio is the ratio between expired items accessed by the user and total items expired from the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheAccessedScavengedItemsRatioBaseCounterHelpResource">
            <summary>
              查找类似 Cache Accessed Scavenged Items Ratio Base is the total number of items scavenged from the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheAccessedScavengedItemsRatioCounterHelpResource">
            <summary>
              查找类似 Cache Accessed Scavenged Items Ratio is the ratio between scavenged items accessed by the user and total items scavenged from the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheExpiriesPerSecCounterHelpResource">
            <summary>
              查找类似 Cache Expiries/sec is the rate at which items were expired from the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheHitRatioCounterHelpResource">
            <summary>
              查找类似 Cache Hit Ratio is the ratio between hits and reads from the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheHitsPerSecCounterHelpResource">
            <summary>
              查找类似 Cache Hits/sec is the rate at which requests for existing items were received by the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheMissesPerSecCounterHelpResource">
            <summary>
              查找类似 Cache Misses/sec is the rate at which requests for non existing items were received by the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheNotInitializedException">
            <summary>
              查找类似 Add called without setting BackgroundScheduler. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheScavengedItemsPerSecCounterHelpResource">
            <summary>
              查找类似 Cache Scavenged Items/sec is the rate at which items were scavenged from the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheTotalEntriesCounterHelpResource">
            <summary>
              查找类似 Total Cache Entries is the total number of entries in the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.CacheUpdatedEntriesPerSecHelpResource">
            <summary>
              查找类似 Updated Entries/sec is the rate at which items were updated in the cache. An update can be either an &quot;add&quot; or a &quot;remove&quot;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.EmptyParameterName">
            <summary>
              查找类似 Parameter name cannot be null or an empty string. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ErrorCacheCallbackFailedMessage">
            <summary>
              查找类似 The error occurred executing the removal callback for key &quot;{1}&quot; in the the &quot;{0}&quot; instance. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ErrorCacheConfigurationFailedMessage">
            <summary>
              查找类似 The error occurred retrieving the configuration for instance &quot;{0}&quot;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ErrorCacheOperationFailedMessage">
            <summary>
              查找类似 The error occurred using the &quot;{0}&quot; instance. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionBackingStoresWithNonDefaultConstructorsShouldOverrideGetRegistrations">
            <summary>
              查找类似 Backing Stores with non-default constructors should override GetRegistrations(). 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionInvalidExtendedFormatArguments">
            <summary>
              查找类似 The format length is invalid. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionInvalidFileName">
            <summary>
              查找类似 The file does not exist. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionMethodMustBeImplementedBySubclasses">
            <summary>
              查找类似 Must be implemented by subclasses. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionNullFileName">
            <summary>
              查找类似 The file name cannot be null. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionNullTimeFormat">
            <summary>
              查找类似 Time format cannot be null. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionParameterMustImplement">
            <summary>
              查找类似 Parameter must implement type &apos;{0}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionRangeAbsoluteTime">
            <summary>
              查找类似 Absolute time cannot be less than current time. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionRangeDay">
            <summary>
              查找类似 Day of Week in Extended Format out of range. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionRangeHour">
            <summary>
              查找类似 Hour in Extended Format out of range. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionRangeMinute">
            <summary>
              查找类似 Minutes in Extended Format out of range. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionRangeMonth">
            <summary>
              查找类似 Month of Year in Extended Format out of range. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionRangeSlidingExpiration">
            <summary>
              查找类似 Sliding time should be greater than or equal to 1s. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionStorageAreaNullOrEmpty">
            <summary>
              查找类似 The storage are name for the Isolated Storage Backing Store can not be null or an empty string. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionTypeForCustomBackingStoreMustDeriveFrom">
            <summary>
              查找类似 The Custom Backing Store &apos;{0}&apos; with Type &apos;{1}&apos; must derive from IBackingStore. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.ExceptionTypeForCustomCacheManagerMustDeriveFrom">
            <summary>
              查找类似 The Custom Cache Manager &apos;{0}&apos; with Type &apos;{1}&apos; must derive from ICacheManager. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.FailureToRemoveCacheItemInBackground">
            <summary>
              查找类似 Failure while removing item from cache in background. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.FailureToSpawnUserSpecifiedRefreshAction">
            <summary>
              查找类似 Failure while starting application-specified refresh action. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.InvalidExpirationPollFrequencyInMilliSeconds">
            <summary>
              查找类似 Expiration poll frequency time must be at least 1 millisecond. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.InvalidPollingStopOperation">
            <summary>
              查找类似 Cannot stop polling before it is started. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.TotalCacheExpiriesCounterHelpResource">
            <summary>
              查找类似 Total Cache Expiries is the total number of items expired from the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.TotalCacheHitsCounterHelpResource">
            <summary>
              查找类似 Total Cache Hits is the total number of requests for existing items received by the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.TotalCacheMissesCounterHelpResource">
            <summary>
              查找类似 Total Cache Misses is the total number for non existing items received by the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.TotalCacheScavengedItemsCounterHelpResource">
            <summary>
              查找类似 Total Cache Scavenged Items is the total number of items scavenged from the cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Caching.Properties.Resources.TotalCacheUpdatedEntriesHelpResource">
            <summary>
              查找类似 Total Updated Entries is the total number of items updated in the cache. An update can be either an &quot;add&quot; or a &quot;remove&quot;. 的本地化字符串。
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask">
            <summary>
            Represents the task to start scavenging items in a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask.#ctor(System.Int32,System.Int32,Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations,Microsoft.Practices.EnterpriseLibrary.Caching.Instrumentation.ICachingInstrumentationProvider)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask"/> with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager"/> name, the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.CacheCapacityScavengingPolicy"/> and the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations"/>.
            </summary>
            <param name="numberToRemoveWhenScavenging">The number of items that should be removed from the cache when scavenging.</param>
            <param name="maximumElementsInCacheBeforeScavenging"></param>
            <param name="cacheOperations">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Caching.ICacheOperations"/> to perform.</param>
            <param name="instrumentationProvider">An instrumentation provider.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.ScavengerTask.DoScavenging">
            <summary>
            Performs the scavenging.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Caching.SerializationUtility">
            <summary>
            Utility class for serializing and deserializing objects to and from byte streams
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.SerializationUtility.ToBytes(System.Object)">
            <summary>
            Converts an object into an array of bytes. Object must be serializable.
            </summary>
            <param name="value">Object to serialize. May be null.</param>
            <returns>Serialized object, or null if input was null.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Caching.SerializationUtility.ToObject(System.Byte[])">
            <summary>
            Converts a byte array into an object. 
            </summary>
            <param name="serializedObject">Object to deserialize. May be null.</param>
            <returns>Deserialized object, or null if input was null.</returns>
        </member>
        <member name="T:Microsoft.Practices.ServiceLocation.ActivationException">
            <summary>
            The standard exception thrown when a ServiceLocator has an error in resolving an object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ActivationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ActivationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
             </param>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ActivationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception. 
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. 
            </param>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. 
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null. 
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). 
            </exception>
        </member>
        <member name="T:Microsoft.Practices.ServiceLocation.IServiceLocator">
            <summary>
            The generic Service Locator interface. This interface is used
            to retrieve services (instances identified by type and optional
            name) from a container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)">
            <summary>
            Get an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type,System.String)">
            <summary>
            Get an instance of the given named <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <param name="key">Name the object was registered with.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetAllInstances(System.Type)">
            <summary>
            Get all instances of the given <paramref name="serviceType"/> currently
            registered in the container.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance``1">
            <summary>
            Get an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance``1(System.String)">
            <summary>
            Get an instance of the given named <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="key">Name the object was registered with.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetAllInstances``1">
            <summary>
            Get all instances of the given <typeparamref name="TService"/> currently
            registered in the container.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <typeparamref name="TService"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.ServiceLocation.ServiceLocator">
            <summary>
            This class provides the ambient container for this application. If your
            framework defines such an ambient container, use ServiceLocator.Current
            to get it.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocator.SetLocatorProvider(Microsoft.Practices.ServiceLocation.ServiceLocatorProvider)">
            <summary>
            Set the delegate that is used to retrieve the current container.
            </summary>
            <param name="newProvider">Delegate that, when called, will return
            the current ambient container.</param>
        </member>
        <member name="P:Microsoft.Practices.ServiceLocation.ServiceLocator.Current">
            <summary>
            The current ambient container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase">
            <summary>
            This class is a helper that provides a default implementation
            for most of the methods of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetService(System.Type)">
            <summary>
            Implementation of <see cref="M:System.IServiceProvider.GetService(System.Type)"/>.
            </summary>
            <param name="serviceType">The requested service.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is an error in resolving the service instance.</exception>
            <returns>The requested object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(System.Type)">
            <summary>
            Get an instance of the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(System.Type,System.String)">
            <summary>
            Get an instance of the given named <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <param name="key">Name the object was registered with.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is an error resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetAllInstances(System.Type)">
            <summary>
            Get all instances of the given <paramref name="serviceType"/> currently
            registered in the container.
            </summary>
            <param name="serviceType">Type of object requested.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance``1">
            <summary>
            Get an instance of the given <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance``1(System.String)">
            <summary>
            Get an instance of the given named <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="key">Name the object was registered with.</param>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetAllInstances``1">
            <summary>
            Get all instances of the given <typeparamref name="TService"/> currently
            registered in the container.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">if there is are errors resolving
            the service instance.</exception>
            <returns>A sequence of instances of the requested <typeparamref name="TService"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.DoGetInstance(System.Type,System.String)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
            the requested service instance.
            </summary>
            <param name="serviceType">Type of instance requested.</param>
            <param name="key">Name of registered service you want. May be null.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.DoGetAllInstances(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>Sequence of service instance objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.FormatActivationExceptionMessage(System.Exception,System.Type,System.String)">
            <summary>
            Format the exception message for use in an <see cref="T:Microsoft.Practices.ServiceLocation.ActivationException"/>
            that occurs while resolving a single service.
            </summary>
            <param name="actualException">The actual exception thrown by the implementation.</param>
            <param name="serviceType">Type of service requested.</param>
            <param name="key">Name requested.</param>
            <returns>The formatted exception message string.</returns>
        </member>
        <member name="M:Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.FormatActivateAllExceptionMessage(System.Exception,System.Type)">
            <summary>
            Format the exception message for use in an <see cref="T:Microsoft.Practices.ServiceLocation.ActivationException"/>
            that occurs while resolving multiple service instances.
            </summary>
            <param name="actualException">The actual exception thrown by the implementation.</param>
            <param name="serviceType">Type of service requested.</param>
            <returns>The formatted exception message string.</returns>
        </member>
        <member name="T:Microsoft.Practices.ServiceLocation.ServiceLocatorProvider">
            <summary>
            This delegate type is used to provide a method that will
            return the current container. Used with the <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator"/>
            static accessor class.
            </summary>
            <returns>An <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AssemblyQualifiedTypeNameConverter">
            <summary>
            Represents a configuration converter that converts a string to <see cref="T:System.Type"/> based on a fully qualified name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AssemblyQualifiedTypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Returns the assembly qualified name for the passed in Type.
            </summary>
            <param name="context">The container representing this System.ComponentModel.TypeDescriptor.</param>
            <param name="culture">Culture info for assembly</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Type to convert to.</param>
            <returns>Assembly Qualified Name as a string</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.AssemblyQualifiedTypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Returns a type based on the assembly qualified name passed in as data.
            </summary>
            <param name="context">The container representing this System.ComponentModel.TypeDescriptor.</param>
            <param name="culture">Culture info for assembly.</param>
            <param name="value">Data to convert.</param>
            <returns>Type of the data</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames">
            <summary>
            A set of string constants listing the names of the configuration
            sections used by the standard set of Entlib blocks.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.Cryptography">
            <summary>
            Crypto block section name
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.Data">
            <summary>
            Data Access Application Block custom settings
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.ExceptionHandling">
            <summary>
            Exception Handling Application Block section name
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.Caching">
            <summary>
            Caching Application Block section name
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.Security">
            <summary>
            Security Application Block section name
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.Logging">
            <summary>
            Logging Application Block section name
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.Instrumentation">
            <summary>
            Instrumentation section name
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.PolicyInjection">
            <summary>
            Policy injection section name
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.Validation">
            <summary>
             Validation section name
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.DataRegistrationProviderLocatorType">
            <summary>
            Not actually a section name, this is the type name used to get the
            TypeRegistrationProviderLocatorStrategy used to retrieve information
            for the Data Access Application Block.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.BlockSectionNames.ValidationRegistrationProviderLocatorType">
            <summary>
            Not actually a section name, this is the type name used to get the
            TypeRegistrationProviderLocatorStrategy used to retrieve information
            for the Validation Application Block.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter">
            <summary>
            Represents a configuration converter that converts a byte array to and from a string representation by using base64 encoding.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
            <returns><see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="falase"/>. </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object.</param>
            <param name="value">An <see cref="T:System.Object"/> that represents the converted value. </param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value. </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to..</param>
            <returns><b>true</b> if the converter can convert to the specified type, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ByteArrayTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the arguments. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> object.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData">
            <summary>
            Base class for configuration information stored about a call handler.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData"/>.
            </summary>
            <param name="handlerName">Name of handler entry.</param>
            <param name="handlerType">Type of handler to create.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData.#ctor(System.String,System.Type,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData"/>.
            </summary>
            <param name="handlerName">Name of handler entry.</param>
            <param name="handlerType">Type of handler to create.</param>
            <param name="order">The order of the handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the call handler represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CallHandlerData.Order">
            <summary>
            Gets or sets the Order in which the call handler will be executed
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler">
            <summary>
            Implements compositional merge behavior to <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> implementations.<br/>
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler">
            <summary>
            Implements common behavior for classes that add extended functionality to <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> implementations.<br/>
            This class can create subordinate sources based on the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection"/> configuration and propagates change events 
            From these sources to the main source.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler"/> passing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> implementation
            That contains the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection"/> configuration.
            </summary>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> implementation that should be extended.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.CheckGetSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Checks whether a call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/> should be extended.<br/>
            If the call should be extended performs the extended behavior and returns the modified <see cref="T:System.Configuration.ConfigurationSection"/> intance.<br/>
            If the call should not be extended returns <paramref name="configurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section that was retrieved from configuration.</param>
            <param name="configurationSection">The section that was retrieved from configuration.</param>
            <returns>The resulting <see cref="T:System.Configuration.ConfigurationSection"/> instance.</returns>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.DoCheckGetSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            When overridden in a derived class, checks whether a call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/> should be extended.<br/>
            If the call should be extended performs the extended behavior and returns the modified <see cref="T:System.Configuration.ConfigurationSection"/> intance.<br/>
            If the call should not be extended returns <paramref name="configurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section that was retrieved from configuration.</param>
            <param name="configurationSection">The section that was retrieved from configuration.</param>
            <returns>The <see cref="T:System.Configuration.ConfigurationSection"/> instance passed as <paramref name="configurationSection"/>.</returns>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.CheckAddSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Checks whether a call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/> should be extended.<br/>
            If the call should be extended performs the extended behavior.
            </summary>
            <param name="sectionName">The name of the section that should be stored in configuration.</param>
            <param name="configurationSection">The section that should be stored in configuration.</param>
            <returns><see langword="true"/> if the call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/> was handled by the extension.</returns>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.DoCheckAddSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            When overridden in a derived class, checks whether a call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/> should be extended.<br/>
            If the call should be extended performs the extended behavior.
            </summary>
            <param name="sectionName">The name of the section that should be stored in configuration.</param>
            <param name="configurationSection">The section that should be stored in configuration.</param>
            <returns><see langword="false"/></returns>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.CheckRemoveSection(System.String)">
            <summary>
            Checks whether a call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/> should be extended.<br/>
            If the call should be extended performs the extended behavior.
            </summary>
            <param name="sectionName">The name of the section that should be removed from configuration.</param>
            <returns><see langword="true"/> if the call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/> was handled by the extension.</returns>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.DoCheckRemoveSection(System.String)">
            <summary>
            When overridden in a derived class, checks whether a call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/> should be extended.<br/>
            If the call should be extended performs the extended behavior.
            </summary>
            <param name="sectionName">The name of the section that should be removed from configuration.</param>
            <returns><see langword="false"/></returns>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.Initialize">
            <summary>
            Performs intialization logic for this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.Refresh">
            <summary>
            Performs re-intialization logic for this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.DoRefresh">
            <summary>
            Perform required refresh actions as needed when source changes.
            </summary>
            <returns>Sequence of changed sections</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.DoConfigurationSourceChanged(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.ConfigurationSectionChanged"/> event.
            </summary>
            <param name="affectedSections">The names of the sections that are changed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.DoConfigurationSectionChanged(System.String)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.ConfigurationSectionChanged"/> event.
            </summary>
            <param name="sectionName">The name of the section that was changed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.AddCustomSubordinateSource(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Adds a subordinate <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler"/>.
            This <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> will not be refreshed or disposed.
            </summary>
            <param name="sourceName">The name under which the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> will be added.</param>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> that will be added.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.GetSubordinateSource(System.String)">
            <summary>
            Returns a subordinate <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> with the specified name.<br/>
            Throws <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> if the source was not found.
            </summary>
            <param name="sourceName">The name of the source that should be returned.</param>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.EnsurePropagatingSectionChangeEvents(System.String,System.String)">
            <summary>
            Ensures <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.ConfigurationSourceChanged"/> events are raised for 
            Changes in a subordinate section.
            </summary>
            <param name="sourceName">The name of the subordinate configuration source that contains the section.</param>
            <param name="sectionName">The name of the section events should be propagated for.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.StopPropagatingSectionChangeEvents(System.String)">
            <summary>
            Stops raising <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.ConfigurationSourceChanged"/> events for 
            Changes in a subordinate section.
            </summary>
            <param name="sectionName">The name of the section events are propagated for.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.Dispose">
            <summary>
            Releases resources managed by this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler"/> instance.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.ConfigurationSectionChanged">
            <summary>
            Indicate that a mapped section from one of the subordinate <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>'s was changed.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler.ConfigurationSourceChanged">
            <summary>
            Indicate a subordinate <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>'s was changed.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler"/>.
            </summary>
            <param name="mainConfigurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> instance that should be extended.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler.Initialize">
            <summary>
            Performs intialization logic for this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler.DoRefresh">
            <summary>
            Performs re-intialization logic for this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler.DoCheckGetSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Checks whether the result of a call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/> should be deferred to a subordinate source.<br/>
            If the call should be deferred, returns the <see cref="T:System.Configuration.ConfigurationSection"/> intance from the approriate source.<br/>
            If the call should not be deferred returns <paramref name="configurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section that was retrieved from configuration.</param>
            <param name="configurationSection">The section that was retrieved from configuration.</param>
            <returns>The resulting <see cref="T:System.Configuration.ConfigurationSection"/> instance.</returns>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException">Thrown if a section does not exist in a registered source.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler.DoCheckAddSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Checks whether a call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/> should be deferred to a subordinate source.<br/>
            If the call should be deferred, adds the <paramref name="configurationSection"/> to the appropriate source and returns <see langword="true"/>.<br/>
            If the call should not be deferred returns <see langword="true"/>.
            </summary>
            <param name="sectionName">The name of the section that should be added to configuration.</param>
            <param name="configurationSection">The section that should be added to configuration.</param>
            <returns><see langword="true"/> if the section was added in a subordinate source, otherwise <see langword="false"/>.</returns>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CompositeConfigurationSourceHandler.DoCheckRemoveSection(System.String)">
            <summary>
            Checks whether a call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/> should be deferred to a subordinate source.<br/>
            If the call should be deferred, removes the section from the appropriate source and returns <see langword="true"/>.<br/>
            If the call should not be deferred returns <see langword="true"/>.
            </summary>
            <param name="sectionName">The name of the section that should be removed from configuration.</param>
            <returns><see langword="true"/> if the section was removed from a subordinate source, otherwise <see langword="false"/>.</returns>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler">
            <summary>
            Event handler called after a configuration has changed.
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs"/> class with the section name</para>
            </summary>
            <param name="sectionName"><para>The section name of the changes.</para></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs.SectionName">
            <summary>
            <para>Gets the section name where the changes occurred.</para>
            </summary>
            <value>
            <para>The section name where the changes occurred.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute">
            <summary>
            Indicates the configuration object type that is used for the attributed object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.#ctor(System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute"/> class with the configuration object type.
            </summary>
            <param name="configurationType">The <see cref="T:System.Type"/> of the configuration object.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute"/> class with the configuration object type.
            </summary>
            <param name="typeName">The <see cref="T:System.Type"/> name of the configuration object.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.ConfigurationType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the configuration object.
            </summary>
            <value>
            The <see cref="T:System.Type"/> of the configuration object.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationElementTypeAttribute.TypeName">
            <summary>
            Gets <see cref="T:System.Type"/> name of the configuration object.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs"/> class with the 
            configuration file and the section name.</para>
            </summary>
            <param name="configurationFile"><para>The configuration file where the change occured.</para></param>
            <param name="sectionName"><para>The section name of the changes.</para></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileChangedEventArgs.ConfigurationFile">
            <summary>
            <para>Gets the configuration file of the data that changed.</para>
            </summary>
            <value>
            <para>The configuration file of the data that changed.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher">
            <summary>
            Watcher for configuration sections in configuration files.
            </summary>
            <remarks>
            This implementation uses a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> to watch for changes 
            in the configuration files.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher">
            <summary>
            Reacts to changes on the medium on which a set of configuration sections are serialized.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.#ctor(System.String,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher"/> class.
            </summary>
            <param name="configSource">The identification of the medium.</param>
            <param name="refresh"><b>true</b> if changes should be notified, <b>false</b> otherwise.</param>
            <param name="changed">The callback for changes notification.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.StartWatching">
            <summary>
            Starts watching for changes on the serialization medium.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.StopWatching">
            <summary>
            Stops watching for changes on the serialization medium.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.ConfigSource">
            <summary>
            Gets or sets the identification of the medium where the watched set of configuration sections is stored.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.WatchedSections">
            <summary>
            Gets or sets the collection of watched sections.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceWatcher.Watcher">
            <summary>
            Gets the watcher over the serialization medium.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher.#ctor(System.String,System.String,System.Boolean,System.Int32,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher"/> class.
            </summary>
            <param name="configurationFilepath">The path for the configuration file to watch.</param>
            <param name="configSource">The identification of the configuration source.</param>
            <param name="refresh"><b>true</b> if changes should be notified, <b>false</b> otherwise.</param>
            <param name="refreshInterval">The poll interval in milliseconds.</param>
            <param name="changed">The callback for changes notification.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher.GetFullFileName(System.String,System.String)">
            <summary>
            Gets the full file name associated to the configuration source.
            </summary>
            <param name="configurationFilepath">The path for the main configuration file.</param>
            <param name="configSource">The configuration source to watch.</param>
            <returns>The path to the configuration file to watch. It will be the same as <paramref name="configurationFilepath"/>
            if <paramref name="configSource"/> is empty, or the full path for <paramref name="configSource"/> considered as a 
            file name relative to the main configuration file.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationFileSourceWatcher.Watcher">
            <summary>
            Gets the watcher over the serialization medium.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSectionCloner">
            <summary>
            Clones a <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <remarks>
            This will perform a clone of a <see cref="T:System.Configuration.ConfigurationSection"/> by evaluating each element in
            the <see cref="P:System.Configuration.ElementInformation.Properties"/>.  If these properties are themselves <see cref="T:System.Configuration.ConfigurationElement"/> they will 
            be cloned as well.
            
            As <see cref="T:System.Configuration.ConfigurationElementCollection"/> items do not expose the ability to add and remove, any configuration collections
            must implement <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/> to be cloned.  If they do not implement this, they will be skipped
            during cloning. The enterprise library collections implement this interface and the cloner will properly handle the cloning 
            of <see cref="T:System.Configuration.ConnectionStringSettingsCollection"/> and <see cref="T:System.Configuration.KeyValueConfigurationCollection"/> with an internal wrapper that 
            implements <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/> for these collections.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSectionCloner.Clone(System.Configuration.ConfigurationSection)">
            <summary>
             Clones a <see cref="T:System.Configuration.ConfigurationSection"/>
            </summary>
            <param name="section">The <see cref="T:System.Configuration.ConfigurationSection"/> to clone.</param>
            <returns>A new, cloned <see cref="T:System.Configuration.ConfigurationSection"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSectionCloner.CloneElement(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement)">
            <summary>
            
            </summary>
            <param name="sourceElement"></param>
            <param name="targetElement"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder">
            <summary>
            Entry point that is used for programatically building up a configution source.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder">
            <summary>
            Defines a configuration source builder.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder.AddSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the builder.
            </summary>
            <param name="sectionName">Name of section to add.</param>
            <param name="section">Configuration section to add.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder.Contains(System.String)">
            <summary>
            Determines if a section name is contained in the builder.
            </summary>
            <param name="sectionName"></param>
            <returns>True if contained in the builder, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder.Get(System.String)">
            <summary>
            Returns a configuration section with the given name, if present in the builder.
            </summary>
            <param name="sectionName">Name of section to return.</param>
            <returns>A valid configuration section or null.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder.Get``1(System.String)">
            <summary>
             Returns a configuration section of type <typeparamref name="T"/>, if present in the builder.
            </summary>
            <param name="sectionName">Section name to retrieve</param>
            <typeparam name="T"><see cref="T:System.Configuration.ConfigurationSection"/> type to return.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder.UpdateConfigurationWithReplace(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Updates a configuration source replacing any existing sections with those 
            built up with the builder.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder.AddSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the builder.
            </summary>
            <param name="sectionName">Name of section to add.</param>
            <param name="configurationSection">Configuration section to add.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder.Contains(System.String)">
            <summary>
            Determines if a section name is contained in the builder.
            </summary>
            <param name="sectionName"></param>
            <returns>True if contained in the builder, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder.Get(System.String)">
            <summary>
            Returns a configuration section with the given name, if present in the builder.
            </summary>
            <param name="sectionName">Name of section to return.</param>
            <returns>A valid configuration section or null.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder.Get``1(System.String)">
            <summary>
             Returns a configuration section of type <typeparamref name="T"/>, if present in the builder.
            </summary>
            <param name="sectionName">Section name to retrieve</param>
            <typeparam name="T"><see cref="T:System.Configuration.ConfigurationSection"/> type to return.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder.UpdateConfigurationWithReplace(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Updates a configuration source replacing any existing sections with those 
            built up with the builder.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder.ToString">
            <summary/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs">
            <summary>
            Event arguments describing which sections have changed in a configuration source.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs"/> class.
            </summary>
            <param name="configurationSource">Configuration source that changed.</param>
            <param name="changedSectionNames">Sequence of the section names in <paramref name="configurationSource"/>
            that have changed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.ServiceLocation.IServiceLocator,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:System.EventArgs"/> class.
            </summary>
            <param name="configurationSource">Configuration source that changed.</param>
            <param name="container"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> object that has been configured with the
            contents of <paramref name="configurationSource"/>.</param>
            <param name="changedSectionNames">Sequence of the section names in <paramref name="configurationSource"/>
            that have changed.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs.ConfigurationSource">
            <summary>
            The configuration source that has changed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs.Container">
            <summary>
            The container that has been configured with the new
            configuration.
            </summary>
            <remarks>If this event is received directly from a 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> this property will
            be null. Otherwise it will reference a valid container
            that has been configured with the contents of the updated
            configuration source.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs.ChangedSectionNames">
            <summary>
            The set of section names that have changed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement"/> class with a name and an type.
            </summary>
            <param name="name">The instance name.</param>
            <param name="type">The type for the represented <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> configured with the receiver's settings.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement.CreateDesignSource(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource)">
            <summary>
             Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource"/> configured based on this configuration element.
            </summary>
            <returns>Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource"/> or null if this source does not have design-time support.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException">
            <summary>
            Exception class for exceptions that occur when reading configuration metadata from a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> class.
            </summary>
            <param name="message">A message that describes why this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> exception was thrown.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> class.
            </summary>
            <param name="message">A message that describes why this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> exception was thrown.</param>
            <param name="innerException">The inner exception that caused this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> exception to be thrown.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException.#ctor(System.String,System.Exception,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> class.
            </summary>
            <param name="message">A message that describes why this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> exception was thrown.</param>
            <param name="innerException">The inner exception that caused this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> exception to be thrown.</param>
            <param name="filename">The path to the configuration file that caused this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> exception to be thrown.</param>
            <param name="line">The line number within the configuration file at which this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> exception was thrown.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceErrorsException"/> class.
            </summary>
            <param name="info">The object that holds the information to be serialized.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory">
            <summary>
            Contains factory methods to create configuration sources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory.Create(System.String)">
            <summary>
            Creates a new configuration sources based on the configuration information from the application's default
            configuration file.
            </summary>
            <param name="name">The name for the desired configuration source.</param>
            <returns>The new configuration source instance described in the configuration file.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when no configuration information is found for name <paramref name="name"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="name"/> is null or empty.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceFactory.Create">
            <summary>
            Creates a new configuration sources based on the default configuration information from the 
            application's default configuration file.
            </summary>
            <returns>The new configuration source instance described as the default in the configuration file,
            or a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> if the is no configuration sources configuration.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection">when there is a configuration section but it does not define
            a default configurtion source, or when the configuration for the defined default configuration source is not found.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection">
            <summary>
            Configuration section for the configuration sources.
            </summary>
            <remarks>
            This configuration must reside in the application's default configuration file.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.SectionName">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.GetConfigurationSourceSection">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection"/> from the application's default configuration file.
            </summary>
            <returns>The section from the configuration file, or <see langword="null"/> (<b>Nothing</b> in Visual Basic) if the section is not present in the configuration file.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.SelectedSource">
            <summary>
            Gets or sets the name for the default configuration source.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.ParentSource">
            <summary>
            Gets or sets the name for the parent configuration source.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.Sources">
            <summary>
            Gets the collection of defined configuration sources.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection.RedirectedSections">
            <summary>
            Gets the collection of redirected sections.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator">
            <summary>
            Base class that manages the logic for tracking configuration source changes and
            reconfiguring the container, and raising all the appropriate events.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerConfigurator">
            <summary>
            Implement this interface to create an object that can read a set
            of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects representing the current
            Enterprise Library configuration and configure a dependency injection
            container with that information.
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerConfigurator.RegisterAll(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider)">
            <summary>
            Consume the set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects and
            configure the associated container.
            </summary>
            <param name="configurationSource">Configuration source to read registrations from.</param>
            <param name="rootProvider"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that knows how to
            read the <paramref name="configurationSource"/> and return all relevant type registrations.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource">
            <summary>
            A interface describing objects that raise events when a
            container's type registrations need to updated due to
            a configuration source change.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource.ContainerReconfiguring">
            <summary>
            The event raised when a container must be reconfigured.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.Dispose">
            <summary>
            Deregister for change notification on the configuration source.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.RegisterAll(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider)">
            <summary>
            Consume the set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects and
            configure the associated container.
            </summary>
            <param name="configurationSource">Configuration source to read registrations from.</param>
            <param name="rootProvider"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that knows how to
            read the <paramref name="configurationSource"/> and return all relevant type registrations.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.RegisterAllCore(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider)">
            <summary>
            When overridden in a derived class, this method should perform the actual registration with the container.
            </summary>
            <param name="configurationSource">Configuration source to read registrations from.</param>
            <param name="rootProvider"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that knows how to
            read the <paramref name="configurationSource"/> and return all relevant type registrations.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.RegisterUpdates(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration})">
            <summary>
            When overridden in a derived class, this method should reconfigure the container
            with the provided <paramref name="updatedRegistrations"/>.
            </summary>
            <param name="updatedRegistrations">The new type registrations to apply to the container.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.GetLocator">
            <summary>
            When overridden in a derived class, this method should return an implementation
            of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that wraps the actual container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that objects can use to re-resolve
            dependencies after the container has been reconfigured.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.OnConfigurationSourceChanged(System.Object,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs)">
            <summary>
            Raise the <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.ContainerReconfiguring"/> event in response to a configuration source change.
            </summary>
            <param name="sender">Source of the event - the configuraton source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.ContainerReconfiguring">
            <summary>
            The event raised when this container must be reconfigured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ChangeTrackingContainerConfigurator.ChangeEventSource">
            <summary>
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource"/> implementation that should
            be registered with the container. This object will be used to signal interested
            objects that the container has completed reconfiguration.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerReconfiguringEventArgs">
            <summary>
            This class is the event arguments received when a container is being
            reconfigured due to a configuration source change. This class is a
            collecting argument: new type registrations should be added via the
            AddTypeRegistrations method.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerReconfiguringEventArgs.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerReconfiguringEventArgs"/> class.
            </summary>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> that changed,
            causing the need to reconfigure the container.</param>
            <param name="changedSectionNames">Sequence of changed section names in 
            <paramref name="configurationSource"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerReconfiguringEventArgs.AddTypeRegistrations(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration})">
            <summary>
            Called by event receivers to collect the set of type registrations that
            must be used to update the container.
            </summary>
            <param name="newRegistrations">The new set of type registrations.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerReconfiguringEventArgs.ConfigurationSource">
            <summary>
            The updated configuration source.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerReconfiguringEventArgs.ChangedSectionNames">
            <summary>
            The section names that have changed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigSectionLocator">
            <summary>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> implementation that looks up
            a provider by looking for the named configuration section in the given <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            If found, tries to cast the config section to <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider">
            <summary>
            This class encapsulates the logic used to find the type registration providers
            in the current application.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider.#ctor">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> instance
            without a name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider.GetRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to configure
            the container.
            </summary>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider.GetUpdatedRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider.CreateDefaultProvider">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> that will return all the
            configuration for entlib blocks.
            </summary>
            <returns>The locator.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider.CreateDefaultProvider(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> that will return all the
            configuration for entlib blocks.
            </summary>
            <param name="configurationSource">Configuration source containing any customizations
            to the locator list.</param>
            <param name="reconfiguringEventSource">Event source notifying of container reconfiguration events.</param>
            <returns>The locator.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider.Name">
            <summary>
            Every locator has a name associated with it so that it can be added and removed
            from composites. This property returns that name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigSectionLocator.#ctor(System.String)">
            <summary>
            Construct an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigSectionLocator"/> that will
            look for the given <paramref name="sectionName"/>.
            </summary>
            <param name="sectionName">Section name in configuration to look for.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigSectionLocator.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource)">
            <summary>
            Construct an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigSectionLocator"/> that
            will look for the given <paramref name="sectionName"/>. It also
            registers for the <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource.ContainerReconfiguring"/>
            event, and will request updated type registrations from the section
            at that time.
            </summary>
            <param name="sectionName">Section name in configuration to look for.</param>
            <param name="reconfiguringEventSource">Event source to signal when reconfiguration is needed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigSectionLocator.GetRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to configure
            the container.
            </summary>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigSectionLocator.GetUpdatedRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationBasedTypeRegistrationsProviderFactory">
            <summary>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> that can be configured through a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationBasedTypeRegistrationsProviderFactory.CreateProvider">
            <summary>
            Create a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that contains all the default registration
            providers, ignoring any configuration section.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that will return all registrations.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationBasedTypeRegistrationsProviderFactory.CreateProvider(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that contains all the default registration
            providers, honoring any configuration overrides of locators.
            </summary>
            <param name="configurationSource">The configuration source to use when creating <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/>s</param>
            <param name="reconfiguringEventSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource"/> responsible for raising container reconfiguration events.</param>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that will return all registrations.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationBasedTypeRegistrationsProviderFactory.CreateTypeRegistrationsProviderLocators(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource)">
            <summary>
            public for unittesting purposes.
            </summary>
            <param name="configurationSource"></param>
            <param name="reconfiguringEventSource"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource">
            <summary>
            An object that can be injected into various entlib objects
            that supplies events that indicate when the current configuration
            source has changed. This provides some isolation from the actual
            configuration source.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.GetSection``1">
            <summary>
            Used to get an object that lets you register a change handler for a
            particular configuration section.
            </summary>
            <typeparam name="TSection">Type of the configuration section to register against.</typeparam>
            <returns>The object that implements the SectionChanged event.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.OnSourceChanged(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.ServiceLocation.IServiceLocator,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Utility function to raise the <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.SourceChanged"/> event.
            </summary>
            <param name="configurationSource">Configuration source that changed.</param>
            <param name="container"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> object that has been configured with the
            contents of <paramref name="configurationSource"/>.</param>
            <param name="changedSectionNames">Sequence of the section names in <paramref name="configurationSource"/>
            that have changed.</param>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.SourceChanged">
            <summary>
            Event raised when the underlying configuration source has changed
            any section.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.ISourceChangeEventSource`1">
            <summary>
            A helper interface used as the return type of the GetSection method.
            </summary>
            <typeparam name="TSection"></typeparam>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.ISourceChangeEventSource`1.SectionChanged">
            <summary>
            The event raised when the section of type TSection is
            changed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSourceImpl">
            <summary>
            The primary implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSourceImpl.GetSection``1">
            <summary>
            Used to get an object that lets you register a change handler for a
            particular configuration section.
            </summary>
            <typeparam name="TSection">Type of the configuration section to register against.</typeparam>
            <returns>The object that implements the SectionChanged event.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSourceImpl.ConfigurationSourceChanged(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.ServiceLocation.IServiceLocator,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Used to raise the <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.SourceChanged"/> event,
            supplying the appropriate event args.
            </summary>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> that changed.</param>
            <param name="container"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> which has been configured with the
            contents of the <paramref name="configurationSource"/>.</param>
            <param name="changedSectionNames">Section names in the <paramref name="configurationSource"/>
            that have changed, as reported by the configuration source.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSourceImpl.ConfigurationSourceChanged(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.ServiceLocation.IServiceLocator,System.String[])">
            <summary>
            Used to raise the <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConfigurationChangeEventSource.SourceChanged"/> event,
            and the associated section changed events.
            </summary>
            <remarks>This overload is primarily provided for test convenience.</remarks>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> that changed.</param>
            <param name="container"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> which has been configured with the
            contents of the <paramref name="configurationSource"/>.</param>
            <param name="changedSectionNames">Section names in the <paramref name="configurationSource"/>
            that have changed, as reported by the configuration source.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue">
            <summary>
            Represents an injected parameter value that can be determined at the time of container configuration.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue">
            <summary>
            Represents a strategy to retrieve a value to inject. 
            </summary>
            <remarks>
            These strategies can either represent values known at container configuration time or 
            values that need to be resolved during object construction.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> class with a <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue.Expression"/>.
            </summary>
            <param name="expression">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue.Expression"/> representing the value to inject.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue.Expression">
            <summary>
            Gets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue.Expression"/> representing the value to inject.
            </summary>
            <remarks>
            Concrete strategies interpret the expression to provide relevant registration data.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue.Type">
            <summary>
            Gets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue.Type"/> of the value to inject.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a value parameter with the specified expression to be evaluated when providing the value parameter.
            </summary>
            <param name="expression">The expression representing the value to provide to the parameter.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue.Value">
            <summary>
            The parameter value to inject.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container">
            <summary>
            A static marker class to denote types constructed by the container when registering a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container.Resolved``1">
            <summary>
            Indicates a type to be resolved from a container.
            </summary>
            <typeparam name="T">The type to resolve from the container.</typeparam>
            <returns>The type resolved</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container.Resolved``1(System.String)">
            <summary>
            Indicates a type to be resolved by name from a container.
            </summary>
            <typeparam name="T">The type to resolve from the container.</typeparam>
            <param name="name">The name to use when resolving the type.</param>
            <returns>The type resolved.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container.ResolvedIfNotNull``1(System.String)">
            <summary>
            Indicates a type to be resolved by name from a container, if the name is not null.
            </summary>
            <typeparam name="T">The type to resolve from the container.</typeparam>
            <param name="name">The name to use when resolving the type.</param>
            <returns>The type resolved.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container.ResolvedEnumerable``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Indicates an enumberable set to be resolved from a container using the names supplied
            in <paramref name="names"/>.
            </summary>
            <typeparam name="T">The type to resolve from the container.</typeparam>
            <param name="names">The set of names to use when resolving from the container.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter">
            <summary>
            A parameter representing a set of named items to be resolved by the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter.Names">
            <summary>
            The set of names to resolve in the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter.ElementType">
            <summary>
            Enumeration type
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter">
            <summary>
            Represents a construction parameter resolved through the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter.#ctor(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Initializes the construction parameter from the <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.  This method call expression 
            expected to be respresented through the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container"/> static marker class.
            </summary>
            <remarks>
            
            Given a class Example defined as:
            
            public class Example
            {
                public Example(Argument arg); 
            }
            
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration`1"/> and <see cref="T:System.Linq.Expressions.LambdaExpression"/> for this configuration might appear as follows:
              new TypeRegistration&lt;Example&gt;(() =&gt; new Example(Container.Resolved&lt;Argument&gt;("SomeName"));
            
            During construction of the Example class, Argument will be resolved and injected by the container.
            The <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container.Resolved``1"/> marker interface is used to represent
            this requirement to a container configurator and is translated to a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter"/>.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Container"/>
            <param name="expression">The method expression representing the type to resolve and named value.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter.Name">
            <summary>
            The name to use when resolving the type represented by the method call expression.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.InjectedProperty">
            <summary>
            Represents a property injected in a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.InjectedProperty.PropertyName">
            <summary>
            Gets the name of the injected property.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.InjectedProperty.PropertyValue">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> describing the value injected through the property.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.NullContainerReconfiguringEventSource">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource"/> that does
            nothing. Saves null checking everywhere.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.NullContainerReconfiguringEventSource.ContainerReconfiguring">
            <summary>
            The event raised when the configuration source changes.
            </summary>
            <remarks>With this implementation the event is never raised.</remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor">
            <summary>
            This class implements the Visitor pattern over the hierarchy of
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> types. This makes it easier for container
            authors to figure out which type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> they're
            dealing with and centralize processing without manually having to switch
            on the runtime type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.Visit(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue)">
            <summary>
            Main entry point. When this method is called, this class will figure out
            the current runtime type of the passed <paramref name="parameterValue"/>
            and then call the corresponding strongly-typed visit method based on that runtime
            type.
            </summary>
            <param name="parameterValue">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> object to process.</param>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitConstantParameterValue(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue)"/>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitResolvedParameterValue(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter)"/>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitEnumerableParameterValue(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter)"/>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitParameterValue(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitConstantParameterValue(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue)">
            <summary>
            The method called when a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue"/> object is visited.
            </summary>
            <remarks>By default, this method throws an exception. Override it to provide your
            specific processing.</remarks>
            <param name="parameterValue">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue"/> to process.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitResolvedParameterValue(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter)">
            <summary>
            The method called when a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter"/> object is visited.
            </summary>
            <remarks>By default, this method throws an exception. Override it to provide your
            specific processing.</remarks>
            <param name="parameterValue">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter"/> to process.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitEnumerableParameterValue(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter)">
            <summary>
            The method called when a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter"/> object is visited.
            </summary>
            <remarks>By default, this method throws an exception. Override it to provide your
            specific processing.</remarks>
            <param name="parameterValue">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter"/> to process.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValueVisitor.VisitParameterValue(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue)">
            <summary>
            The method called when a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> object is visited and we haven't
            been able to otherwise identify the runtime type as a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ConstantParameterValue"/>,
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedParameter"/>, or <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ContainerResolvedEnumerableParameter"/>.
            </summary>
            <remarks>By default, this method throws an exception. Override it to provide your
            specific processing or do further type checking if you have extended the type hierarchy.</remarks>
            <param name="parameterValue">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> to process.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.RegistrationExpressionBuilder">
            <summary>
             Builds expression used in <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> for custom and standard Enterprise Library objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.RegistrationExpressionBuilder.BuildExpression(System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
             Builds a <see cref="T:System.Linq.Expressions.LambdaExpression"/> expected for custom Enterprise Library objects based on the supplied type's object
             and provide attributes.
            </summary>
             <remarks>
             The <paramref name="typeToBuild"/> must supply an accessible constructor that takes a single parameter of type <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
             </remarks>
            <param name="typeToBuild">The object type to build the expression around.</param>
            <param name="attributes">Attributes to pass to the constructor of <paramref name="typeToBuild"/></param>
            <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression"/> that defines the construction of <paramref name="typeToBuild"/> in a <see cref="T:System.Linq.Expressions.NewExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">Is thrown if the <paramref name="typeToBuild"/> does not provide a proper constructor.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.RegistrationExpressionBuilder.BuildNewExpression(System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
             Builds a <see cref="T:System.Linq.Expressions.NewExpression"/> expected for custom Enterprise Library objects based on the supplied type's object
             and provide attributes.
            </summary>
             <remarks>
             The <paramref name="typeToBuild"/> must supply an accessible constructor that takes a single parameter of type <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
             </remarks>
            <param name="typeToBuild">The object type to build the expression around.</param>
            <param name="attributes">Attributes to pass to the constructor of <paramref name="typeToBuild"/></param>
            <returns>A <see cref="T:System.Linq.Expressions.NewExpression"/> that defines the construction of <paramref name="typeToBuild"/> in a <see cref="T:System.Linq.Expressions.NewExpression"/>.</returns>
            <exception cref="T:System.ArgumentException">Is thrown if the <paramref name="typeToBuild"/> does not provide a proper constructor.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeLoadingLocator">
            <summary>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> implementation that
            loads a type by name, and returns an instance of that type as the provider.
            </summary>
            <remarks>
            This is primarily used to support the Data Access Application Block's configuration provider, which
            has to pull stuff from several spots. Also, we load by name rather than
            using a type object directly to avoid a compile time dependency from Common on the
            Data assembly.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeLoadingLocator.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeLoadingLocator"/> that will use the
            type named in <paramref name="typeName"/> as the provider.
            </summary>
            <param name="typeName">type to construct as a provider. This type must have a single argument
            constructor that takes an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> parameter.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeLoadingLocator.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerReconfiguringEventSource)">
            <summary>
            Construct a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeLoadingLocator"/> that will use the
            type named in <paramref name="typeName"/> as the provider.
            </summary>
            <param name="typeName">type to construct as a provider. This type must have a single argument
            constructor that takes an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> parameter.</param>
            <param name="reconfiguringEventSource">The event source containing events raised when the configuration source is changed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeLoadingLocator.GetRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to configure
            the container.
            </summary>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeLoadingLocator.GetUpdatedRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration">
            <summary>
            Represents a container registration entry as a <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.LambdaExpression"/> and additional metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.#ctor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> class with a <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.LambdaExpression"/>
            as the model for injection.
            </summary>
            <param name="expression">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.LambdaExpression"/> representing the injection.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.#ctor(System.Linq.Expressions.LambdaExpression,System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> class with a <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.LambdaExpression"/>
            as the model for injection.
            </summary>
            <param name="expression">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.LambdaExpression"/> representing the injection.</param>
            <param name="serviceType">The service type to register the implementation against.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.DefaultName(System.Type)">
            <summary>
            Returns the default name for a type that will be returned if no name
            is otherwise specified.
            </summary>
            <param name="serviceType">Type that was registered.</param>
            <returns>Default name that will be used.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.DefaultName``1">
            <summary>
            Returns the default name for a type that will be returned if no name
            is otherwise specified.
            </summary>
            <typeparam name="TServiceType">Type that was registered.</typeparam>
            <returns>Default name that will be used.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.ImplementationType">
            <summary>
            Gets the <see cref="T:System.Type"/> for the registration entry.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.NewExpressionBody">
            <summary>
            Returns the expression body representing the creation constructor call.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.ServiceType">
            <summary>
            Gets the <see cref="T:System.Type"/> for which the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.ImplementationType"/> provides an implementation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.Name">
            <summary>
            Gets the name under which the entry should be registered to the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.IsPublicName">
            <summary>
            Is this registration for a type that is part of a public API? If
            true, configurators should not transform the name in any way. If
            false, this is an internal implementation class that users will not
            be resolving directly, and as such the name can be manipulated safely
            without interfering with the public API.
            </summary>
            <remarks>Some containers have restrictions on the allowed names (for example,
            many require names to be globally unique). Some object names need to be
            left alone (for example, Database or Exception policies) becuase that is
            what the user will use to get those objects. Other names (like for instrumentation
            providers) are internal and can be freely changed by the configurator as
            needed to fit into the container.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.LambdaExpression">
            <summary>
            Gets <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.LambdaExpression"/> representing the injection.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.IsDefault">
            <summary>
            Gets <see langword="true"/> if the registration is to be considered the default for the service type, 
            <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.Lifetime">
            <summary>
            The required lifetime for this service implementation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.ConstructorParameters">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ParameterValue"/> instances describing values injected through the constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration.InjectedProperties">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.InjectedProperty"/> instances describing values injected to properties.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration`1">
            <summary>
            Represents a container registration entry as a <see cref="T:System.Linq.Expressions.LambdaExpression"/> and additional metadata for constructing a specific type.
            </summary>
            <typeparam name="T">The service type registered with the container</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Initializes the TypeRegistration with a <see cref="T:System.Linq.Expressions.LambdaExpression"/> for T.
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.LambdaExpression"/> that providing the construction model for T.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationLifetime">
            <summary>
            A set of values indicating what the lifetime of service implementations
            in the container should be.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationLifetime.Singleton">
            <summary>
            This implementation should be stored by the container and it should return
            the same object for each request.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationLifetime.Transient">
            <summary>
            A new instance should be returned for each request.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.CompositeTypeRegistrationsProviderLocator">
            <summary>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> that provides a composite
            over a collection of individual <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.CompositeTypeRegistrationsProviderLocator.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider})">
            <summary>
            Create the composite with the list of locators to use.
            </summary>
            <param name="locators">The locators.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.CompositeTypeRegistrationsProviderLocator.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider[])">
            <summary>
            Create the composite with the list of locators to use.
            </summary>
            <param name="locators">The locators.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.CompositeTypeRegistrationsProviderLocator.GetRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to configure
            the container.
            </summary>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.CompositeTypeRegistrationsProviderLocator.GetUpdatedRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Unity.UnityContainerConfigurator">
            <summary>
            The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> specific configurator for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entries.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Unity.UnityContainerConfigurator.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializer for the configurator.
            </summary>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to configure.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Unity.UnityContainerConfigurator.RegisterAllCore(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider)">
            <summary>
            Consume the set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects and
            configure the associated container.
            </summary>
            <param name="configurationSource">Configuration source to read registrations from.</param>
            <param name="rootProvider"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> that knows how to
            read the <paramref name="configurationSource"/> and return all relevant type registrations.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Unity.UnityContainerConfigurator.RegisterUpdates(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration})">
            <summary>
            When overridden in a derived class, this method should reconfigure the container
            with the provided <paramref name="updatedRegistrations"/>.
            </summary>
            <param name="updatedRegistrations">The new type registrations to apply to the container.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Unity.UnityContainerConfigurator.GetLocator">
            <summary>
            When overridden in a derived class, this method should return an implementation
            of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that wraps the actual container.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that objects can use to re-resolve
            dependencies after the container has been reconfigured.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Unity.UnityContainerConfigurator.Register(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration)">
            <summary>
            Registers the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entry with the container.
            </summary>
            <param name="registrationEntry">The type registration entry to add to the container.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InjectionMember">
            <summary>
            Base class for objects that can be used to configure what
            class members get injected by the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionMember.AddPolicies(System.Type,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
            container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="typeToCreate">Type to register.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionMember.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
            container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="serviceType">Type of interface being registered. If no interface,
            this will be null.</param>
            <param name="implementationType">Type of concrete type being registered.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData">
            <summary>
            A configuration element that allows you to configure arbitrary
            call handlers that don't otherwise have configuration support.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.#ctor(System.String,System.Type)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData"/> instance.
            </summary>
            <param name="name">Name of handler instance.</param>
            <param name="type">Type of handler to configure.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData"/> instance.
            </summary>
            <param name="name">Name of handler instance.</param>
            <param name="typeName">Name of the handler type to configure.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData"/> instance.
            </summary>
            <param name="name">Name of handler instance.</param>
            <param name="typeName">Name of the handler type to configure.</param>
            <param name="handlerOrder">Order of the handler type to configure.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute value for a key.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Modifies the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData"/> object to remove all values that should not be saved. 
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">A parent <see cref="T:System.Configuration.ConfigurationElement"/> object or <see langword="null"/> if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData"/> object, 
            including the locks and the properties collection.
            </summary>
            <param name="parentElement">The parent element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.IsModified">
            <summary>
            Indicates whether this configuration element has been modified since it was last 
            saved or loaded when implemented in a derived class.
            </summary>
            <returns><see langword="true"/> if the element has been modified; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Called when an unknown attribute is encountered while deserializing the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData"/> object.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><see langword="true"/> if the processing of the element should continue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Common#Configuration#CustomCallHandlerData}#BaseGetPropertyValue(System.Configuration.ConfigurationProperty)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="property">Gets the given property value.</param>
            <returns>the requested property's value</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Common#Configuration#CustomCallHandlerData}#BaseSetPropertyValue(System.Configuration.ConfigurationProperty,System.Object)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="property">Sets the given property.</param>
            <param name="value">New value for the property.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Common#Configuration#CustomCallHandlerData}#BaseUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="sourceElement">Source configuration element</param>
            <param name="parentElement">Parent configuration element</param>
            <param name="saveMode">ConfigurationSaveMode</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Common#Configuration#CustomCallHandlerData}#BaseReset(System.Configuration.ConfigurationElement)">
            <summary>Invokes the inherited behavior.</summary>
            <param name="parentElement">Parent element</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Common#Configuration#CustomCallHandlerData}#BaseIsModified">
            <summary>Invokes the inherited behavior.</summary>
            <returns>True if element has been modified, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the call handler represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.TypeName">
            <summary>
            Overridden in order to apply <see cref="T:System.ComponentModel.BrowsableAttribute"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
            <value>Collection of attributes.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for 
            this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this
            configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomCallHandlerData.Microsoft#Practices#EnterpriseLibrary#Common#Configuration#IHelperAssistedCustomConfigurationData{Microsoft#Practices#EnterpriseLibrary#Common#Configuration#CustomCallHandlerData}#Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomConfigurationElementCollection`2">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> objects.
            </summary>
            <typeparam name="T">The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object this collection contains.</typeparam>
            <typeparam name="TCustomElementData">The type used for Custom configuration elements in this collection.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`2">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> objects.
            </summary>
            <typeparam name="T">The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object this collection contains.</typeparam>
            <typeparam name="TCustomElementData">The type used for Custom configuration elements in this collection.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1">
            <summary>
            Represents the base class from which all implementations of polymorphic configuration collections must derive. 
            </summary>
            <typeparam name="T">The type contained in the collection.</typeparam>	
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1">
            <summary>
            Represents a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> objects.
            </summary>
            <typeparam name="T">A newable object that inherits from <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/>.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection">
            <summary>
            Interface that allows a <see cref="T:System.Configuration.ConfigurationElementCollection"/> to be merged.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection.ResetCollection(System.Collections.Generic.IEnumerable{System.Configuration.ConfigurationElement})">
            <summary>
            Resets the elements in the <see cref="T:System.Configuration.ConfigurationElementCollection"/> to the <see cref="T:System.Configuration.ConfigurationElement"/>s passed as <paramref name="configurationElements"/>.
            </summary>
            <param name="configurationElements">The new contents of this <see cref="T:System.Configuration.ConfigurationElementCollection"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection.CreateNewElement(System.Type)">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/> for the specifies <paramref name="configurationType"/>.
            </summary>
            <param name="configurationType">The type of <see cref="T:System.Configuration.ConfigurationElement"/> that should be created.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the collection.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Get(System.Int32)">
            <summary>
            Gets the configuration element at the specified index location. 
            </summary>
            <param name="index">The index location of the <see name="T"/> to return. </param>
            <returns>The <see name="T"/> at the specified index. </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Add(`0)">
            <summary>
            Add an instance of <typeparamref name="T"/> to the collection.
            </summary>
            <param name="element">An instance of <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Get(System.String)">
            <summary>
            Gets the named instance of <typeparamref name="T"/> from the collection.
            </summary>
            <param name="name">The name of the <typeparamref name="T"/> instance to retrieve.</param>
            <returns>The instance of <typeparamref name="T"/> with the specified key; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Contains(System.String)">
            <summary>
            Determines if the name exists in the collection.
            </summary>
            <param name="name">The name to search.</param>
            <returns><see langword="true"/> if the name is contained in the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Remove(System.String)">
            <summary>
            Remove the named element from the collection.
            </summary>
            <param name="name">The name of the element to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection. 
            </summary>
            <returns>An enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.CreateNewElement">
            <summary>
            Creates a new instance of a <typeparamref name="T"/> object.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class. 
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. </param>
            <returns>An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.Reset(System.Configuration.ConfigurationElement)">
            <summary>
            Resets the internal state of the <see cref="T:System.Configuration.ConfigurationElement"/> object, including the locks and the properties collections.
            </summary>
            <param name="parentElement">The parent node of the configuration element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Called when an unknown element is encountered while deserializing the <see cref="T:System.Configuration.ConfigurationElement"/> object.
            </summary>
            <param name="elementName">The name of the element.</param>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> used to deserialize the element.</param>
            <returns><see langword="true"/> if the element was handled; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.RetrieveConfigurationElementType(System.Xml.XmlReader)">
            <summary>
            When overriden in a class, get the configuration object for each <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object in the collection.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that is deserializing the element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/>. 
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.CreateNewElement(System.String)">
            <summary>
            Creates a new named <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <param name="elementName">The name of the element to create.</param>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.PolymorphicConfigurationElementCollection`1.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Reverses the effect of merging configuration information from different levels of the configuration hierarchy.
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">The parent <see cref="T:System.Configuration.ConfigurationElement"/> object of the current element, or a <see langword="null"/> reference (Nothing in Visual Basic) if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElementCollection`2.RetrieveConfigurationElementType(System.Xml.XmlReader)">
            <summary>
            Get the configuration object for each <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object in the collection.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that is deserializing the element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomConfigurationElementCollection`2.RetrieveConfigurationElementType(System.Xml.XmlReader)">
            <summary>
            Get the configuration object for each <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/> object in the collection.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that is deserializing the element.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1">
            <summary>
            Generic helper class for custom provider configuration objects.
            </summary>
            <remarks>
            The helper class encapsulates the logic to manage an unknown set of properties in <see cref="T:System.Configuration.ConfigurationElement"/>s.
            This logic cannot be inherited by the configuration objects because these objects must inherit from the base configuration 
            object type for the hierarchy of providers the configuration object represents.
            </remarks>
            <typeparam name="T">The type of the custom provider configuration object.</typeparam>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.propertiesCollection">
            <summary>
            Collection of managed properties
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1"/> class for a configuration object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleIsModified">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.IsModified"/>.
            </summary>
            <returns><b>true</b> if the managed element has been modified.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleOnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)"/>.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns><code>true</code> when an unknown attribute is encountered while deserializing.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleReset(System.Configuration.ConfigurationElement)">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)"/>.
            </summary>
            <param name="parentElement">The parent node of the configuration element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleSetAttributeValue(System.String,System.String)">
            <summary>
            Sets the value to the specified attribute and updates the properties collection.
            </summary>
            <param name="key">The key of the attribute to set.</param>
            <param name="value">The value to set for the attribute.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.HandleUnmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Concrete implementation of <see cref="M:System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)"/>.
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">The parent <see cref="T:System.Configuration.ConfigurationElement"/> object, or a <see langword="null"/> reference if this is the top level.</param>
            <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode"/> object that determines which property values to include.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.IsKnownPropertyName(System.String)">
            <summary>
            Returns whether the property name is known in advance, i.e. it is not a dynamic property.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns><b>true</b> if the property is known in advance, <b>false</b> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.Attributes">
            <summary>
            Gets the collection of custom attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.CustomProviderDataHelper`1.Properties">
            <summary>
            Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this configuration element when implemented in a derived class. 
            </summary>
            <value>
            A <see cref="T:System.Configuration.ConfigurationPropertyCollection"/> of the properties that are defined for this configuration element when implemented in a derived class. 
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.AddApplicationSettingsTitle">
            <summary>
              查找类似 Add Application Settings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.AddConfigurationSourcesTitle">
            <summary>
              查找类似 Add Configuration Settings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.AddInstrumentationSettingsTitle">
            <summary>
              查找类似 Add Instrumentation Settings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.AppSettingsSectionMetadataDescription">
            <summary>
              查找类似 Application Settings  的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.AppSettingsSectionMetadataDisplayName">
            <summary>
              查找类似 Application Settings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CallHandlerDataOrderDescription">
             <summary>
               查找类似 The position of the handler within the policy handler chain, starting from 1. 
            The default value is zero, which means that there is no explicit order specified for 
            the handler in relation to other handlers in the same handler chain. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CallHandlerDataOrderDisplayName">
            <summary>
              查找类似 Order 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CategoryGeneral">
            <summary>
              查找类似 General 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CategoryLocalization">
            <summary>
              查找类似 Localization 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CategoryName">
            <summary>
              查找类似 (name) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataDescription">
            <summary>
              查找类似 A manageability provider for a configuration element. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataDisplayName">
            <summary>
              查找类似 Configuration Element Manageability Provider 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataNameDescription">
            <summary>
              查找类似 The name of the Configuration Element Manageability Provider. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataTargetTypeDescription">
            <summary>
              查找类似 The type that is managed by the manageability provider. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataTargetTypeDisplayName">
            <summary>
              查找类似 Target Type 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataTypeNameDescription">
            <summary>
              查找类似 The fully qualified type name of the Configuration Element Manageability Provider. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationElementManageabilityProviderDataTypeNameDisplayName">
            <summary>
              查找类似 Type 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataDescription">
            <summary>
              查找类似 A manageability provider for a configuration section. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataDisplayName">
            <summary>
              查找类似 Configuration Section Manageability Provider 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataManageabilityProvidersDescription">
             <summary>
               查找类似 A collection of Manageability Providers that the receiver might require to provide 
            manageability to configuration elements. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataManageabilityProvidersDisplayName">
            <summary>
              查找类似 Manageability Providers 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataNameDescription">
            <summary>
              查找类似 The name of the Manageability Provider. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataTypeNameDescription">
            <summary>
              查找类似 The fully qualified type name of the Manageability Provider. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSectionManageabilityProviderDataTypeNameDisplayName">
            <summary>
              查找类似 Type 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceElementDescription">
            <summary>
              查找类似 The element that represents a configuration source . 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceElementDisplayName">
            <summary>
              查找类似 An element that contains configurtain information. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceElementNameDescription">
            <summary>
              查找类似 The name of the Configuration Source Element. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceElementNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceElementTypeNameDescription">
            <summary>
              查找类似 The fully qualified type name of the Configuration Source Element. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceElementTypeNameDisplayName">
            <summary>
              查找类似 Type 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionDescription">
            <summary>
              查找类似 Configuration settings that determine the sources of configuration information for an application. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionDisplayName">
            <summary>
              查找类似 Configuration Sources 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionParentSourceDescription">
            <summary>
              查找类似 The name of the Configuration Source containing the section that this Redirected Section will override. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionParentSourceDisplayName">
            <summary>
              查找类似 Parent Source 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionRedirectedSectionsDescription">
            <summary>
              查找类似 The list of Redirected Sections for this application configuration. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionRedirectedSectionsDisplayName">
            <summary>
              查找类似 Redirected Sections 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionSelectedSourceDescription">
            <summary>
              查找类似 The name of the default Configuration Source. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionSelectedSourceDisplayName">
            <summary>
              查找类似 Selected Source 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionSourcesDescription">
            <summary>
              查找类似 The collection of defined configuration sources. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ConfigurationSourceSectionSourcesDisplayName">
            <summary>
              查找类似 Sources 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CustomCallHandlerDataDescription">
            <summary>
              查找类似 A custom implementation of a Call Handler that is added to Enterprise Library. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CustomCallHandlerDataDisplayName">
            <summary>
              查找类似 Custom Call Handler 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CustomCallHandlerDataTypeNameDescription">
            <summary>
              查找类似 The fully qualified type name of the Custom Call Handler. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.CustomCallHandlerDataTypeNameDisplayName">
            <summary>
              查找类似 Type 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementDescription">
             <summary>
               查找类似 A Configuration Source that reads configuration information from a disk file. 
            The file must contain XML data in the standard .NET configuration format. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementDisplayName">
            <summary>
              查找类似 File-based Configuration Source 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementFilePathDescription">
            <summary>
              查找类似 The full path and name of the configuration file. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementFilePathDisplayName">
            <summary>
              查找类似 File Path 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementFilePathFilter">
            <summary>
              查找类似 Configuration files (*.config)|*.config|All Files (*.*)|*.* 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementNameDescription">
            <summary>
              查找类似 The name of the File-based Configuration Source. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementTypeNameDescription">
            <summary>
              查找类似 The fully qualified type name of the File-based Configuration Source. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.FileConfigurationSourceElementTypeNameDisplayName">
            <summary>
              查找类似 Type 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionApplicationInstanceNameDescription">
            <summary>
              查找类似 The unique name for the Application Instance to be used by the Instrumentation providers. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionApplicationInstanceNameDisplayName">
            <summary>
              查找类似 Application Instance Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionDescription">
            <summary>
              查找类似 Configuration settings for Instrumentation for the entire application. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionDisplayName">
            <summary>
              查找类似 Instrumentation Settings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionEventLoggingEnabledDescription">
             <summary>
               查找类似 Specifies if logging to Windows Event Log will take place when instrumented 
            events occur within Enterprise Library. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionEventLoggingEnabledDisplayName">
            <summary>
              查找类似 Event Logging Enabled 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionPerformanceCountersEnabledDescription">
             <summary>
               查找类似 Specifies if the Enterprise Library Performance Counters will be exposed and updated 
            when instrumented events occur within Enterprise Library. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.InstrumentationConfigurationSectionPerformanceCountersEnabledDisplayName">
            <summary>
              查找类似 Performance Counters Enabled 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationCollectionMetadataDescription">
            <summary>
              查找类似 Settings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationCollectionMetadataDisplayName">
            <summary>
              查找类似 Settings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationElementMetadataDescription">
            <summary>
              查找类似 A custom application settings, such as file paths or XML Web service URLs. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationElementMetadataDisplayName">
            <summary>
              查找类似 Setting 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationElementMetadataKeyDescription">
            <summary>
              查找类似 Key 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationElementMetadataKeyDisplayName">
            <summary>
              查找类似 Key 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationElementMetadataValueDescription">
            <summary>
              查找类似 Value 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.KeyValueConfigurationElementMetadataValueDisplayName">
            <summary>
              查找类似 Value 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementApplicationNameDescription">
             <summary>
               查找类似 The name of the application. 
            This used to determine the Registry path for the configuration information. 
            This value is required. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementApplicationNameDisplayName">
            <summary>
              查找类似 Application Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementConfigurationManageabilityProvidersDescription">
            <summary>
              查找类似 The collection of registered types necessary to provide manageability by the configuration source. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementConfigurationManageabilityProvidersDisplayName">
            <summary>
              查找类似 Configuration Manageability Providers 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementDescription">
             <summary>
               查找类似 A configuration source that integrates with Group Policy to apply domain-wide or 
            local machine policy overrides to provide centralized configuration management capabilities. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementDisplayName">
            <summary>
              查找类似 Manageable Configuration Source 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementEnableGroupPoliciesDescription">
             <summary>
               查找类似 Specifies if the configuration source will take account of domain-wide or 
            local machine policy overrides configured in the Registry through Group Policy settings. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementEnableGroupPoliciesDisplayName">
            <summary>
              查找类似 Group Policy Enabled 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementFilePathDescription">
            <summary>
              查找类似 The full path and name of the configuration file. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementFilePathDisplayName">
            <summary>
              查找类似 File Path 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementNameDescription">
            <summary>
              查找类似 The name of the Manageable Configuration Source. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementTypeNameDescription">
            <summary>
              查找类似 The fully qualified type name of the Manageable Configuration Source. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.ManageableConfigurationSourceElementTypeNameDisplayName">
            <summary>
              查找类似 Type 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NamedConfigurationElementDescription">
            <summary>
              查找类似 A configuration element in a collection that is keyed by the name. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NamedConfigurationElementDisplayName">
            <summary>
              查找类似 Named Configuration Element 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NamedConfigurationElementNameDescription">
            <summary>
              查找类似 The name used to identify this item. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NamedConfigurationElementNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NamedElementCollectionDescription">
            <summary>
              查找类似 A collection of Named Configuration elements. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NamedElementCollectionDisplayName">
            <summary>
              查找类似 Named Element Collection 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementCollectionDescription">
            <summary>
              查找类似 A collection of Name Type Configuration elements. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementCollectionDisplayName">
            <summary>
              查找类似 Name Type Configuration Element Collection 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementDescription">
            <summary>
              查找类似 A configuration element in a collection that contains both a type and a name. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementDisplayName">
            <summary>
              查找类似 Name Type Configuration Element 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementNameDescription">
            <summary>
              查找类似 The name of the Name Type Configuration Element. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementTypeNameDescription">
            <summary>
              查找类似 The fully qualified type name of the Name Type Configuration Element. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.NameTypeConfigurationElementTypeNameDisplayName">
            <summary>
              查找类似 Type Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.PolymorphicConfigurationElementCollectionDescription">
            <summary>
              查找类似 A base class from which all implementations of polymorphic configuration collections derive. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.PolymorphicConfigurationElementCollectionDisplayName">
            <summary>
              查找类似 Polymorphic Configuration Element Collection 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.RedirectedSectionElementDescription">
             <summary>
               查找类似 A redirected section for the application configuration. 
            Each section of the configuration can be loaded from a different configuration source if required. 
            Each Redirected Section configured in this list will override the same entire section in 
            the default Configuration Source. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.RedirectedSectionElementDisplayName">
            <summary>
              查找类似 Redirected Section 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.RedirectedSectionElementNameDescription">
            <summary>
              查找类似 The name of the Redirected Section. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.RedirectedSectionElementNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.RedirectedSectionElementSourceNameDescription">
             <summary>
               查找类似 The name of the Configuration Source that will handle the redirected section. 
            Must be one of the Configuration Sources defined for the application. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.RedirectedSectionElementSourceNameDisplayName">
            <summary>
              查找类似 Configuration Source 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SerializableConfigurationSectionDescription">
            <summary>
              查找类似 Represents a configuration section that can be serialized and deserialized to XML. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SerializableConfigurationSectionDisplayName">
            <summary>
              查找类似 Serializable Configuration Section 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SystemConfigurationSourceElementDescription">
             <summary>
               查找类似 A configuration source that reads configuration data from the default configuration file. 
            Typically this is App.config or Web.config, depending on the application type. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SystemConfigurationSourceElementDisplayName">
            <summary>
              查找类似 System Configuration Source 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SystemConfigurationSourceElementNameDescription">
            <summary>
              查找类似 The name of the System Configuration Source. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SystemConfigurationSourceElementNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SystemConfigurationSourceElementTypeNameDescription">
            <summary>
              查找类似 The fully qualified type name of the System Configuration Source. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.SystemConfigurationSourceElementTypeNameDisplayName">
            <summary>
              查找类似 Type 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementCollectionDescription">
            <summary>
              查找类似 A collection of Type Registration Provider elements. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementCollectionDisplayName">
            <summary>
              查找类似 Type Registration Provider Element Collection 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementDescription">
            <summary>
              查找类似 A provider for registering types. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementDisplayName">
            <summary>
              查找类似 Type Registration Provider Element 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementNameDescription">
            <summary>
              查找类似 The name of the Type Registration Provider Element. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementNameDisplayName">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementProviderTypeNameDescription">
            <summary>
              查找类似 The name of the type that implements the Type Registration Provider Element. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementProviderTypeNameDisplayName">
            <summary>
              查找类似 Provider Type Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementSectionNameDescription">
            <summary>
              查找类似 The name of the configuration section within the configuration file. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProviderElementSectionNameDisplayName">
            <summary>
              查找类似 Section Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProvidersConfigurationSectionDescription">
            <summary>
              查找类似 The section of the configuration that specifies the Type Registration Providers for the application. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProvidersConfigurationSectionDisplayName">
            <summary>
              查找类似 Type Registration Providers Configuration Section 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProvidersConfigurationSectionTypeRegistrationProvidersDescription">
            <summary>
              查找类似 A collection of Type Registration providers. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DesignResources.TypeRegistrationProvidersConfigurationSectionTypeRegistrationProvidersDisplayName">
            <summary>
              查找类似 Type Registration Providers 的本地化字符串。
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddApplicationBlockCommandAttribute">
            <summary>
            Attribute class used to decorate the design time view model with a Add Application Block command. <br/>
            Add Application Block commands are added to the configuration tools main menu, underneath the 'Blocks' menu item.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute">
            <summary>
            Attribute used to decorate a designtime View Model element with an executable command. E.g. a context menu item that allows
            the user to perform an action in the elements context.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute"/> class, specifying the Command Model Type.
            </summary>
            <remarks>
            The Command Model Type should derive from the CommandModel class in the Configuration.Design assembly. <br/>
            As this attribute can be applied to the configuration directly and we dont want to force a dependency on the Configuration.Design assembly <br/>
            You can specify the Command Model Type in a loosy coupled fashion.
            </remarks>
            <param name="commandModelTypeName">The fully qualified name of the Command Model Type.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute"/> class, specifying the Command Model Type.
            </summary>
            <remarks>
            The Command Model Type should derive from the CommandModel class in the Configuration.Design assmbly. <br/>
            As this attribute can be applied to the configuration directly and we dont want to force a dependency on the Configuration.Design assembly <br/>
            You can specify the Command Model Type in a loosy coupled fashion.
            </remarks>
            <param name="commandModelType">The Command Model Type.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.TitleResourceName">
            <summary>
            Gets or sets the name of the resource, used to return a localized title that will be shown for this command in the UI (User Interface).
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.TitleResourceType">
            <summary>
            Gets or sets the type of the resource, used to return a localized title that will be shown for this command in the UI (User Interface).
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.Title">
            <summary>
            Gets the title that will be shown for this command in the UI (User Interface).
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.Replace">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandReplacement"/> options for this command.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.CommandPlacement">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.CommandPlacement"/> options for this command.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.CommandModelTypeName">
            <summary>
            Gets or Sets the Command Model Type Name for this command. <br/>
            The Command Model Type will be used at runtime to display and execute the command.<br/>
            Command Model Types should derive from the CommandModel class in the Configuration.Design assembly. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.CommandModelType">
            <summary>
            Gets the Command Model Type for this command. <br/>
            The Command Model Type will be used at runtime to display and execute the command.<br/>
            Command Model Types should derive from the CommandModel class in the Configuration.Design assembly. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.KeyGesture">
            <summary>
            Defines the keyboard gesture for this command.
            </summary>
            <example>
                command.KeyGesture = "Ctrl+1";
            </example>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandAttribute.TypeId">
            <summary>
            When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute"/>.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that is a unique identifier for the attribute.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddApplicationBlockCommandAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddApplicationBlockCommandAttribute"/> class.
            </summary>
            <param name="sectionName">The name of the configuration section that belongs to the application block that will be added.</param>
            <param name="configurationSectionType">The type of the configuration section that belongs to the application block that will be added.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddApplicationBlockCommandAttribute.SectionName">
            <summary>
            Gets the name of the configuration section that belongs to the application block that will be added.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddApplicationBlockCommandAttribute.ConfigurationSectionType">
            <summary>
            Gets the type of the configuration section that belongs to the application block that will be added.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute">
            <summary>
            Attribute used to overwrite the Add Command for providers that depend on the availability of another block (Sattelite Providers).
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute"/> specifying the block dependency by its configuration section name.<br/>
            </summary>
            <param name="sectionName">The name of the configuran section, used to identify the block dependency.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute"/> specifying the block dependency by its configuration section name and will assign the value of a default provider to the added element.<br/>
            </summary>
            <param name="sectionName">The name of the configuran section, used to identify the block dependency.</param>
            <param name="defaultProviderConfigurationType">The configuration type of the element that declares the default proviiders name.</param>
            <param name="defaultProviderConfigurationPropertyName">The property that will be used to determine the name of the default provider.</param>
            <param name="sateliteProviderReferencePropertyName">The property on the created element that will be assigned the name of the default provider.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute.SectionName">
            <summary>
            Gets the section name of the block dependency.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute.DefaultProviderConfigurationType">
            <summary>
            If a configuration element exists that specifies a default property, gets the configuration type of the declaring element.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute.DefaultProviderConfigurationPropertyName">
            <summary>
            If a configuration element exists that specifies a default property, gets the property that contains the name of the default value.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AddSateliteProviderCommandAttribute.SateliteProviderReferencePropertyName">
            <summary>
            If the provider has a property that should be assigned the name of the default provider, gets the name of the property.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime">
            <summary>
            Container class for types and identifiers used to decorate the appSettings configuration schema with designtime information.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.AppSettingsSectionName">
            <summary>
            Name of appSettings section.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.ViewModelTypeNames">
            <summary>
            Container class for View Model Types used to decorate the appSettings configuration schema with designtime information.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.ViewModelTypeNames.AppSettingsSectionViewModel">
            <summary>
            Type Name of the Section View Model used to display application settings.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.MetadataTypes">
            <summary>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.MetadataTypes.AppSettingsSectionMetadata">
            <summary>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.MetadataTypes.KeyValueConfigurationCollectionMetadata">
            <summary>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.MetadataTypes.KeyValueConfigurationElementMetadata">
            <summary>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.MetadataTypes.KeyValueConfigurationElementMetadata.Key">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.AppSettingsDesignTime.MetadataTypes.KeyValueConfigurationElementMetadata.Value">
            <summary>
            This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute">
            <summary>
            Indicates the base class or interface that must be assignable from the type specified in the property that this attribute decorates.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the  <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute"/> class with the specified <see cref="T:System.Type"/> object.
            </summary>
            <param name="baseType">
            The <see cref="T:System.Type"/> to filter selections.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the  <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute"/> class with the specified base <see cref="T:System.Type"/> object and configuration <see cref="T:System.Type"/>.
            </summary>
            <param name="baseType">The base <see cref="T:System.Type"/> to filter.</param>
            <param name="configurationType">The configuration object <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.#ctor(System.Type,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute"/> class with the specified <see cref="T:System.Type"/> object and <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.TypeSelectorIncludes"/>.
            </summary>
            <param name="baseType">
            The <see cref="T:System.Type"/> to filter selections.
            </param>
            <param name="typeSelectorIncludes">
            One of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.TypeSelectorIncludes"/> values.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.#ctor(System.Type,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes,System.Type)">
            <summary>
            Initializes a new instance of the  <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute"/> class with the specified base <see cref="T:System.Type"/> object and configuration <see cref="T:System.Type"/>.
            </summary>
            <param name="typeSelectorIncludes">
            One of the <see cref="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.typeSelectorIncludes"/> values.
            </param>
            <param name="baseType">The base <see cref="T:System.Type"/> to filter.</param>
            <param name="configurationType">The configuration object <see cref="T:System.Type"/>.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.TypeSelectorIncludes">
            <summary>
            Gets the includes for the type selector.
            </summary>
            <value>
            The includes for the type selector.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.BaseType">
            <summary>
            Gets the <see cref="T:System.Type"/> to filter selections.
            </summary>
            <value>
            The <see cref="T:System.Type"/> to filter selections.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.BaseTypeAttribute.ConfigurationType">
            <summary>
            Gets the configuration object <see cref="T:System.Type"/>.
            </summary>
            <value>
            The configuration object <see cref="T:System.Type"/>.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CloneableConfigurationElementTypeAttribute">
            <summary>
            Attribute class used to associate a <see cref="T:System.Configuration.ConfigurationElement"/> class with an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement"/> implementation.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CloneableConfigurationElementTypeAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CloneableConfigurationElementTypeAttribute"/> class.
            </summary>
            <param name="cloneableConfigurationElementType">The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement"/> that should be associated with the target <see cref="T:System.Configuration.ConfigurationElement"/> class.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CloneableConfigurationElementTypeAttribute.CloneableConfigurationElementType">
            <summary>
            Gets the type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement"/> that should be associated with the target <see cref="T:System.Configuration.ConfigurationElement"/> class.
            </summary>
            <value>
            The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement"/> that should be associated with the target <see cref="T:System.Configuration.ConfigurationElement"/> class.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandReplacement">
            <summary>
            Specifies whether a command replaces a default command.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandReplacement.DefaultAddCommandReplacement">
            <summary>
            Specifies that the command should be used to replace the default add command.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandReplacement.DefaultDeleteCommandReplacement">
            <summary>
            Specifies that the command should be used to replace the default delete command.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandReplacement.NoCommand">
            <summary>
            Specifies that the command should not be used to replace any default command.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement">
            <summary>
            Specifies the placement of a command. This can be either a top level menu, e.g.: <see cref="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.FileMenu"/> or <see cref="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.BlocksMenu"/> or
            a context menu, e.g.: <see cref="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.ContextAdd"/>,  <see cref="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.ContextCustom"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.FileMenu">
            <summary>
            Specifies placement of the command in the top level file menu.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.BlocksMenu">
            <summary>
            Specifies placement of the command in the top level blocks menu.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.WizardMenu">
            <summary>
            Specifies placement of the command in the top level wizards menu.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.ContextAdd">
            <summary>
            Specifies placement of the command in the contextual add menu for an configuration element.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.ContextCustom">
            <summary>
            Specifies placement of the command in the custom commands menu for an configuration element.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommandPlacement.ContextDelete">
            <summary>
            Specifies placement of the command in the delete commands menu for an configuration element.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime">
            <summary>
            Class that contains common type names and metadata used by the designtime.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames">
            <summary>
            Class that contains common command types used by the designtime.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames.AddSatelliteProviderCommand">
            <summary>
            Type name of the AddSatelliteProviderCommand class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames.AddApplicationBlockCommand">
            <summary>
            Type name of the AddApplicationBlockCommand class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames.AddProviderUsingTypePickerCommand">
            <summary>
            Type name of the TypePickingCollectionElementAddCommand class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames.ExportAdmTemplateCommand">
            <summary>
            Type name of the ExportAdmTemplateCommand class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames.HiddenCommand">
            <summary>
            Type name of the HiddenCommand class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames.AddInstrumentationApplicationBlockCommand">
            <summary>
            Type name of the AddInstrumentationBlockCommand class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.CommandTypeNames.WizardCommand">
            <summary>
            Type name of the WizardCommand class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes">
            <summary>
            Class that contains common editor types used by the designtime.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.DatePickerEditor">
            <summary>
            Type name of the DatePickerEditor class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.CollectionEditor">
            <summary>
            Type name of the ElementCollectionEditor, declared class in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.UITypeEditor">
            <summary>
            Type name of the UITypeEditor class, declared in the System.Drawing Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.TypeSelector">
            <summary>
            Type name of the TypeSelectionEditor, declared class in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.FilteredFilePath">
            <summary>
            Type name of the FilteredFileNameEditor, declared class in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.FrameworkElement">
            <summary>
            Type name of the FrameworkElement, declared class in the PresentationFramework Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.MultilineText">
            <summary>
            Type name of the MultilineTextEditor class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.PopupTextEditor">
            <summary>
            Type name of the PopupTextEditor class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.Flags">
            <summary>
            Type name of the FlagsEditor class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.RegexTypeEditor">
            <summary>
            Type name of the RegexTypeEditor class, declared in the System.Design Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.ConnectionStringEditor">
            <summary>
            Type name of the ConnectionStringEditor class, declared in the System.Design Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.TemplateEditor">
            <summary>
            Type name of the TemplateEditor class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.EditorTypes.OverridesEditor">
            <summary>
            Type name of the IEnvironmentalOverridesEditor interface, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames">
            <summary>
            Class that contains common view model types used by the designtime.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.TypeNameProperty">
            <summary>
            Type name of the TypeNameProperty class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.ConfigurationPropertyViewModel">
            <summary>
            Type name of the ConfigurationProperty class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.SectionViewModel">
            <summary>
            Type name of the SectionViewModel class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.InstrumentationViewModel">
            <summary>
            Type name of the InstrumentationViewModel class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.ManageableConfigurationSourceViewModel">
            <summary>
            Type name of the ManageableConfigurationSourceViewModel class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.CollectionEditorContainedElementProperty">
            <summary>
            Type name of the CollectionEditorContainedElementProperty class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.CollectionEditorContainedElementReferenceProperty">
            <summary>
            Type name of the CollectionEditorContainedElementReferenceProperty class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ViewModelTypeNames.RedirectedSectionSourceProperty">
            <summary>
            Type name of the RedirectedSectionSourceProperty class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ConverterTypeNames">
            <summary>
            Class that contains common converter types used by the designtime runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ConverterTypeNames.RedirectedSectionNameConverter">
            <summary>
            Type name of the RedirectedSectionNameConverter class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.MetadataTypes">
            <summary>
            Class that contains common metadata classes used by the designtime.<br/>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.MetadataTypes.RedirectedSectionElementMetadata">
            <summary>This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.MetadataTypes.RedirectedSectionElementMetadata.Name">
            <summary>This property supports the Enterprise Library infrastructure and is not intended to be used directly from your code.</summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames">
            <summary>
            Class that contains common validation types used by the designtime.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames.FileWritableValidator">
            <summary>
            Type name of the FileWritableValidator class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames.FileValidator">
            <summary>
            Type name of the FilePathValidator class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames.PathExistsValidator">
            <summary>
            Type name of the FilePathExistsValidator class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames.RequiredFieldValidator">
            <summary>
            Type name of the RequiredFieldValidator class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames.TypeValidator">
            <summary>
            Type name of the TypeValidator class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames.SelectedSourceValidator">
            <summary>
            Type name of the SelectedSourceValidator class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.ValidationTypeNames.NameValueCollectionValidator">
            <summary>
            Type name of the NameValueCollectionValidator class, declared in the Configuration.DesignTime Assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.SectionType">
            <summary>
            Type names for well known Enterprise Library <see cref="T:System.Configuration.ConfigurationSection"/> elements.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.SectionType.LoggingSettings">
            <summary>
            Type name for the LoggingSettings section.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.SectionType.DatabaseSettings">
            <summary>
            Type name for the DatabaseSettings section.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.CommonDesignTime.SectionType.ExceptionHandlingSettings">
            <summary>
            Type name for the ExceptionHandlingSettings section.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime">
            <summary>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime.ViewModelTypeNames">
            <summary>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime.ViewModelTypeNames.ConfigurationSourcesSectionViewModel">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime.ViewModelTypeNames.ConfigurationSourceSectionViewModel">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime.CommandTypeNames">
            <summary>
            This class supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime.CommandTypeNames.AddConfigurationSourcesBlockCommand">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ConfigurationSourcesDesignTime.CommandTypeNames.ConfigurationSourceElementDeleteCommand">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource">
            <summary>
            configuration source to support design-time configuration of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource">
            <summary>
            Represents a configuration source that retrieves configuration information from an arbitrary file.
            </summary>
            <remarks>
            This configuration source uses a <see cref="T:System.Configuration.Configuration"/> object to deserialize 
            configuration, so the configuration file must be a valid .NET Framework configuration file.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource">
            <summary>
            Represents the implementation details for file-based configuration sources.
            </summary>
            <remarks>
            This implementation deals with setting up the watcher over the configuration files to detect changes and update
            the configuration representation. It also manages the change notification features provided by the file based 
            configuration sources.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest">
            <summary>
            This interface supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Augmented version of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> interface intended to be used by unit tests.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource">
            <summary>
            Represents a source for getting configuration information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section to be retrieved.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/> (<b>Nothing</b> in Visual Basic)
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to the section named <paramref name="sectionName"/> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler for the change event to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Removes a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the watched section.</param>
            <param name="handler">The handler for the change event to remove.</param>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.SourceChanged">
            <summary>
            Event raised when any section in this configuration source changes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.ConfigSourceChanged(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.ExternalConfigSourceChanged(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.ConfigSourceWatcherMappings">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.WatchedConfigSources">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceTest.WatchedSections">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.NullConfigSource">
            <summary>
            ConfigSource value for sections that existed in configuration but were later removed.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource"/> class.
            </summary>
            <param name="configurationFilepath">The path for the main configuration file.</param>
            <param name="refresh"><b>true</b>if runtime changes should be refreshed, <b>false</b> otherwise.</param>
            <param name="refreshInterval">The poll interval in milliseconds.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration file, and starts watching for 
            its changes if not watching already.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Remove a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            If a configuration section was retrieved from an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource"/>, a <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
            <exception cref="T:System.InvalidOperationException">The configuration section was retrieved from an instance of  <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource"/> or <see cref="N:Microsoft.Practices.EnterpriseLibrary.Common.Configuration"/> and cannot be added to the current source.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.DoAdd(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            When implemented in a derived class, adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it should be replaced.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.Remove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration and saves the configuration source.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.DoRemove(System.String)">
            <summary>
            When implemented in a derived class, removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration and saves the configuration source.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.ConfigSourceChanged(System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="configSource">The name of the updated configuration source.</param>
            <devdoc>
            Only needs to deal with concurrency to get the current sections and to update the watchers.
            
            Rationale:
            - Sections' are only added or updated.
            - For this notification, all sections in the configuration file must be updated, and sections in external 
            files must be refreshed only if the config source changed.
            - why not check after the original set of sections is retrieved?
            -- Sections might have been added to the listener set after the original set is retrieved, but...
            -- If they were added after the original set was retrieved, then they are up to date.
            --- For this to happen, they couldn't have been read before the o.s., otherwise they would be a listener for them.
            --- So, the retrieved information must be fresh (checked this with a test). 
            -- What about other changes?
            --- Erased sections: only tested in the configuration file watching thread, because the meta configuration 
            is kept in the configuration file.
            ---- Even if the external file an external is deleted because of the deletion, and this change is processed
            before the configuration file change, the refresh for the external section will refresh all the sections for the file and 
            notify a change, without need for checking the change. The change would later be picked up by the configuration file watcher 
            which will notify again. This shouldn't be a problem.
            --- External sections with changed sources. If they existed before, they must have been in the configuration file and there 
            was an entry in the bookeeping data structures.
            - Concurrent updates for sections values should be handled by the system.config fx
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the change watchers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.Dispose">
            <summary>
            Releases the resources used by the change watchers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.NotifyUpdatedSections(System.Collections.Generic.IEnumerable{System.String})">
            <summary/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.DoGetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration file.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.OnSourceChanged(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.SourceChanged"/> event.
            </summary>
            <param name="configurationSourceChangedEventArgs">The argument for the raised event.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.RefreshAndValidateSections(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Refreshes the configuration sections from the main configuration file and determines which sections have suffered notifications
            and should be notified to registered handlers.
            </summary>
            <param name="localSectionsToRefresh">A dictionary with the configuration sections residing in the main configuration file that must be refreshed.</param>
            <param name="externalSectionsToRefresh">A dictionary with the configuration sections residing in external files that must be refreshed.</param>
            <param name="sectionsToNotify">A new collection with the names of the sections that suffered changes and should be notified.</param>
            <param name="sectionsWithChangedConfigSource">A new dictionary with the names and file names of the sections that have changed their location.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.RefreshExternalSections(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Refreshes the configuration sections from an external configuration file.
            </summary>
            <param name="sectionsToRefresh">A collection with the names of the sections that suffered changes and should be refreshed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.ValidateArgumentsAndFileExists(System.String,System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Validates the parameters required to save a configuration section.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.SourceChanged">
            <summary>
            Event raised when any section in this configuration source has changed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource.ConfigurationFilePath">
            <summary>
            Gets the path of the configuration file for the configuration source.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IProtectedConfigurationSource">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IProtectedConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection,System.String)">
            <summary>
            </summary>
            <param name="sectionName"></param>
            <param name="configurationSection"></param>
            <param name="protectionProviderName"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/> class.
            </summary>
            <param name="configurationFilepath">The configuration file path. The path can be absolute or relative.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/> class that will refresh changes
            according to the value of the <paramref name="refresh"/> parameter.
            </summary>
            <param name="configurationFilepath">The configuration file path. The path can be absolute or relative.</param>
            <param name="refresh"><see langword="true"/> if changes to the configuration file should be notified.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/> that will refresh changes
            according to the value of the <paramref name="refresh"/> parameter, polling every 
            <paramref name="refreshInterval"/> milliseconds.
            </summary>
            <param name="configurationFilepath">The configuration file path. The path can be absolute or relative.</param>
            <param name="refresh"><see langword="true"/> if changes to the configuration file should be notified.</param>
            <param name="refreshInterval">The poll interval in milliseconds.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.DoAdd(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.DoRemove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration and saves the configuration source.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection,System.String)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source using encryption.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.<br/>
            If a configuration section was retrieved from an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource"/>, a <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
            <param name="protectionProviderName">The name of the protection provider to use when encrypting the section.</param>
            <exception cref="T:System.InvalidOperationException">The configuration section was retrieved from an instance of  <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource"/> or <see cref="N:Microsoft.Practices.EnterpriseLibrary.Common.Configuration"/> and cannot be added to the current source.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Save(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds or replaces <paramref name="configurationSection"/> under name <paramref name="section"/> in the configuration and saves the configuration file.
            </summary>
            <param name="section">The name for the section.</param>
            <param name="configurationSection">The configuration section to add or replace.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.Save(System.String,System.Configuration.ConfigurationSection,System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds or replaces <paramref name="configurationSection"/> under name <paramref name="section"/> in the configuration 
            file and saves the configuration file using encryption.
            </summary>
            <param name="section">The name for the section.</param>
            <param name="configurationSection">The configuration section to add or replace.</param>
            <param name="protectionProvider">The name of the protection provider to use when encrypting the section.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.DoGetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration file.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.RefreshAndValidateSections(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Refreshes the configuration sections from the main configuration file and determines which sections have 
            suffered notifications and should be notified to registered handlers.
            </summary>
            <param name="localSectionsToRefresh">A dictionary with the configuration sections residing in the main 
            configuration file that must be refreshed.</param>
            <param name="externalSectionsToRefresh">A dictionary with the configuration sections residing in external 
            files that must be refreshed.</param>
            <param name="sectionsToNotify">A new collection with the names of the sections that suffered changes and 
            should be notified.</param>
            <param name="sectionsWithChangedConfigSource">A new dictionary with the names and file names of the sections 
            that have changed their location.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource.RefreshExternalSections(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Refreshes the configuration sections from an external configuration file.
            </summary>
            <param name="sectionsToRefresh">A collection with the names of the sections that suffered changes and should 
            be refreshed.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource">
            <summary>
             Supports Enterprise Library design-time by providing ability to 
             retrieve, add, and remove sections.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource.GetLocalSection(System.String)">
            <summary>
             Retrieves a local section from the configuration source.
            </summary>
            <param name="sectionName"></param>
            <returns>The configuration section or null if it does not contain the section.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource.AddLocalSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a local section to the configuration source.
            </summary>
            <param name="sectionName"></param>
            <param name="section"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource.RemoveLocalSection(System.String)">
            <summary>
             Removes a local section from the configuration source.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource.#ctor(System.String)">
            <summary>
             Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource"/> based on file path.
            </summary>
            <param name="configurationFilePath"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource.GetLocalSection(System.String)">
            <summary>
             Retrieves a local section from the configuration source.
            </summary>
            <param name="sectionName"></param>
            <returns>The configuration section or null if it does not contain the section.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource.AddLocalSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a local section to the configuration source.
            </summary>
            <param name="sectionName"></param>
            <param name="section"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource.RemoveLocalSection(System.String)">
            <summary>
             Removes a local section from the configuration source.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource.CreateDesignSource(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource"/> based on <paramref name="rootSource"/> and <paramref name="filePath"/>.
            </summary>
            <param name="rootSource">The source that was used to open the main conifguration file.</param>
            <param name="filePath">An absolute of relative path to the file to which the source should be created.</param>
            <returns>A new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignConfigurationSource.ConfigurationFilePath">
            <summary>
            Gets the path of the configuration file for the configuration source.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesigntimeDefaultAttribute">
            <summary>
            Specifies a default value for a configuration property.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesigntimeDefaultAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesigntimeDefaultAttribute"/> class.
            </summary>
            <remarks>
            The default value is a string representation which will be converted using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
            <param name="bindableDefaultValue">The string representation of the default value.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesigntimeDefaultAttribute.BindableDefaultValue">
            <summary>
            Gets the string reprentation of the default value.
            </summary>
            <value>
            The string reprentation of the default value.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignTimeReadOnlyAttribute">
            <summary>
             Determines if the corresponding property is read-only at designtime.
            </summary>
            <remarks>
             This attribute is used to mark properties that should be presented as read-only, but underlying code may change the value on.
             <seealso cref="T:System.ComponentModel.ReadOnlyAttribute"/></remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignTimeReadOnlyAttribute.#ctor(System.Boolean)">
            <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignTimeReadOnlyAttribute"/> class.
            </summary>
            <param name="readOnly"><see langword="true"/> if the property should be read-only at designtime.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.DesignTimeReadOnlyAttribute.ReadOnly">
            <summary>
             Determines if the property is read-only by design-time.
             Returns <see langword="true" /> if the property is read-only at design-time
             and <see langword="false" /> otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EditorWithReadOnlyTextAttribute">
            <summary>
            Attribute that instructs the designtime to make the textbox for a property readonly. <br/>
            This property can is used together with an <see cref="T:System.ComponentModel.EditorAttribute"/>, in which the created text box is readonly, 
            though the property can be edited by the editor.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EditorWithReadOnlyTextAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EditorWithReadOnlyTextAttribute"/>.
            </summary>
            <param name="readonlyText"><see langword="true"/> if the textbox created for this property should be readonly, otherwise <see langword="false"/>.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EditorWithReadOnlyTextAttribute.ReadonlyText">
            <summary>
            Returns <see langword="true"/> if the textbox created for this property should be readonly, otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EnvironmentalOverridesAttribute">
            <summary>
            Attribute class used to indicate whether a property can be overwritten per environment.<br/>
            The default behavior is that any property can be overwritten.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EnvironmentalOverridesAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EnvironmentalOverridesAttribute"/> class.
            </summary>
            <param name="canOverride"><see langword="true"/> to specify the property can be overwritten per environment. Otherwise <see langword="false"/>.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EnvironmentalOverridesAttribute.CanOverride">
            <summary>
            <see langword="true"/> if the property can be overwritten per environment. Otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EnvironmentalOverridesAttribute.CustomOverridesPropertyType">
            <summary>
            Specifies a custom property type for the overrides property.<br/>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.EnvironmentalOverridesAttribute.StorageConverterType">
            <summary>
            Specifies a <see cref="T:System.ComponentModel.TypeConverter"/> that should be used to serialize the overriden value to the delta configuration file. <br/>
            This can be used to overwrite a property that doesnt implement <see cref="T:System.IConvertible"/>.  <br/>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.FilteredFileNameEditorAttribute">
            <summary>
            Specifies additional metadata for the FilteredFileNameEditor editor.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.FilteredFileNameEditorAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.FilteredFileNameEditorAttribute"/> class with the <see cref="T:System.Type"/> containing the resources and the resource key.
            </summary>
            <param name="resourceType">The <see cref="T:System.Type"/> containing the resources.</param>
            <param name="resourceKey">The resource key.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.FilteredFileNameEditorAttribute.Filter">
            <summary>
            Gets the filter for the dialog.
            </summary>
            <value>
            The filter for the dialog.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.FilteredFileNameEditorAttribute.CheckFileExists">
            <summary>
            Gets or sets whether the Open File Dialog should only allow existing files to be selected.
            </summary>
            <value>
            <see langword="true"/> if the Open File Dialog is used to open existing files. Otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.HandlesSectionAttribute">
            <summary>
             Indicates that this assembly handles the <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.HandlesSectionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.HandlesSectionAttribute"/> class.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.HandlesSectionAttribute.SectionName">
            <summary>
             Name of the section handled by this assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.HandlesSectionAttribute.ClearOnly">
            <summary>
            Indicates this section should be cleared during save, but there is no 
            direct handler for it.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.MergeableConfigurationCollectionTypeAttribute">
            <summary>
            Attribute class used to associate a <see cref="T:System.Configuration.ConfigurationElementCollection"/> class with an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/> implementation.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.MergeableConfigurationCollectionTypeAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.MergeableConfigurationCollectionTypeAttribute"/> class.
            </summary>
            <param name="mergeableConfigurationCollectionType">The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/> that should be associated with the target <see cref="T:System.Configuration.ConfigurationElementCollection"/> class.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.MergeableConfigurationCollectionTypeAttribute.MergeableConfigurationCollectionType">
            <summary>
            Gets the type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/> that should be associated with the target <see cref="T:System.Configuration.ConfigurationElementCollection"/> class.
            </summary>
            <value>
            The type of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/> that should be associated with the target <see cref="T:System.Configuration.ConfigurationElementCollection"/> class.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.NamePropertyAttribute">
            <summary>
            Attribute class that allows to specify a property that should be used as the Element View Model's name.<br/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.NamePropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.NamePropertyAttribute"/> class.
            </summary>
            <param name="propertyName">The reflection name of the property that will be used as the Element View Model's name.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.NamePropertyAttribute.PropertyName">
            <summary>
            Gets the reflection name of the property that will be used as the Element View Model's name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.NamePropertyAttribute.NamePropertyDisplayFormat">
            <summary>
            Gets the Display Format that will be used to display the name property.<br/>
            The Display Format should be a Format-string with 1 argument:<Br/>
            The token '{0}' will be replaced with the Name Properties value.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.OmitCustomAttributesPropertyAttribute">
            <summary>
            This attribute supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.PromoteCommandsAttribute">
            <summary>
            Attribute class that can be oved to offer a properties add-commands to the containing Element View Model.<br/>
            This can be usefull for properties that contain a collection of providers, of which the Element Collection View Model is not shown in the UI (User Interface).
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute">
            <summary>
            Attribute class used to indicate that the property is a reference to provider. <br/>
            Reference properties will show an editable dropdown that allows the referred element to be selected.<br/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute"/> class.
            </summary>
            <param name="targetTypeName">The configuration type name of the provider that used as a reference.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute"/> class.
            </summary>
            <param name="scopeTypeName">The name of a configuration type that contains the references.</param>
            <param name="targetTypeName">The configuration type name of the provider that used as a reference.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute"/> class.
            </summary>
            <param name="targetType">The configuration type of the provider that used as a reference.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute"/> class.
            </summary>
            <param name="scopeType">The configuration type that contains the references.</param>
            <param name="targetType">The configuration type of the provider that used as a reference.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute.ScopeType">
            <summary>
            Gets the configuration type that contains the references.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute.ScopeIsDeclaringElement">
            <summary>
            Gets or sets a boolean indicating whether only providers can be used that are contained in the current Element View Model.
            </summary>
            <value>
            <see langword="true"/> if only providers can be used that are contained in the current Element View Model. Otherwise <see langword="false"/>.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ReferenceAttribute.TargetType">
            <summary>
            Gets the configuration type of the provider that used as a reference.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.RegisterAsMetadataTypeAttribute">
            <summary>
            Registers a class as a metadata body class for another class.
            </summary>
            <remarks>
            When applying metadata attributes to classes, the target class might not always allow itself to be anotated. <br/>
            This attribute can be used to nominate another class to contain the metadata attributes. <br/>
            The metadata type should follow the same structure as the target type and its members cab be decorated with the metadata attributes.<br/>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.RegisterAsMetadataTypeAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.RegisterAsMetadataTypeAttribute"/>.
            </summary>
            <param name="targetType">The type for which this class should contain metadata attributes.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.RegisterAsMetadataTypeAttribute.TargetType">
            <summary>
            Gets the type for which this class should contain metadata attributes.
            </summary>
            <value>
            The type for which this class should contain metadata attributes.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceCategoryAttribute">
            <summary>
            Represents a localized <see cref="T:System.ComponentModel.CategoryAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceCategoryAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:System.SRCategoryAttribute"/> class with the <see cref="T:System.Type"/> containing the resources and the resource name.
            </summary>
            <param name="category">The resources string name.</param>
            <param name="resourceType">The <see cref="T:System.Type"/> containing the resource strings.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Gets the localized string based on the key.
            </summary>
            <param name="value">The key to the string resources.</param>
            <returns>The localized string.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceCategoryAttribute.ResourceType">
            <summary>
            Gets the type that contains the resources.
            </summary>
            <value>
            The type that contains the resources.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceCategoryAttribute.General">
            <summary>
            Returns a localized <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceCategoryAttribute"/> for the General category.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute">
            <summary>
            A customized version of <see cref="T:System.ComponentModel.DescriptionAttribute"/> that can
            load the string from assembly resources instead of just a hard-wired
            string.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute.#ctor">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute"/> where
            the type and name of the resource is set via properties.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute"/> class.
            </summary>
            <param name="resourceType">Type used to locate the assembly containing the resources.</param>
            <param name="resourceName">Name of the entry in the resource table.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute.ResourceType">
            <summary>
            A type contained in the assembly we want to get our display name from.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute.ResourceName">
            <summary>
            Name of the string resource containing our display name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDescriptionAttribute.Description">
            <summary>
            Gets the description for a property, event, or public void method that takes no arguments stored in this attribute.
            </summary>
            <returns>
            The display name.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute">
            <summary>
            A customized version of <see cref="T:System.ComponentModel.DisplayNameAttribute"/> that can
            load the string from assembly resources instead of just a hard-wired
            string.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute.#ctor">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute"/> where
            the type and name of the resource is set via properties.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute"/> class.
            </summary>
            <param name="resourceType">Type used to locate the assembly containing the resources.</param>
            <param name="resourceName">Name of the entry in the resource table.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute.ResourceType">
            <summary>
            A type contained in the assembly we want to get our display name from.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute.ResourceName">
            <summary>
            Name of the string resource containing our display name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ResourceDisplayNameAttribute.DisplayName">
            <summary>
            Gets the display name for a property, event, or public void method that takes no arguments stored in this attribute.
            </summary>
            <returns>
            The display name.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypePickingCommandAttribute">
            <summary>
            Attribute class that is used to add a custom add command for a Element View Model.<br/>
            The Type Picking Command displays a type picker prior to adding the target element and can use its result to initialize the added element.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypePickingCommandAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypePickingCommandAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypePickingCommandAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypePickingCommandAttribute"/> class.
            </summary>
            <param name="property">The clr-name of the property to which the selected type should be assigned. This property is expected to be of type <see cref="T:System.String"/>.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypePickingCommandAttribute.Property">
            <summary>
            Gets the clr-name of the property to which the selected type should be assigned.
            </summary>
            <value>
            The clr-name of the property to which the selected type should be assigned.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes">
            <summary>
            Provides attributes for the filter of types.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes.None">
            <summary>
            No filter are applied to types.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes.AbstractTypes">
            <summary>
            Inclue abstract types in the filter.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes.Interfaces">
            <summary>
            Inclue interfaces in the filter.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes.BaseType">
            <summary>
            Inclue base types in the filter.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes.NonpublicTypes">
            <summary>
            Inclue non public types in the filter.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.TypeSelectorIncludes.All">
            <summary>
            Include all types in the filter.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ValidationAttribute">
            <summary>
             Defines the type of attribute to apply this configuration property or field.
            </summary>
             <remarks>
             This attribute is applied to create validators for use in the configuration design-time.
             </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ValidationAttribute.#ctor(System.String)">
            <summary>
             Creates an instance of ValidationAttribute with the validator type specified by <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ValidationAttribute.#ctor(System.Type)">
            <summary>
             Creates an instance of the ValidationAttribute with the validator type specified by <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ValidationAttribute.CreateValidator">
            <summary>
             Creates a validator objects.   This is expected to return a Validator type from
             the Microsoft.Practices.EnterpriseLibrary.Configuration.Design namespace.  
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ValidationAttribute.ValidatorType">
            <summary>
             Retrieves the validator <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ValidationAttribute.TypeId">
            <summary>
            When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute"/>.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that is a unique identifier for the attribute.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ElementValidationAttribute">
            <summary>
            Indicates an element level validator.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ElementValidationAttribute.#ctor(System.String)">
            <summary>
             Creates an instance of ElementValidationAttribute with the validator type specified by <see cref="T:System.String"/>.
            </summary>
            <param name="validatorTypeName"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ElementValidationAttribute.#ctor(System.Type)">
            <summary>
             Creates an instance of the ElementValidationAttribute with the validator type specified by <see cref="T:System.Type"/>
            </summary>
            <param name="validatorType"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ElementValidationAttribute.CreateValidator">
            <summary>
             Creates a validator objects.   This is expected to return a Validator type from
             the Microsoft.Practices.EnterpriseLibrary.Configuration.Design namespace.  
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ElementValidationAttribute.ValidatorType">
            <summary>
             Retrieves the validator <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.Validation.ElementValidationAttribute.TypeId">
            <summary>
            When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute"/>.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that is a unique identifier for the attribute.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ViewModelAttribute">
             <summary>
             Attribute class used to specify a specific View Model derivement or visual representation to be used on the target element.
             </summary>
             <remarks>
             
             <para>The View Model Type should derive from the ElementViewModel or Property class in the Configuration.Design assembly. <br/>
             As this attribute can be applied to the configuration directly and we dont want to force a dependency on the Configuration.Design assembly <br/>
             You can specify the View Model Type in a loosy coupled fashion, passing a qualified name of the type.</para>
            
             </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ViewModelAttribute.#ctor(System.Type)">
            <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ViewModelAttribute"/> class.
            </summary>
            <param name="modelType">The type of the View Model that should be used for the annotated element.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ViewModelAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ViewModelAttribute"/> class.
            </summary>
            <param name="modelTypeName">The type name of the View Model that should be used for the annotated element.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.ViewModelAttribute.ModelType">
            <summary>
             Gets the View Model Type that should be used to bind the annotated element to its view.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute">
            <summary>
            Marks the annotated class as a configuration wizard that can be found
            by the configuration design time tools.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute"/>
             with the default wizard command model type specified.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute"/>
             with the command model type specified as a string.
            </summary>
            <param name="commandModelTypeName"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute"/> with 
            the command model type specified by <see cref="T:System.Type"/>.
            </summary>
            <param name="commandModelType"></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute.WizardType">
            <summary>
            The type of the wizard to instantiate must derive from WizardModel or will result on an error at runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.WizardCommandAttribute.WizardTypeName">
            <summary>
            The name of the type of the wizard to instantiate.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource">
            <summary>
            Represents a configuration source that is backed by a dictionary of named objects.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.sections">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.eventHandlers">
            <summary>
            This field supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section to be retrieved.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/> (<b>Nothing</b> in Visual Basic)
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            </remarks>
            <param name="name">The name by which the <paramref name="section"/> should be added.</param>
            <param name="section">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Remove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration source.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.Contains(System.String)">
            <summary>
            Determines if a section name exists in the source.
            </summary>
            <param name="name">The section name to find.</param>
            <returns><b>true</b> if the section exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to the section named <paramref name="sectionName"/> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler for the change event to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Removes a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the watched section.</param>
            <param name="handler">The handler for the change event to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.OnSourceChangedEvent(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.SourceChanged"/> event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource.SourceChanged">
            <summary>
            Raised when anything in the source changes.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.DictionaryConfigurationSource"/> does not report any
            configuration change events.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnterpriseLibraryContainer">
            <summary>
            Entry point for the container infrastructure for Enterprise Library.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnterpriseLibraryContainer.ConfigureContainer(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerConfigurator,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Read the current Enterprise Library configuration in the given <paramref name="configSource"/>
            and supply the corresponding type information to the <paramref name="configurator"/>.
            </summary>
            <param name="configurator"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerConfigurator"/> object used to consume the configuration
            information.</param>
            <param name="configSource">Configuration information.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnterpriseLibraryContainer.ConfigureContainer(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerConfigurator,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Read the current Enterprise Library configuration in the given <paramref name="configSource"/>
            and supply the corresponding type information to the <paramref name="configurator"/>.
            </summary>
            <param name="locator"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> used to identify what information
            to pull from the configuration file.</param>
            <param name="configurator"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerConfigurator"/> object used to consume the configuration
            information.</param>
            <param name="configSource">Configuration information.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnterpriseLibraryContainer.CreateDefaultContainer">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that has been configured
            with the information in the default <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> object.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnterpriseLibraryContainer.CreateDefaultContainer(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that has been configured
            with the information in the given <paramref name="configurationSource"/>.
            </summary>
            <param name="configurationSource"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing Enterprise Library
            configuration information.</param>
            <returns>The <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> object.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnterpriseLibraryContainer.Current">
            <summary>
            Get or set the current container used to resolve Entlib objects (for use by the
            various static factories).
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnumConverterWithExclusiveStandardValues`1">
            <summary>
            Type converter used to work around enums with enums wrongly marked as "flags".
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnumConverterWithExclusiveStandardValues`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnumConverterWithExclusiveStandardValues`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnumConverterWithExclusiveStandardValues`1.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates where the standard values are exclusive.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement"/> class with a default name and an empty path.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement"/> class with a name and an path.
            </summary>
            <param name="name">The instance name.</param>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/> configured with the receiver's settings.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.CreateDesignSource(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource)">
            <summary>
             Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource"/> configured based on this configuration element.
            </summary>
            <returns>Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource"/> or null if this source does not have design-time support.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSourceElement.FilePath">
            <summary>
            Gets or sets the file path. This is a required field.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureTypeRegistrations">
            <summary>
            Fluent interface that allows to add <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instances.
            </summary>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureTypeRegistrations.AddTypeRegistrationsProviderNamed(System.String)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instance to configuration source builder. <br/>
            </summary>
            <param name="typeRegistrationsProviderName">The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instance.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureTypeRegistration">
            <summary>
            Fluent interface used to configure a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instance.
            </summary>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureTypeRegistration.ForType``1">
            <summary>
            Specifies the type of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instance that should be used to retrieve type registrations.
            </summary>
            <typeparam name="TTypeRegistrationsProvider">The type of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instance that should be used to retrieve type registrations.</typeparam>
            <returns>Fluent interface that allows to add more type registration providers.</returns>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureTypeRegistration.ForType(System.Type)">
            <summary>
            Specifies the type of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instance that should be used to retrieve type registrations.
            </summary>
            <param name="typeRegistrationProvider">The type of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instance that should be used to retrieve type registrations.</param>
            <returns>Fluent interface that allows to add more type registration providers.</returns>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IConfigureTypeRegistration.ForSection(System.String)">
            <summary>
            Specifies the name of the configuration section that implements <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>. <br/>
            </summary>
            <param name="sectionName">The name of the configuration section that implements <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>. </param>
            <returns>Fluent interface that allows to add more type registration providers.</returns>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderConfigurationSourceBuilderExtension">
            <summary>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder"/> extensions to support creation of type registration provider settings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderConfigurationSourceBuilderExtension.ConfigureTypeRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder)">
            <summary>
            Main entry point to configure a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection"/> section.
            </summary>
            <param name="configurationSourceBuilder">The builder interface to extend.</param>
            <returns>A fluent interface that allows to add <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instances.</returns>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderConfigurationSourceBuilderExtension.ConfigureEmptyTypeRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder)">
            <summary>
            Main entry point to configure a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection"/> section with no 
            default type registrations.
            </summary>
            <param name="configurationSourceBuilder">The builder interface to extend.</param>
            <returns>A fluent interface that allows to add <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> instances.</returns>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.GenericEnumeratorWrapper`1">
            <devdoc>
            Represents a genereic enumerator for the NamedElementCollection.
            </devdoc>	
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler">
            <summary>
            Implements hierarchical merge behavior to <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> implementations.<br/>
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceHandler"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler"/>.
            </summary>
            <param name="localSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> instance that should be extended.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler"/>.
            </summary>
            <param name="localSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> instance that should be extended.</param>
            <param name="parentSource">An <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> instance the <paramref name="localSource"/> should be merged with.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler.Initialize">
            <summary>
            Performs intialization logic for this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler.DoRefresh">
            <summary>
            Performs re-intialization logic for this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.HierarchicalConfigurationSourceHandler.DoCheckGetSection(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Checks whether the result of a call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/> should be merged.<br/>
            If the call should be merged, performs the merge behavior and returns the resulting <see cref="T:System.Configuration.ConfigurationSection"/> intance.<br/>
            If the call should not be merged returns <paramref name="configurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section that was retrieved from configuration.</param>
            <param name="configurationSection">The section that was retrieved from configuration.</param>
            <returns>The resulting <see cref="T:System.Configuration.ConfigurationSection"/> instance.</returns>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.GetSection(System.String)"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement">
            <summary>
            Interface used to implement custom clone behavior for a <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSectionCloner"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ICloneableConfigurationElement.CreateFullClone">
            <summary>
            Creates a deep clone of the current <see cref="T:System.Configuration.ConfigurationElement"/> instance.
            </summary>
            <returns>
            A deep clone of the current <see cref="T:System.Configuration.ConfigurationElement"/> instance.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory">
            <summary>
            Represents a category on an ADM template file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory"/> class.
            </summary>
            <param name="categoryName">
            The categor name.
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory.Categories">
            <summary>
            Gest the list of sub categories.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory.Policies">
            <summary>
            Gets the list of policies in a category.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart">
            <summary>
            Represents a CHECKBOX part on an ADM template.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart">
            <summary>
            Represents a part in an ADM template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.PartStartTemplate">
            <summary>
            The part start template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.PartEndTemplate">
            <summary>
            The part end template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.ValueNameTemplate">
            <summary>
            The part value name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.KeyNameTemplate">
            <summary>
            The part key name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart"/> class.
            </summary>
            <param name="partName">The name for the part.</param>
            <param name="keyName">The registry key for part, or <see langword="null"/> 
            if no key name is required for the part.</param>
            <param name="valueName">The name for the registry value for the part.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.Write(System.IO.TextWriter)">
            <summary>
            Writes the part the <paramref name="writer"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.IO.TextWriter"/> to write.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.KeyName">
            <summary>
            Gets the registry key for the part, or <see langword="null"/> if no key name is required for the part.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.PartName">
            <summary>
            Gets the name for the part.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.ValueName">
            <summary>
            Gets the name for the registry value for the part.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.CheckedByDefault">
            <summary>
            Gets the indication of whether the checkbox should be checked by default.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.ValueForOn">
            <summary>
            Gets the indication of whether a value for the checked state should be added.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.ValueForOff">
            <summary>
            Gets the indication of whether a value for the unchecked state should be added.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCheckboxPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmComboBoxPart">
            <summary>
            Represents a COMBOBOX part on an ADM template.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart">
            <summary>
            Represents an EDITTEXT part on an ADM template.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart"/> class.
            </summary>
            <param name="partName">The name for the part.</param>
            <param name="keyName">The registry key for part, or <see langword="null"/> 
            if no key name is required for the part.</param>
            <param name="valueName">The name for the registry value for the part.</param>
            <param name="defaultValue">The default value for the part, or <see langword="null"/> 
            if no default value is available.</param>
            <param name="maxlen">The maximum length for the part's value.</param>
            <param name="required">The indication of whether values for the part are required.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.DefaultValue">
            <summary>
            Gets the default value for the part, or <see langword="null"/> 
            if no default value is available.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.Maxlen">
            <summary>
            Gets the maximum length for the part's value.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.Required">
            <summary>
            Gets the indication of whether values for the part are required.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmEditTextPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmComboBoxPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmComboBoxPart.Suggestions">
            <summary>
            Gets the list of suggested values for the part.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmComboBoxPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent">
            <summary>
            Represents the contents of an ADM template file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent.AddCategory(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmCategory)">
            <summary>
            Add a category to the content
            </summary>
            <param name="category">The category to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent.Write(System.IO.TextWriter)">
            <summary>
            Writes the contents represented by the receiver to <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the contents should be written.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent.Categories">
            <summary>
            Gets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder">
            <summary>
            Represents the process of building the contents of an ADM file.
            </summary>
            <remarks>
            During the building process categories and policies are started and ended: several levels of nested categories
            can be started, but only one level of policies are allowed. When a category or policy is started, it becomes the current
            until it is ended.
            Parts are added to the current policy; parts are not started and stopped.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AvailableValueName">
            <summary>
            String representing the name of the registry value that represents the availability of a configuration element.
            </summary>
            <remarks>
            The value names for policies are set to this name.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.NoneListItem">
            <summary>
            String representing the value for a <see langword="null"/> value in a drop down list. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> class.
            </summary>
            <param name="content">The content that will be built.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddCheckboxPart(System.String,System.String,System.Boolean)">
            <summary>
            Adds a checkbox part to the current policy, with values for "on" and "off" states.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="checkedByDefault">Whether the new part should be checked by default.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddCheckboxPart(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a checkbox part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="checkedByDefault">Whether the new part should be checked by default.</param>
            <param name="valueForOn">Whether a value should be set for the checked state.</param>
            <param name="valueForOff">Whether a value should be set for the unchecked state.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddCheckboxPart(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a checkbox part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="checkedByDefault">Whether the new part should be checked by default.</param>
            <param name="valueForOn">Whether a value should be set for the checked state.</param>
            <param name="valueForOff">Whether a value should be set for the unchecked state.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddComboBoxPart(System.String,System.String,System.String,System.Int32,System.Boolean,System.String[])">
            <summary>
            Adds a combo box part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <param name="maxlen">The max length for the new part's values</param>
            <param name="required">Whether values for the new part are mandatory.</param>
            <param name="suggestions">The suggested values for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddComboBoxPart(System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.String[])">
            <summary>
            Adds a combo box part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <param name="maxlen">The max length for the new part's values</param>
            <param name="required">Whether values for the new part are mandatory.</param>
            <param name="suggestions">The suggested values for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPart(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem},System.String)">
            <summary>
            Adds a new drop down list part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="items">The list of items to include in the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPart(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem},System.String)">
            <summary>
            Adds a new drop down list part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="items">The list of items to include in the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPartForEnumeration``1(System.String,System.String,``0)">
            <summary>
            Adds a new drop down list part to the current policy with items representing an enumeration's values.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPartForEnumeration``1(System.String,System.String,System.String,``0)">
            <summary>
            Adds a new drop down list part to the current policy with items representing an enumeration's values.
            </summary>
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPartForNamedElementCollection``1(System.String,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},System.String,System.Boolean)">
            <summary>
            Adds a new drop down list part to the current policy with items representing the elements in a configuration 
            elements collection.
            </summary>
            <typeparam name="T">The base class for the configuration elements in the collection.</typeparam>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="elements">The collection of configuration elements.</param>
            <param name="defaultElementName">The name for the default element, or <see langword="null"/> if there is no such default name.</param>
            <param name="allowNone">Whether an additional entry to represent that no element is selected should be added.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
            <devdoc>
            FxCop message CA1004 is supressed because it seems like the rule does not detect the
            existing 'elements' method parameter that uses the generic parameter T.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddDropDownListPartForNamedElementCollection``1(System.String,System.String,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedElementCollection{``0},System.String,System.Boolean)">
            <summary>
            Adds a new drop down list part to the current policy with items representing the elements in a configuration 
            elements collection.
            </summary>
            <typeparam name="T">The base class for the configuration elements in the collection.</typeparam>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="elements">The collection of configuration elements.</param>
            <param name="defaultElementName">The name for the default element, or <see langword="null"/> if there is no such default name.</param>
            <param name="allowNone">Whether an additional entry to represent that no element is selected should be added.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
            <devdoc>
            FxCop message CA1004 is supressed because it seems like the rule does not detect the
            existing 'elements' method parameter that uses the generic parameter T.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddEditTextPart(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a new edit text part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <param name="maxlen">The max length for the new part's values</param>
            <param name="required">Whether values for the new part are mandatory.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddEditTextPart(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a new edit text part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <param name="maxlen">The max length for the new part's values</param>
            <param name="required">Whether values for the new part are mandatory.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddNumericPart(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a new numeric part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddNumericPart(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a new numeric part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/> if there is no such default value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddNumericPart(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Adds a new numeric part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <param name="keyName">The registry key for the part, to override its policy's key.</param>
            <param name="valueName">The value name for the new part.</param>
            <param name="defaultValue">The default value for the new part, or <see langword="null"/>
            if there is no such default value.</param>
            <param name="minValue">The minimum value, or <see langword="null"/>
            if there is no minimum value.</param>
            <param name="maxValue">The maximum value, or <see langword="null"/>
            if there is no maximum value.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddPart(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart)">
            <summary>
            Add a part to the builder.
            </summary>
            <param name="part">
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPart"/> to add.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.AddTextPart(System.String)">
            <summary>
            Adds a new text part to the current policy.
            </summary>
            <param name="partName">The name for the new part.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.EndCategory">
            <summary>
            Ends the current category.
            </summary>
            <remarks>
            If the current category has a parent category, the parent category is made the current category.
            </remarks>
            <exception cref="T:System.InvalidOperationException">when there is no current category.</exception>
            <exception cref="T:System.InvalidOperationException">when there is an unfinished policy being built.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.EndPolicy">
            <summary>
            Ends the current policy.
            </summary>
            <exception cref="T:System.InvalidOperationException">when there is no current policy.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.GetContent">
            <summary>
            Gets the content for the builder.
            </summary>
            <returns>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContent"/> object.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.StartCategory(System.String)">
            <summary>
            Starts a new category in the built content and makes it the current category.
            </summary>
            <param name="categoryName">The name for the new category</param>
            <remarks>
            The category is created as a child of the current category, or as a top level category if there is
            no such current category.
            </remarks>
            <exception cref="T:System.InvalidOperationException">when there is an unfinished policy being built.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder.StartPolicy(System.String,System.String)">
            <summary>
            Starts a new policy on the current category.
            </summary>
            <param name="policyName">The name for the new policy.</param>
            <param name="policyKey">The registry key for the new policy.</param>
            <exception cref="T:System.InvalidOperationException">when there is no current category.</exception>
            <exception cref="T:System.InvalidOperationException">when there is an unfinished policy being built.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem">
            <summary>
            Represents an item in a drop down list.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem"/> class.
            </summary>
            <param name="name">The item name.</param>
            <param name="value">The item value.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem.Name">
            <summary>
            Gets the name of the item.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem.Value">
            <summary>
            Gets the value of the item.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart">
            <summary>
            Represents a DROPDOWNLIST part on an ADM template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.DropDownListTemplate">
            <summary>
            The drop down list template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.ItemListStartTemplate">
            <summary>
            The item list start template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.ListItemTemplate">
            <summary>
            The list item template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.DefaultListItemTemplate">
            <summary>
            The default list item template.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.ItemListEndTemplate">
            <summary>
            The end list template.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListItem},System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart"/> class.
            </summary>
            <param name="partName">The part name.</param>
            <param name="keyName">The key name.</param>
            <param name="valueName">The value name.</param>
            <param name="items">The items.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.DefaultValue">
            <summary>
            Gets the default value for the part.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.Items">
            <summary>
            Gets the list of name/value pairs for the part.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmDropDownListPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdministrativeTemplateGenerator">
            <summary>
            Encapsulates the process to generate the ADM template contents to represent the configuration 
            information contained in a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>, delegating to registered
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> instances the generation of the
            specific contents for each section.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdministrativeTemplateGenerator.GenerateAdministrativeTemplateContent(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider})">
            <summary>
            Generates the ADM template contents that represent the configuration information in 
            <paramref name="configurationSource"/> 
            </summary>
            <param name="configurationSource">The configuration source holding the configuration sections.</param>
            <param name="applicationName">The ApplicationName to be used when generating the ADM policy keys.</param>
            <param name="manageabilityProviders">The mapping from section names to the
            <returns>The generated content.</returns>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> instances that generate the ADM contents.</param>
            <remarks>Both MACHINE and USER policies are generated.</remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart">
            <summary>
            Represents a NUMERIC part in an ADM template.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.WritePart(System.IO.TextWriter)">
            <summary>
            Writes the text representing the part to the <paramref name="writer"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to where the text for the part should be written to.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.DefaultValue">
            <summary>
            Gets the default value for the part, or <see langword="null"/> 
            if no default value is available.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.MaxValue">
            <summary>
            Gets the maximum value for the part, or <see langword="null"/> 
            if no maximum value is available.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.MinValue">
            <summary>
            Gets the minimum value for the part, or <see langword="null"/> 
            if no minimum value is available.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmNumericPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy">
            <summary>
            Represents a policy in an ADM template.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy.KeyName">
            <summary>
            Gets the registry key for the policy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy.Parts">
            <summary>
            Gets the parts for the policy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy.Name">
            <summary>
            Gets the name for the policy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmPolicy.ValueName">
            <summary>
            Gets the registry value name for the policy, or <see langword="null"/> if no value name is required for the policy.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmTextPart">
            <summary>
            Represents a TEXT part in an ADM template.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmTextPart.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmTextPart"/> class.
            </summary>
            <param name="partName">
            The name of the part.
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmTextPart.PartTypeTemplate">
            <summary>
            Gest the template representing the type of the part.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator">
            <summary>
            Represents a coordinator for configuration change notifications.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Add a section handler for a section.
            </summary>
            <param name="sectionName">
            The name of the section.
            </param>
            <param name="handler">
            The handler to add.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator.NotifyUpdatedSections(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Notify updated configuration sections.
            </summary>
            <param name="sectionsToNotify">
            The name of the sections to notify.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Remove a section change handler.
            </summary>
            <param name="sectionName">
            The section to remove the handler.
            </param>
            <param name="handler">
            The handler to remove.
            </param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator">
            <summary>
            Manages the configuration file watchers for a collection of configuration sections.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.MainConfigurationFileSource">
            <summary>
            The main configuration file source.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator"/> class.
            </summary>
            <param name="mainConfigurationFileName">The main configuration file.</param>
            <param name="refresh">true to refresh configuration; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.IsWatchingConfigSource(System.String)">
            <summary>
             Determines if the configuration source is being watched.
            </summary>
            <param name="configSource">
             The configuration source.
             </param>
            <returns>
             true if the source is being watched; otherwise, false.
             </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.OnConfigurationChanged(System.Object,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.ConfigurationChanged"/> event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.RemoveWatcherForConfigSource(System.String)">
            <summary>
            Removes a watcher for the configuration source.
            </summary>
            <param name="configSource">
            The source to remove the watcher.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.SetWatcherForConfigSource(System.String)">
            <summary>
            Sets a watcher for a configuration source.
            </summary>
            <param name="configSource">
            The configuration source to watch.
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.WatchedConfigSources">
            <summary>
            Gets a collection of watch configuration sources.
            </summary>
            <value>
            A collection of watch configuration sources.
            </value>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator.ConfigurationChanged">
            <summary>
            Event to notify when configuration changes.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute">
            <summary>
            Specifies which <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> must be used to provide manageability
            for instances a given <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> subclass.
            </summary>
            <remarks>
            Manageability providers for configuration elements are registered both to the configuration element type 
            and the manageability provider for the configuration section where the configuration element resides.
            The attribute is bound to assemblies.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute.#ctor(System.Type,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute"/> class.
            </summary>
            <param name="manageabilityProviderType">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type.</param>
            <param name="targetType">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> type.
            </param>
            <param name="sectionManageabilityProviderType">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> type.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute.ManageabilityProviderType">
            <summary>
            Gets the registered <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute.TargetType">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> type 
            for which the registered <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type provides manageability.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute.SectionManageabilityProviderType">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> registered to manage the 
            section where the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> 
            instances managed by the registered <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type reside.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor">
            <summary>
            Represents a configuration accessor for system configuration (.NET configuration).
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor">
            <summary>
            Defines an accessor for configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor.GetSection(System.String)">
            <summary>
            Get a configuration section based on name.
            </summary>
            <param name="sectionName">The name of the configuration section.</param>
            <returns>The <see cref="T:System.Configuration.ConfigurationSection"/> for the name.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor.RemoveSection(System.String)">
            <summary>
            Remove a configuration section.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor.GetRequestedSectionNames">
            <summary>
            Gets the section names for the requested configuration.
            </summary>
            <returns>
            A collection of configuration names.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor.#ctor(System.Configuration.Configuration)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor"/> with the configuration to access.
            </summary>
            <param name="configuration">
            The configuration to access.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor.GetRequestedSectionNames">
            <summary>
            Gets the section names for the requested configuration.
            </summary>
            <returns>
            A collection of configuration names.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor.GetSection(System.String)">
            <summary>
            Get a configuration section based on name.
            </summary>
            <param name="sectionName">The name of the configuration section.</param>
            <returns>The <see cref="T:System.Configuration.ConfigurationSection"/> for the name.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationInstanceConfigurationAccessor.RemoveSection(System.String)">
            <summary>
            Remove a configuration section.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute">
            <summary>
            Specifies which <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> must be used to provide manageability
            for a configuration section.
            </summary>
            <remarks>
            Manageability providers for configuration sections are registered to configuration section name.
            The attribute is bound to assemblies.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProviderAttribute"/> class.
            </summary>
            <param name="sectionName">The name of the section that needs manageability.</param>
            <param name="manageabilityProviderType">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> type.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute.SectionName">
            <summary>
            Gets the name of the <see cref="T:System.Configuration.ConfigurationSection"/> for which the registered 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type provides manageability.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProviderAttribute.ManageabilityProviderType">
            <summary>
            Gets the registered <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData.#ctor(System.String,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData"/> class.
            </summary>
            <param name="name">The name of the configuration element.</param>
            <param name="providerType">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> type.</param>
            <param name="targetType">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> type that is managed by the provider type.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData.TargetType">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement"/> type that is managed by the provider type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData"/> class.
            </summary>
            <param name="sectionName">The name for the configuration section that is managed by the provider type.</param>
            <param name="providerType">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> type.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData.ManageabilityProviders">
            <summary>
            Gets the collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData"/> that represent
            the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> instances that the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> instance represented by the receiver might require
            to provide manageability to configuration elements.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageabilityProviderBuilder">
            <summary>
            Builder for manageability configuration providers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageabilityProviderBuilder.CreateConfigurationElementManageabilityProvider(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationElementManageabilityProviderData)">
            <summary>
            Create a manageability configuration provider.
            </summary>
            <param name="manageabilityProviderData">The provdier data.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider"/> object.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageabilityProviderBuilder.CreateConfigurationSectionManageabilityProvider(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ConfigurationSectionManageabilityProviderData)">
            <summary>
            Create a manageability configuration provider.
            </summary>
            <param name="manageabilityProviderData">The provdier data.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> object.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.MinimumApplicationNameLength">
            <summary>
            Represents the minimum application name length allowed.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.MaximumApplicationNameLength">
            <summary>
            Represents the maximumapplication name length allowed.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement"/> class.
            </summary>
            <param name="name">The instance name.</param>
            <param name="filePath">The path to the configuration file.</param>
            <param name="applicationName">The name that identifies the application consuming the configuration information.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement"/> class.
            </summary>
            <param name="name">The instance name.</param>
            <param name="filePath">The path to the configuration file.</param>
            <param name="applicationName">The name that identifies the application consuming the configuration information.</param>
            <param name="enableGroupPolicies"><see langword="true"/> if Group Policy overrides must be appliedby the represented 
            configuration source; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/> configured with the receiver's settings.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Gets a value indicating whether an unknown attribute is encountered during deserialization.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.CreateDesignSource(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource)">
            <summary>
             Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource"/> configured based on this configuration element.
            </summary>
            <returns>Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Design.IDesignConfigurationSource"/> or null if this source does not have design-time support.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.ApplicationName">
            <summary>
            Gets or sets the application. This is a required field.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.EnableGroupPolicies">
            <summary>
            Gets or sets the value for GP enablement.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Configuration.ManageableConfigurationSourceElement.ConfigurationManageabilityProviders">
            <summary>
            Gets the collection of registered <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> types
            necessary to provide manageability by the represented configuration source.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration">
            <summary>
            Represents a Group Policy notification registration to watch Group Policy notifications.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration.MachinePolicyEvent">
            <summary>
            Gets the machine policy event.
            </summary>
            <value>
            An <see cref="T:System.Threading.AutoResetEvent"/> for the machine policy.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration.UserPolicyEvent">
            <summary>
            Gets the user policy event.
            </summary>
            <value>
            An <see cref="T:System.Threading.AutoResetEvent"/> for the user policy.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistrationBuilder">
            <summary>
            Represents a builder for Group Policy notification registration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistrationBuilder.CreateRegistration">
            <summary>
            Creates the registration.
            </summary>
            <returns>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistration"/> object.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher">
            <summary>
            The policy watcher can be started and stopped many times. To deal with this, when a watcher thread is started
            it is given an 'exit' event that will be signaled when the thread needs to be stopped. Once the thread is started
            it own the exit event, and will release it when it terminates. More than one watching thread may be active at the
            same time, having different exit events, if the old watching thread doesn't get processing time before the new 
            thread is started; when the old thread gets to run it will consume the signaled exit event and finish.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher">
            <summary>
            Defines a watcher for Group Policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher.StartWatching">
            <summary>
            Starts watching Group Policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher.StopWatching">
            <summary>
            Stops watching Group Policy.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher.GroupPolicyUpdated">
            <summary>
            The event to update the policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyNotificationRegistrationBuilder)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher"/> class with a registration builder.
            </summary>
            <param name="registrationBuilder">
            The builder used to create the registration for Group Policy.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.Finalize">
            <summary>
            Allows an <see cref="T:System.Object"></see> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object"></see> is reclaimed by garbage collection.
            </summary>\
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.StartWatching">
            <summary>
            Starts watching Group Policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.StopWatching">
            <summary>
            Stops watching Group Policy.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyWatcher.GroupPolicyUpdated">
            <summary>
            The event to update the policy.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.GroupPolicyUpdateDelegate">
            <summary>
            The delegate used to update the Group Policy based on machine.
            </summary>
            <param name="machine">The machine where Group Policy is updated.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper">
            <summary>
            Defines a helper for manageability configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper.UpdateConfigurationManageability(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor)">
            <summary>
            Updates configuration management from the given configuration.
            </summary>
            <param name="configurationAccessor">
            The accessor for the configuration.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper.UpdateConfigurationSectionManageability(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor,System.String)">
            <summary>
            Updates configuration management from the given configuration in the given section.
            </summary>
            <param name="configurationAccessor">
            The accessor for the configuration.
            </param>
            <param name="sectionName">
            The section to update.
            </param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey">
            <summary>
            Represents a key for manageability configuration implementation.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey.ApplicationName">
            <summary>
            Gets or sets the application name.
            </summary>
            <value>
            The application name.
            </value>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey.EnableGroupPolicies">
            <summary>
            Gets or sets weather to enable Group Policies.
            </summary>
            <value>
            true to enable Group Policies; otherwise false.
            </value>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey.FileName">
            <summary>
            Gets or sets the configuration file name.
            </summary>
            <value>
            The configuration file name.
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey"/> struct.
            </summary>
            <param name="fileName">The configuration file name.</param>
            <param name="applicationName">The application name.</param>
            <param name="enableGroupPolicies">true to enable Group Policy; otherwise, false.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKeyComparer">
            <summary>
            A comparer for an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKeyComparer.Equals(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            
            <param name="y">The second object of type T to compare.</param>
            <param name="x">The first object of type T to compare.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKeyComparer.GetHashCode(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ImplementationKey)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            
            <returns>
            A hash code for the specified object.
            </returns>
            
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Installer">
            <summary>
            Installer for the WMI objects defined in the assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller">
            <summary>
            This member supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Provides the installer for the Core library, installing WMI Events and event log sources defined for this library.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller.#ctor">
            <summary>
            Initializes the installer.
            This member supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.CommonWmiInstaller.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider">
            <summary>
            Represents a instrumentation configuration section provider.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.EventLoggingEnabledPropertyName">
            <summary>
            The name of the property to determine if event logging is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.PerformanceCountersEnabledPropertyName">
            <summary>
            The name of the property to determine if performance counters is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.#ctor(System.Collections.Generic.IDictionary{System.Type,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationElementManageabilityProvider})">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider"/> class.
            </summary>
            <param name="subProviders">The sub providers.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.AddAdministrativeTemplateDirectives(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder,Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,System.String)">
            <summary>
            Adds the ADM instructions that describe the policies that can be used to override the configuration
            information represented by a configuration section.
            </summary>
            <param name="contentBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Adm.AdmContentBuilder"/> to which the Adm instructions are to be appended.</param>
            <param name="configurationSection">The configuration section instance.</param>
            <param name="configurationSource">The configuration source from where to get additional configuration
            information, if necessary.</param>
            <param name="sectionKey">The root key for the section's policies.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.OverrideWithGroupPoliciesForConfigurationElements(Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection,System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s configuration elements' properties 
            with the Group Policy values from the registry, if any.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="machineKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the machine level, or <see langword="null"/> 
            if there is no such registry key.</param>
            <param name="userKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides for the 
            configuration section at the user level, or <see langword="null"/> 
            if there is no such registry key.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.OverrideWithGroupPoliciesForConfigurationSection(Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey)">
            <summary>
            Overrides the <paramref name="configurationSection"/>'s properties with the Group Policy values from 
            the registry.
            </summary>
            <param name="configurationSection">The configuration section that must be managed.</param>
            <param name="policyKey">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey"/> which holds the Group Policy overrides.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.SectionCategoryName">
            <summary>
            Gets the name of the category that represents the whole configuration section.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.InstrumentationConfigurationSectionManageabilityProvider.SectionName">
            <summary>
            Gets the name of the managed configuration section.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryAccessor">
            <summary>
            Provides access to the registry.
            </summary>
            <remarks>
            This interface allows for unit testing without requiring access to the machine's registry.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryAccessor.CurrentUser">
            <summary>
            Gets registry key HKCU.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryAccessor.LocalMachine">
            <summary>
            Gets registry key HKLM.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey">
            <summary>
            Provides access to a registry key sub keys and values.
            </summary>
            <remarks>
            This interface allows for unit testing without requiring access to the machine's registry.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.Close">
            <summary>
            Closes the registry key.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetBoolValue(System.String)">
            <summary>
            Gets the Boolean value represented by the value for requested name in the registry key.
            </summary>
            <remarks>
            An integer value of 1 is considered <langword>true</langword>, any other 
            value is considered <langword>false</langword>.
            </remarks>
            <param name="valueName">The name of the value to get.</param>
            <returns>The Boolean value for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an integer representing a boolean.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetEnumValue``1(System.String)">
            <summary>
            Gets the enum value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The enum value of type  <typeparamref name="T"/> represented by the value
            for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an string, or it is a string value but it is not a 
            valid value name for enum type <typeparamref name="T"/>.</exception>
            <typeparam name="T">The enum type.</typeparam>
            <devdoc>
            FxCop message CA1004 is supressed because the T parameter is used to drive the
            type of the method return value, so it is not possible to provide a method
            parameter that enables generic parameter inference.
            </devdoc>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetIntValue(System.String)">
            <summary>
            Gets the integer value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The integer value for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an integer.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetStringValue(System.String)">
            <summary>
            Gets the string value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The string value for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not a string.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetTypeValue(System.String)">
            <summary>
            Gets the <see cref="T:System.Type"/> value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The instance of <see cref="T:System.Type"/> represented by the value for
            the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an string, or it is a string value but it is not a 
            valid type name.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.GetValueNames">
            <summary>
            Gets the names for the values.
            </summary>
            <returns>The value names.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.OpenSubKey(System.String)">
            <summary>
            Gets the sub key for the given key name.
            </summary>
            <param name="name">The name fo the key to get.</param>
            <returns>The sub key with the requested name if it exists; otherwise <see langword="null"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.IsPolicyKey">
            <summary>
            Gets the indication of whether the registry key represents a policy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryKey.Name">
            <summary>
            Gets the full name of the registry key.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder">
            <summary>
            Represents the logic to encode key/value pairs into a string of semicolon separated entries.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.AppendKeyValuePair(System.String,System.String)">
            <summary>
            Adds a key/value pair to the encoded string being built.
            </summary>
            <param name="key">The key of the pair.</param>
            <param name="value">The value of the pair.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.GetEncodedKeyValuePairs">
            <summary>
            Gets the encoded key/value pairs string built.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.EncodeKeyValuePair(System.String,System.String)">
            <summary>
            Returns a string representing a single encoded key/value pair.
            </summary>
            <param name="key">The key of the pair.</param>
            <param name="value">The value of the pair.</param>
            <returns>The encoded key/value pair.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder.EncodeKeyValuePair(System.String,System.String,System.Boolean)">
            <summary>
            Returns a string representing a single encoded key/value pair with semicolons escaped if
            appropriate.
            </summary>
            <param name="key">The key of the pair.</param>
            <param name="value">The value of the pair.</param>
            <param name="escapeSemicolons"><see langword="true"/> if semicolons should be escaped;
            otherwise <see langword="false"/>.</param>
            <returns>The encoded key/value pair.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairParser">
            <summary>
            Helper class to extract a key/value pair collection from an encoded string of semicolon
            separated key/value pairs.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairEncoder"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairParser.ExtractKeyValueEntries(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Extracts the key/value pairs encoded in <paramref name="attributes"/>,
            adding them to <paramref name="attributesDictionary"/>.
            </summary>
            <param name="attributes">The string where the key/value pairs are encoded.</param>
            <param name="attributesDictionary">The dictionary where the extracted key/value pairs should be added.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.KeyValuePairParser.DecodeKeyValuePair(System.String,System.String@,System.String@)">
            <summary>
            
            </summary>
            <param name="keyValue"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityExtensionsLogger">
            <summary>
            Provides logging services to the Enterprise Library Manageability Extensions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityExtensionsLogger.LogExceptionWhileOverriding(System.Exception)">
            <summary>
            Logs an error detected while overriding a configuration object with policy values.
            </summary>
            <param name="exception">The exception representing the error.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityExtensionsLogger.LogException(System.Exception,System.String)">
            <summary>
            Logs an error.
            </summary>
            <param name="exception">The exception representing the error.</param>
            <param name="title">The title that describes the error.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper">
            <summary>
            Represents a manageability configuration helper.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.#ctor(System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,System.String)">
            <summary>
             Initialize a new instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper"/> class.
            </summary>
            <param name="manageabilityProviders">The manageability propvodiers.</param>
            <param name="readGroupPolicies">true to read Group Policies; otherwise, false.</param>
            <param name="applicationName">The application name.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.#ctor(System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IRegistryAccessor,System.String)">
            <summary>
             Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper"/> class.
            </summary>
            <param name="manageabilityProviders">The manageability providers.</param>
            <param name="readGroupPolicies">true to read Group Policies; otherwise, false.</param>
            <param name="registryAccessor">A registry accessor.</param>
            <param name="applicationName">The application name.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.BuildSectionKeyName(System.String,System.String)">
            <summary>
            Builds the section key name.
            </summary>
            <param name="applicationName">
            The application name.
            </param>
            <param name="sectionName">
            The section name.
            </param>
            <returns>
            The section key name.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.UpdateConfigurationManageability(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor)">
            <summary>
            Updates configuration management from the given configuration.
            </summary>
            <param name="configurationAccessor">
            The accessor for the configuration.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.UpdateConfigurationSectionManageability(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IConfigurationAccessor,System.String)">
            <summary>
            Updates configuration management from the given configuration in the given section.
            </summary>
            <param name="configurationAccessor">
            The accessor for the configuration.
            </param>
            <param name="sectionName">
            The section to update.
            </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageabilityHelper.ManageabilityProviders">
            <summary>
            Gets the manageability providers.
            </summary>
            <value>
            The manageability providers.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource">
            <summary>
            Represents a configuration source that retrieves configuration information from an arbitrary file, overrides 
            the configuration information with values from the registry's Group Policy keys.
            </summary>
            <remarks>
            This configuration source uses a <see cref="T:System.Configuration.Configuration"/> object to deserialize configuration, so 
            the configuration file must be a valid .NET Framework configuration file.
            Multiple instances of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/> can be created with a given configuration; however 
            instances with the same configuration will share the same configuration objects.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileConfigurationSource"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/> class.
            </summary>
            <param name="configurationFilePath">The configuration file path. The path can be absolute or relative.</param>
            <param name="manageabilityProviders">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider"/> that will
            provide manageability for each configuration section.</param>
            <param name="readGroupPolicies"><see langword="true"/> if Group Policy overrides must be applied; otherwise, 
            <see langword="false"/>.</param>
            <param name="applicationName">The name of the running application. This name is used to look for policy overrides.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource"/> class with the implementation.
            </summary>
            <param name="implementation">
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> to use.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source.
            </summary>
            <remarks>
            This operation is not implemented.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to section <code>sectionName</code> are detected.
            This call should always be followed by a <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)"/>. Failure to remove change
            handlers will result in .NET resource leaks.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.GetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="sectionName">The name of the section to be retrieved.</param>
            <returns>The specified <see cref="T:System.Configuration.ConfigurationSection"/>, or <see langword="null"/>
            if a section by that name is not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.Remove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration and saves the configuration source.
            </summary>
            <remarks>
            This operation is not implemented.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Remove a handler to be called when changes to section <code>sectionName</code> are detected.
            This class should always follow a call to <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)"/>. Failure
            to call these methods in pairs will result in .NET resource leaks.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.ResetAllImplementations">
            <summary>
            Public for testing purposes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.Implementation">
            <summary>
            Gets the implementation for configuration source.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSource.SourceChanged">
            <summary>
            Event raised when any section in this configuration source has changed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation">
            <summary>
            Represents a manageable configuration source (like Group Policy).
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.#ctor(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> class.
            </summary>
            <param name="configurationFilePath">The path to the configuration file.</param>
            <param name="refresh">true to refresh configuration; otherwise, false.</param>
            <param name="manageabilityProviders">The providers used for managment.</param>
            <param name="readGroupPolicies">true to read Group Policy; otherwise, false.</param>
            <param name="applicationName">The name of the application.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator)">
            <summary>
            Initialize a new instance o the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> class.
            </summary>
            <param name="configurationFilePath">The configuration file path.</param>
            <param name="manageabilityHelper">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IManageabilityHelper"/> to use.</param>
            <param name="groupPolicyWatcher">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.IGroupPolicyWatcher"/> to use.</param>
            <param name="watcherCoordinator">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeWatcherCoordinator"/> to use.</param>
            <param name="notificationCoordinator">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationChangeNotificationCoordinator"/> to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a change handler for a section.
            </summary>
            <param name="sectionName">
            The section to add the handler.
            </param>
            <param name="handler">
            The handler to add.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.GetSection(System.String)">
            <summary>
             Get the configuration section.
            </summary>
            <param name="sectionName">The section name to get.</param>
            <returns>A <see cref="T:System.Configuration.ConfigurationSection"/> for the section name.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
             Removes a change handler from a section.
            </summary>
            <param name="sectionName">
             The section to remove the handler.
             </param>
            <param name="handler">
             The handler to remove.
             </param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation.ManageabilityHelper">
            <summary>
            Gets the manageability helper for the source.
            </summary>
            <value>
            The manageability helper for the source.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper">
            <summary>
            Manages the singleton <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> instance for a given 
            file name, application name and Group Policy enablement combination.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper.#ctor">
            <summary>
            Initialzie a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper.#ctor(System.Boolean)">
            <summary>
            Initialize a new instace of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper"/> class.
            </summary>
            <param name="refresh">
            true to support refreshing; otherwise, false.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper.Dispose">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceSingletonHelper.GetInstance(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ConfigurationSectionManageabilityProvider},System.Boolean,System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> for a configuration.
            </summary>
            <param name="configurationFilePath">The path to a configuration file.</param>
            <param name="manageabilityProviders">The list of managment providers.</param>
            <param name="readGroupPolicies">true to read Group Policies; otherwise, false.</param>
            <param name="applicationName">The name of the application.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ManageableConfigurationSourceImplementation"/> object.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ParseHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ParseHelper.ParseEnum``1(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="throwIfInvalid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ParseHelper.TryParseEnum``1(System.String,``0@)">
            <summary>
            Attempt to parse a string into the given Enum type,
            returning whether conversion was successful.
            </summary>
            <typeparam name="T">Enum type to convert to.</typeparam>
            <param name="value">String to convert.</param>
            <param name="result">Converted result if successful.</param>
            <returns>true if conversion was successful, false if it failed.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.ParseHelper.ParseType(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="throwIfInvalid"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ConfigurationElementNotInstrumentationConfigurationSection">
            <summary>
              查找类似 Expected an instance of InstrumentationConfigurationSection. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ConfigurationElementOfWrongType">
            <summary>
              查找类似 Expected and instance of &apos;{0}&apos; but got an instance of &apos;{1}&apos; instead. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.CustomProviderAttributesPartName">
            <summary>
              查找类似 Attributes 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.CustomProviderTypePartName">
            <summary>
              查找类似 Type 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmBuildingNoCurrentCategory">
            <summary>
              查找类似 A started category is required to perform the operation. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmBuildingNoCurrentPolicy">
            <summary>
              查找类似 A started policy is required to perform the operation. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmBuildingPolicyNotFinished">
            <summary>
              查找类似 A policy construction is in process. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmBuildingProcessNotFinished">
            <summary>
              查找类似 The built content is requested but there are outstanding categories being built. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmDefaultValueAboveMaxValue">
            <summary>
              查找类似 The default value is above the max value for part &apos;{0}&apos; on policy &apos;{1}&apos;: {2} versus {3}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmDefaultValueBelowMinValue">
            <summary>
              查找类似 The default value is below the min value for part &apos;{0}&apos; on policy &apos;{1}&apos;: {2} versus {3}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmDefaultValueLongerThanMaxlen">
            <summary>
              查找类似 The default value for part &apos;{0}&apos; on policy &apos;{1}&apos; is longer than the max length {2}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidCharactersInRegistryKey">
            <summary>
              查找类似 Registry key path contains invalid characters or is missing parts: &apos;{0}&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidDefaultValue">
            <summary>
              查找类似 The default value is invalid: &apos;{0}&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidMaxlen">
            <summary>
              查找类似 The max len of {2} is invalid on part &apos;{0}&apos; for policy &apos;{1}&apos;. The allowed values are 0-1024. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidName">
            <summary>
              查找类似 String &apos;{0}&apos; is not a valid name on an ADM template. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmInvalidSuggestion">
            <summary>
              查找类似 The suggestion is invalid: &apos;{0}&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmMinValueLargerThanMaxValue">
            <summary>
              查找类似 Min value is larger than max value for part &apos;{0}&apos; on policy &apos;{1}&apos;: {2} versus {3}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmNumericConstraintOutsideRange">
            <summary>
              查找类似 The numeric constraint &apos;{2}&apos; for part &apos;{0}&apos; on policy &apos;{1}&apos; is outside the allowed range. The valued values are 0-999999999.  的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmRegistryKeyPathSegmentTooLong">
            <summary>
              查找类似 Path segment over 255 chars in length for registry key: &apos;{0}&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionAdmRegistryValueNameTooLong">
            <summary>
              查找类似 Registry value name over 255 chars in length: &apos;{0}&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionApplicationNameTooLong">
            <summary>
              查找类似 The application name cannot be longer than 255 characters. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionArgumentEmpty">
            <summary>
              查找类似 The parameter is an empty string 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionCannotLockGroupPolicy">
            <summary>
              查找类似 Group policy processing could not be locked prior to reading the registry 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionConfigurationLoadFileNotFound">
            <summary>
              查找类似 The configuration file {0} could not be found. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionErrorOnCallbackForSectionUpdate">
            <summary>
              查找类似 Exception caught from callback for change on section &apos;{0}&apos; calling method &apos;{1}&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionErrorWhileOverriding">
            <summary>
              查找类似 An error was detected while a configuration element&apos;s properties were being overriden with policy values. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionMissingRegistryValue">
            <summary>
              查找类似 There is no value with name &apos;{1}&apos; on key &apos;{0}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionRegistryValueNotEnumValue">
            <summary>
              查找类似 The value for &apos;{1}&apos; on key &apos;{0}&apos; is not a valid value name for enum type &apos;{2}&apos;: &apos;{3}&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionRegistryValueNotTypeName">
            <summary>
              查找类似 The value for &apos;{1}&apos; on key &apos;{0}&apos; is not a valid assembly qualified type name: &apos;{2}&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionRegistryValueOfWrongType">
             <summary>
               查找类似 The value for &apos;{1}&apos; on key &apos;{0}&apos; is not of the correct type:
            Expected {2} but got {3} instead. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionStringNullOrEmpty">
            <summary>
              查找类似 The value can not be null or string or empty. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionUnexpectedErrorProcessingSection">
            <summary>
              查找类似 Unexpected error while processing section &apos;{0}&apos; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ExceptionUnexpectedType">
            <summary>
              查找类似 The expected type &apos;{0}&apos; was not provided. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.GroupPolicyWatcherThread">
            <summary>
              查找类似 Group policy notification thread 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.InstrumentationSectionCategoryName">
            <summary>
              查找类似 Instrumentation 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.InstrumentationSectionEventLoggingEnabledPartName">
            <summary>
              查找类似 Event logging enabled 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.InstrumentationSectionPerformanceCountersEnabledPartName">
            <summary>
              查找类似 Performance counters enabled 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.InstrumentationSectionPolicyName">
            <summary>
              查找类似 Specify settings for the instrumentation section 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ManageableConfigurationSourceName">
            <summary>
              查找类似 Manageable Configuration Source 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.ManageableConfigurationSourceUpdateNotAvailable">
            <summary>
              查找类似 Updates to configuration through the ManageableConfigurationSource are not supported. Use the FileConfigurationSource instead. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.Properties.Resources.NoneListItem">
            <summary>
              查找类似 None 的本地化字符串。
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">
            <summary>
            Represents an error that occurs while accessing the registry.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The inner exception reference.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase">
            <summary>
            Provides access to a registry key sub keys and values.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.PolicyValueName">
            <summary>
            The name of the policy value.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.Close">
            <summary>
            Closes the registry key.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.DoGetValue(System.String)">
            <summary>
            Gets an actual value from the registry.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The value from the registry, or <see langword="null"/> if
            there is no such value.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.DoOpenSubKey(System.String)">
            <summary>
            Gets the sub key for the given key name.
            </summary>
            <param name="name">The name fo the key to get.</param>
            <returns>The sub key with the requested name if it exists; otherwise <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetBoolValue(System.String)">
            <summary>
            Gets the Boolean value represented by the value for requested name in the registry key.
            </summary>
            <remarks>
            An integer value of 1 is considered <langword>true</langword>, any other 
            value is considered <langword>false</langword>.
            </remarks>
            <param name="valueName">The name of the value to get.</param>
            <returns>The Boolean value for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an integer representing a Boolean.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetEnumValue``1(System.String)">
            <summary>
            Gets the enum value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The enum value of type  <typeparamref name="T"/> represented by the value
            for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an string, or it is a string value but it is not a 
            valid value name for enum type <typeparamref name="T"/>.</exception>
            <typeparam name="T">The enum type.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetIntValue(System.String)">
            <summary>
            Gets the integer value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The integer value for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an integer.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetStringValue(System.String)">
            <summary>
            Gets the string value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The string value for the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not a string.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetTypeValue(System.String)">
            <summary>
            Gets the <see cref="T:System.Type"/> value for the given name.
            </summary>
            <param name="valueName">The name of the value to get.</param>
            <returns>The instance of <see cref="T:System.Type"/> represented by the value for
            the requested name in the registry key.</returns>
            <exception cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryAccessException">when there is no value for the given name,
            or the value exists but it is not an string, or it is a string value but it is not a 
            valid type name.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.GetValueNames">
            <summary>
            Gets the names for the values.
            </summary>
            <returns>The value names.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.OpenSubKey(System.String)">
            <summary>
            Gets the sub key for the given key name.
            </summary>
            <param name="name">The name fo the key to get.</param>
            <returns>The sub key with the requested name if it exists; otherwise <see langword="null"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="name"/>is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/>is not a valid name.</exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.IsPolicyKey">
            <summary>
            Gets the indication of whether the registry key represents a policy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Manageability.RegistryKeyBase.Name">
            <summary>
            Gets the full name of the registry key.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.MergeableConfigurationCollectionFactory">
            <summary>
             Factory for creating <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.MergeableConfigurationCollectionFactory.GetCreateMergeableCollection(System.Configuration.ConfigurationElementCollection)">
            <summary>
             Creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IMergeableConfigurationElementCollection"/> based on a ConfigurationElementCollection type.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource">
            <summary>
            Represents a null configuration source that always returns null for a section.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.GetSection(System.String)">
            <summary>
            Returns null for the section.
            </summary>
            <param name="sectionName">The section name to retrieve.</param>
            <returns>Always <see langword="null"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Null implementation of <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection)"/> that 
            ignores the request.
            </summary>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.Remove(System.String)">
            <summary>
            Null implementation of <see cref="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource.Remove(System.String)"/> that 
            ignores the request.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.AddSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Adds a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.RemoveSectionChangeHandler(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationChangedEventHandler)">
            <summary>
            Remove a handler to be called when changes to section <code>sectionName</code> are detected.
            </summary>
            <param name="sectionName">The name of the section to watch for.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NullConfigurationSource.SourceChanged">
            <summary>
            Event raised when configuration source contents have changed.
            </summary>
            <remarks>This class never raises this event.</remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.RedirectedSectionElement">
            <summary>
            Configuration element for a redirected section.<br/>
            The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.NamedConfigurationElement.Name"/> property is used to identify the redireced section, based on its section name.<br/>
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceSection"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.RedirectedSectionElement.SourceName">
            <summary>
            Gets the name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement"/> which contains the configuration section.
            </summary>
            <value>
            The name of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceElement"/> which contains the configuration section.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SectionChangedEventArgs`1">
            <summary>
            Event argument passed when a configuration section signals that it has changed.
            </summary>
            <typeparam name="TSection">Type of the configuration section class that changed.
            </typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SectionChangedEventArgs`1.#ctor(`0,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Create an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SectionChangedEventArgs`1"/> class
            that wraps the given section.
            </summary>
            <param name="section">Configuration section that changed.</param>
            <param name="container"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that's been configured with
            the contents of the <paramref name="section"/>.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SectionChangedEventArgs`1.Section">
            <summary>
            The configuration section that changed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SectionChangedEventArgs`1.Container">
            <summary>
            Container that can be used to resolve newly configured objects.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher">
            <summary>
            <para>Represents an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher"/> that watches a file.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher">
            <summary>
            <para>Represents an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher"/> that watches a file.</para>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher">
            <summary>
            <para>Provides a way to watch for changes to configuration in storage.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.StartWatching">
            <summary>
            When implemented by a subclass, starts the object watching for configuration changes
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.StopWatching">
            <summary>
            When implemented by a subclass, stops the object from watching for configuration changes
            </summary>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.ConfigurationChanged">
            <summary>
            Event raised when the underlying persistence mechanism for configuration notices that
            the persistent representation of configuration information has changed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.IConfigurationChangeWatcher.SectionName">
            <summary>
            When implemented by a subclass, returns the section name that is being watched.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.SetDefaultPollDelayInMilliseconds(System.Int32)">
            <summary>
            Sets the default poll delay.
            </summary>
            <param name="newDefaultPollDelayInMilliseconds">The new default poll.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.ResetDefaultPollDelay">
            <summary>
            Reset the default to 15000 millisecond.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.SetPollDelayInMilliseconds(System.Int32)">
            <summary>
            Sets the poll delay in milliseconds.
            </summary>
            <param name="newDelayInMilliseconds">
            The poll delay in milliseconds.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.#ctor">
            <summary>
            <para>Initialize a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher"/> class</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.Finalize">
            <summary>
            <para>
            Allows an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> to attempt to free 
            resources and perform other cleanup operations before the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> is reclaimed by garbage collection.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.StartWatching">
            <summary>
            <para>Starts watching the configuration file.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.StopWatching">
            <summary>
            <para>Stops watching the configuration file.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.Dispose">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> and optionally releases the managed resources.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.Disposing(System.Boolean)">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> and optionally releases the managed resources.</para>
            </summary>
            <param name="isDisposing">
            <para><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.OnConfigurationChanged">
            <summary>
            <para>Raises the <see cref="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.ConfigurationChanged"/> event.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.GetCurrentLastWriteTime">
            <summary>
            <para>Returns the <see cref="T:System.DateTime"/> of the last change of the information watched</para>
            </summary>
            <returns>The <see cref="T:System.DateTime"/> of the last modificaiton, or <code>DateTime.MinValue</code> if the information can't be retrieved</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.BuildEventData">
            <summary>
            Builds the change event data, in a suitable way for the specific watcher implementation
            </summary>
            <returns>The change event information</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.GetEventSourceName">
            <summary>
            Returns the source name to use when logging events
            </summary>
            <returns>The event source name</returns>
        </member>
        <member name="E:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.ConfigurationChanged">
            <summary>
            Event raised when the underlying persistence mechanism for configuration notices that
            the persistent representation of configuration information has changed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeWatcher.SectionName">
            <summary>
            <para>Gets the name of the configuration section being watched.</para>
            </summary>
            <value>
            <para>The name of the configuration section being watched.</para>
            </value>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> class with the path to the configuration file and the name of the section</para>
            </summary>
            <param name="configFilePath">
            <para>The full path to the configuration file.</para>
            </param>
            <param name="configurationSectionName">
            <para>The name of the configuration section to watch.</para>
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.Finalize">
            <summary>
            <para>Allows an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher"/> is reclaimed by garbage collection.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.GetCurrentLastWriteTime">
            <summary>
            <para>Returns the <see cref="T:System.DateTime"/> of the last change of the information watched</para>
            <para>The information is retrieved using the watched file modification timestamp</para>
            </summary>
            <returns>The <see cref="T:System.DateTime"/> of the last modificaiton, or <code>DateTime.MinValue</code> if the information can't be retrieved</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.BuildEventData">
            <summary>
            Builds the change event data, including the full path of the watched file
            </summary>
            <returns>The change event information</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.GetEventSourceName">
            <summary>
            Returns the source name to use when logging events
            </summary>
            <returns>The event source name</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Storage.ConfigurationChangeFileWatcher.SectionName">
            <summary>
            <para>Gets the name of the configuration section being watched.</para>
            </summary>
            <value>
            <para>The name of the configuration section being watched.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource">
            <summary>
            Represents an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> that retrieves the configuration information from the 
            application's default configuration file using the <see cref="T:System.Configuration.ConfigurationManager"/> API.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> is a wrapper over the static configuration access API provided by 
            <see cref="T:System.Configuration.ConfigurationManager"/> and watches for changes in the configuration files to refresh the 
            configuration when a change is detected.
            </para>
            </remarks>
            <seealso cref="T:System.Configuration.ConfigurationManager"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> class that will refresh changes
            according to the value of the <paramref name="refresh"/> parameter.
            </summary>
            <param name="refresh"><see langword="true"/> if changes to the configuration file should be notified.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/> class that will refresh changes
            according to the value of the <paramref name="refresh"/> parameter, polling every 
            <paramref name="refreshInterval"/> milliseconds.
            </summary>
            <param name="refresh"><see langword="true"/> if changes to the configuration file should be notified.</param>
            <param name="refreshInterval">The poll interval in milliseconds.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.DoAdd(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.DoRemove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration and saves the configuration source.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.Save(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds or replaces <paramref name="configurationSection"/> under name <paramref name="section"/> in the configuration 
            and saves the configuration file.
            </summary>
            <param name="section">The name for the section.</param>
            <param name="configurationSection">The configuration section to add or replace.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.DoGetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration file.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.RefreshAndValidateSections(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Refreshes the configuration sections from the main configuration file and determines which sections have 
            suffered notifications and should be notified to registered handlers.
            </summary>
            <param name="localSectionsToRefresh">A dictionary with the configuration sections residing in the main 
            configuration file that must be refreshed.</param>
            <param name="externalSectionsToRefresh">A dictionary with the configuration sections residing in external 
            files that must be refreshed.</param>
            <param name="sectionsToNotify">A new collection with the names of the sections that suffered changes and 
            should be notified.</param>
            <param name="sectionsWithChangedConfigSource">A new dictionary with the names and file names of the sections 
            that have changed their location.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource.RefreshExternalSections(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Refreshes the configuration sections from an external configuration file.
            </summary>
            <param name="sectionsToRefresh">A collection with the names of the sections that suffered changes and should 
            be refreshed.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement"/> class with a name and an type.
            </summary>
            <param name="name">The instance name.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.SystemConfigurationSource"/>.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement">
            <summary>
            Contains settings specific to the registration of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement.SectionName">
            <summary>
            The section name used to retrieve the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/> if available.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement.ProviderTypeName">
            <summary>
            The name of the type that implements <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.ITypeRegistrationsProvider"/>. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElementCollection">
            <summary>
            Contains a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElementCollection.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElementCollection"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection">
            <summary>
            Contains settings to determine which <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistrationsProvider"/> to configure the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.EnterpriseLibraryContainer"/> with.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.SectionName">
            <summary>The section name under which this configuration section is expected to be found.</summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.CachingTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Caching Application Block</summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.CryptographyTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Cryptography Application Block</summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.ExceptionHandlingTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Exception Handling Application Block</summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.InstrumentationTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for Instrumentation Configuration</summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.LoggingTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Logging Application Block</summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.PolicyInjectionTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Policy Injection Application Block</summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.SecurityTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Security Application Block</summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.DataAccessTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Data Access Application Block</summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.ValidationTypeRegistrationProviderName">
            <summary>The Type Registration Provider name for the Validation Application Block</summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProvidersConfigurationSection.TypeRegistrationProviders">
            <summary>
            Gets the collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.TypeRegistrationProviderElement"/> configured in this section.   
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension">
            <summary>
            Main <see cref="T:Microsoft.Practices.Unity.UnityContainerExtension"/> for Enterprise Library.
            </summary>
            <remarks>
            This extension configures its container to resolve all Enterprise Library
            objects. It's a convienence method to save having to manually create a 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.Unity.UnityContainerConfigurator"/> object and configure it yourself.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension"/> class with the
            default <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>		
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension"/> class with the
            the specified <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to use when retrieving
            configuration information.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.EnterpriseLibraryCoreExtension.Initialize">
            <summary>
            Configures the Unity container to be able to resolve Enterprise Library
            objects.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReaderWriterLockExtension">
            <summary>
             Provides Reader/Writer lock logic to allow reconfiguring of the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReaderWriterLockExtension.Initialize">
            <summary>
            Initial the container with this extension's functionality.
            </summary>
            <remarks>
            When overridden in a derived class, this method will modify the given
                        <see cref="T:Microsoft.Practices.Unity.ExtensionContext"/> by adding strategies, policies, and so forth. to
                        install it's functions into the container.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReaderWriterLockExtension.EnterWriteLock">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReaderWriterLockExtension.ExitWriteLock">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuilderStrategy">
            <summary>
            Represents a strategy in the chain of responsibility.
            Strategies are required to support both BuildUp and TearDown.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy">
            <summary>
            Represents a strategy in the chain of responsibility.
            Strategies are required to support both BuildUp and TearDown. Although you
            can implement this interface directly, you may also choose to use
            <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> as the base class for your strategies, as
            this class provides useful helper methods and makes support BuildUp and TearDown
            optional.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PostBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PostBuildUp method is called when the chain has finished the PreBuildUp
            phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PreTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PreTearDown method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the teardown operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy.PostTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PostTearDown method is called when the chain has finished the PreTearDown
            phase and executes in reverse order from the PreTearDown calls.
            </summary>
            <param name="context">Context of the teardown operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderStrategy.PostBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PostBuildUp method is called when the chain has finished the PreBuildUp
            phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderStrategy.PreTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PreTearDown method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the teardown operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderStrategy.PostTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PostTearDown method is called when the chain has finished the PreTearDown
            phase and executes in reverse order from the PreTearDown calls.
            </summary>
            <param name="context">Context of the teardown operation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReaderWriterLockExtension.ReaderWriterLockStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
                        PreBuildUp method is called when the chain is being executed in the
                        forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.ReaderWriterLockExtension.ReaderWriterLockStrategy.PostBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
                        PostBuildUp method is called when the chain has finished the PreBuildUp
                        phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery">
            <summary>
            This interface provides a hook for the builder context to
            implement error recovery when a builder strategy throws
            an exception. Since we can't get try/finally blocks onto
            the call stack for later stages in the chain, we instead
            add these objects to the context. If there's an exception,
            all the current IRequiresRecovery instances will have
            their Recover methods called.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery.Recover">
            <summary>
            A method that does whatever is needed to clean up
            as part of cleaning up after an exception.
            </summary>
            <remarks>
            Don't do anything that could throw in this method,
            it will cause later recover operations to get skipped
            and play real havoc with the stack trace.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.TransientPolicyBuildUpExtension">
            <summary>
            Container extension that allows for supplying additional, transient policies while building up an object
            through a container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.TransientPolicyBuildUpExtension.Initialize">
            <summary>
            Initializes the container with this extension's functionality.
            </summary>
            <remarks>
            This extension does not permfom any initialization.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.TransientPolicyBuildUpExtension.BuildUp(System.Type,System.Object,System.String,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Run an existing object through the container and perform injection on it.
            </summary>
            <param name="t"><see cref="T:System.Type"/> of object to perform injection on.</param>
            <param name="existing">Instance to build up.</param>
            <param name="name">Name to use when looking up the typemappings and other configurations.</param>
            <param name="injectionMembers">Providers for transient policies to use.</param>
            <returns>The resulting object. By default, this will be object supplied in the <paramref name="existing"/> 
            parameter, but container extensions may add things like automatic proxy creation which would cause this to 
            return a different object (but still type compatible with t).</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.UnityContainerExtensions">
            <summary>
            Extension methods on <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> that provides
            some convenience wrappers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.UnityContainerExtensions.AddExtensionIfNotPresent(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.UnityContainerExtension)">
            <summary>
            Add a new extension to the given <paramref name="container"/>, only
            if the extension hasn't already been added to the container.
            </summary>
            <param name="container">The container to add the extension to.</param>
            <param name="extension">The extension object.</param>
            <returns><paramref name="container"/></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Unity.UnityContainerExtensions.AddNewExtensionIfNotPresent``1(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Add a new extension to the given <paramref name="container"/>, only
            if the extension hasn't already been added to the container.
            </summary>
            <typeparam name="TExtension">Type of extension to add.</typeparam>
            <param name="container">Container to add the extension to.</param>
            <returns><paramref name="container"/></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder">
            <summary>
            Base class for the reflection-based installers. These reflection-based installers 
            search through assemblies looking for the appropriate kinds of installable resources and
            arrange for them to be registered with the appropriate installer
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.Fill(System.Configuration.Install.Installer)">
            <summary>
            Fills the given installer with other, more specific kinds of installers that have been
            filled with the appropriate kinds of installable resources
            </summary>
            <param name="installer">Outer installer to be filled with nested installers for specific resources</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.#ctor(System.Type[],System.Type)">
            <summary>
            Initializes object by giving it access to an array of all available types and a specification of
            the more specific resource type that will be installed.
            </summary>
            <param name="availableTypes">Array of available types through which installer should look</param>
            <param name="instrumentationAttributeType">Attribute specifying the more specific resource type to search for</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.ConfirmAttributeExists(System.Type,System.Type)">
            <summary>
            Helper method to determine if the given type is attributed with the necessary attributes to be installed
            for a given installer
            </summary>
            <param name="instrumentedType">Type in question</param>
            <param name="attributeType">More specific attribute used to match resource being installed</param>
            <returns>True if the attributes on the given <paramref name="instrumentedType"></paramref> matches <paramref name="attributeType"></paramref></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.IsInstrumented(System.Type,System.Type)">
            <summary>
            Helper method to determine if the attributes for a given type match the attributes used to 
            specify a specific kind of installable resource. The type should be attributed with <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.HasInstallableResourcesAttribute"></see>
            and the attribute passed to this method call.
            </summary>
            <param name="instrumentedType">Type in question</param>
            <param name="instrumentedAttributeType">More specific attribute used to match resource being installed</param>
            <returns><b>true</b> if the type specifies intallable resources.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.CreateInstallers(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Creates one or more installers after iterating over the <paramref name="instrumentedTypes"></paramref>.
            The number of iterators returned depends on the specific needs of the particular installable type.
            </summary>
            <returns>Collection of installers created through iterating over included types</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AbstractInstallerBuilder.InstrumentedTypes">
            <summary>
            Gets or sets a list of all instrumentented types found in a given assembly. Types are instrumented if they are
            attributed with <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.HasInstallableResourcesAttribute"></see>	 and another attribute specifying 
            another, more specific resource type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter">
            <summary>
            Provides the friendly name of the application domain as the prefix in formatting a 
            particular instance of a performance counter.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter">
            <summary>
            Provides a pluggable way to format the name given to a particular instance of a performance counter.
            Each instance of a performance counter in Enterprise Library is given a name of the format
            "Name prefix - counter name"
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IPerformanceCounterNameFormatter.CreateName(System.String)">
            <summary>
            Creates the formatted instance name for a performance counter, providing the prefix for the
            instance.
            </summary>
            <param name="nameSuffix">Performance counter name, as defined during installation of the counter</param>
            <returns>Formatted instance name in form of "prefix - nameSuffix"</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter"/> with an Application Instance Name
            </summary>
            <param name="applicationInstanceName"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.AppDomainNameFormatter.CreateName(System.String)">
            <summary>
            Creates the formatted instance name for a performance counter, providing the Application
            Domain friendly name for the prefix for the instance.
            </summary>
            <param name="nameSuffix">Performance counter name, as defined during installation of the counter</param>
            <returns>Formatted instance name in form of "appDomainFriendlyName - nameSuffix"</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilderExtensions">
            <summary>
            Provides instrumentation specific configuration extensions to <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder"/>
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilder"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ConfigurationSourceBuilderExtensions.ConfigureInstrumentation(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder)">
            <summary>
            Configure Instrumentation for Enterprise Library.
            </summary>
            <param name="configurationSourceBuilderRoot">Extends the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder"/></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IInstrumentationConfiguration">
            <summary>
            Defines instrumentation configuration options.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IInstrumentationConfiguration.EnableLogging">
            <summary>
            Enable logging 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IInstrumentationConfiguration.EnablePerformanceCounters">
            <summary>
            Enable performance counters for instrumentation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IInstrumentationConfiguration.ForApplicationInstance(System.String)">
            <summary>
            Set application instance for instrumentation.
            </summary>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection">
            <summary>
            Configuration object for Instrumentation. This section defines the instrumentation behavior 
            for the entire application
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.SectionName">
            <summary>
            Section name
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes enabled state of the three forms of instrumentation
            </summary>
            <param name="performanceCountersEnabled">True if performance counter instrumentation is to be enabled</param>
            <param name="eventLoggingEnabled">True if event logging instrumentation is to be enabled</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.#ctor(System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes enabled state of the three forms of instrumentation and the instance name
            </summary>
            <param name="performanceCountersEnabled">True if performance counter instrumentation is to be enabled</param>
            <param name="eventLoggingEnabled">True if event logging instrumentation is to be enabled</param>
            <param name="applicationInstanceName">Value of the InstanceName</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.#ctor">
            <summary>
            Initializes object to default settings of all instrumentation types disabled and an empty InstanceName
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.GetSection(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Retrieve the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection"/> from the given configuratio source.
            If the source is null, or does not contain an instrumentation section, then return a default
            section with instrumentation turned off.
            </summary>
            <param name="configurationSource">Configuration source containing section (or not).</param>
            <returns>The configuration section.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Gets a value indicating whether an unknown attribute is encountered during deserialization.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.PerformanceCountersEnabled">
            <summary>
            Gets and sets the value of PerformanceCountersEnabled
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.EventLoggingEnabled">
            <summary>
            Gets and sets the value of EventLoggingEnabled
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Configuration.InstrumentationConfigurationSection.ApplicationInstanceName">
            <summary>
            Gets and sets value of ApplicationInstanceName
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter">
            <summary>
            Provides a virtual PerformanceCounter interface that allows an application to maintain both individually 
            named counter instances and a single counter total instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.#ctor(System.String,System.String)">
            <summary>
            Initializes a single performance counter instance named "Total"
            </summary>
            <param name="counterCategoryName">Performance counter category name, as defined during installation</param>
            <param name="counterName">Performance counter name, as defined during installation</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes multiple instances of performance counters to be managed by this object. 
            </summary>
            <param name="counterCategoryName">Performance counter category name, as defined during installation</param>
            <param name="counterName">Performance counter name, as defined during installation</param>
            <param name="instanceNames">Param array of instance names to be managed</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.#ctor(System.Diagnostics.PerformanceCounter[])">
            <summary>
            Initializes this object with performance counters created externally. It is the responsibility of the external
            counter factory to create an instance for the "Total" counter.
            </summary>
            <param name="counters">Param array of already initialized <see cref="T:System.Diagnostics.PerformanceCounter"></see>s to be managed 
            by this instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Clear">
            <summary>
            Clears the raw count associated with all managed performance counters
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Increment">
            <summary>
            Increments each performance counter managed by this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.IncrementBy(System.Int64)">
            <summary>
            Increments by the given <paramref name="value"></paramref> each performance counter managed by this instance.
            </summary>
            <param name="value">Amount by which to increment each counter</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.GetValueFor(System.String)">
            <summary>
            Gets the current value of the given performance counter instance.
            </summary>
            <param name="instanceName">Instance name of counter for which to get value.</param>
            <returns>Value of the given performance counter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.SetValueFor(System.String,System.Int64)">
            <summary>
            Sets the value of the given performance counter instance.
            </summary>
            <param name="instanceName">Instance name of counter for which to set the value.</param>
            <param name="value">Value to which the given instance should be set.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.InstantiateCounter(System.String)">
            <summary>
            Initializes a performance counter, giving it the specified <paramref name="instanceName"></paramref>.
            </summary>
            <param name="instanceName">Instance name to be given to the instantiated <see cref="T:System.Diagnostics.PerformanceCounter"></see></param>.
            <returns>Initialized <see cref="T:System.Diagnostics.PerformanceCounter"></see></returns>.
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Increment(System.String)">
            <summary>
            Increments the associated performance counters by one.
            </summary>
            <param name="instanceName">The instance to be incremented.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Counters">
            <summary>
            Gets the list of performance counter instances managed by this object.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter.Value">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounterFactory">
            <summary>
            Factory for <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter"></see>s. Individual <see cref="T:System.Diagnostics.PerformanceCounter"></see>
            instances are cached to prevent the same instance from being created multiple times.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounterFactory.CreateCounter(System.String,System.String,System.String[])">
            <summary>
            Creates an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounter"></see> initialized with individual <see cref="T:System.Diagnostics.PerformanceCounter"></see>
            instances. Instances are named according to <paramref name="instanceNames"></paramref> passed to this method.
            </summary>
            <param name="categoryName">Performance counter category name, as defined during installation.</param>
            <param name="counterName">Performance counter name, as defined during installation.</param>
            <param name="instanceNames">Param array of instance names for which individual counters should be created.</param>
            <returns>The new counter instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EnterpriseLibraryPerformanceCounterFactory.ClearCachedCounters">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventBinder">
            <summary>
            Binds an event source to an event handler.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventBinder.#ctor(System.Object,System.Object)">
            <summary>
            Initializes this object with the source and listener objects to be bound together.
            </summary>
            <param name="source">Object owning the event that will be bound to</param>
            <param name="listener">Object owning the method that will be added as a handler for specified event.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventBinder.Bind(System.Reflection.EventInfo,System.Reflection.MethodInfo)">
            <summary>
            Adds specified <paramref name="listenerMethod"></paramref> as an event handler for 
            the <paramref name="sourceEvent"></paramref>.
            </summary>
            <param name="sourceEvent">Event on source object to which <paramref name="listenerMethod"></paramref> will be added.</param>
            <param name="listenerMethod">Method to be added as event handler for <paramref name="listenerMethod"></paramref>.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute">
            <summary>
            Defines an event source to be installed by the reflection based installer system. Each field
            in this attribute is a placeholder for the same field as defined in the <see cref="T:System.Diagnostics.EventLogInstaller"></see>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes this object with the event log name and source to be installed.
            </summary>
            <param name="logName">Event log name to which the source should be added.</param>
            <param name="sourceName">Event log source to be added.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.LogName">
            <summary>
            Gets the event log name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.SourceName">
            <summary>
            Gets the event source name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.CategoryCount">
            <summary>
            Gets and sets the category count.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.CategoryResourceFile">
            <summary>
            Gets the category resource file name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.MessageResourceFile">
            <summary>
            Gets and sets the message resource file name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogDefinitionAttribute.ParameterResourceFile">
            <summary>
            Gets and sets the parameter resource file name
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter">
            <summary>
            Formats an event log entry to the defined format.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IEventLogEntryFormatter">
            <summary>
            Formats an event log entry for logging to event log.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IEventLogEntryFormatter.GetEntryText(System.String,System.String[])">
            <overloads>
            Creates a formatted message, suitable for logging to the event log.
            </overloads>
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.IEventLogEntryFormatter.GetEntryText(System.String,System.Exception,System.String[])">
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="exception">Exception containing message text to be added to event log message produced by this method</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.#ctor(System.String)">
            <overloads>
            Initializes this object with the name of the specific block using this class.
            </overloads>
            <summary>
            Initializes this object with the name of the specific block using this class.
            </summary>
            <param name="blockName">Name of block using this functionality.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.#ctor(System.String,System.String)">
            <summary>
            Initializes this object	with the given application and block names.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <param name="blockName">Name of the block using this functionality.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.GetEntryText(System.String,System.String[])">
            <overloads>
            Creates a formatted message, suitable for logging to the event log.
            </overloads>
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogEntryFormatter.GetEntryText(System.String,System.Exception,System.String[])">
            <summary>
            Creates a formatted message, suitable for logging to the event log.
            </summary>
            <param name="message">Message to be formatted, with format tags embedded.</param>
            <param name="exception">Exception containing message text to be added to event log message produced by this method</param>
            <param name="extraInformation">Extra strings to be matched up with the format tags provided in <paramref name="message"></paramref>.</param>
            <returns>Formatted message, suitable for logging to the event log.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogInstallerBuilder">
            <summary>
            Add event log source definitions for classes that have been attributed
            with HasInstallableResourceAttribute and EventLogDefinition attributes to EventLogInstallers.
            One installer is created for each unique event log source that is found.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogInstallerBuilder.#ctor(System.Type[])">
            <summary>
            Initializes this object with a list of <see cref="T:System.Type"></see>s that may potentially be attributed appropriately.
            </summary>
            <param name="potentialTypes">Array of types to inspect check for event log sources needing installation</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.EventLogInstallerBuilder.CreateInstallers(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Creates <see cref="T:System.Diagnostics.EventLogInstaller"></see> instances for each separate event log source needing installation.
            </summary>
            <param name="instrumentedTypes">Collection of <see cref="T:System.Type"></see>s that represent types defining
            event log sources to be installed.</param>
            <returns>Collection of installers containing event log sources to be installed.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.HasInstallableResourcesAttribute">
            <summary>
            Defines those classes and structs that have some sort of resources that need to be installed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationBaseAttribute">
            <summary>
            Base class for attributes used to identify instrumentation producers or consumers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationBaseAttribute.#ctor(System.String)">
            <summary>
            Initializes this instance with the instrumentation subject name.
            </summary>
            <param name="subjectName">Subject name being produced or consumed</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationBaseAttribute.SubjectName">
            <summary>
            Gets the subject name
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationConsumerAttribute">
            <summary>
            Defines methods that are consuming instrumentation events.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationConsumerAttribute.#ctor(System.String)">
            <summary>
            Initializes this instance with the instrumentation subject name being consumed.
            </summary>
            <param name="subjectName">Subject name of the event being consumed.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute">
            <summary>
            Defines a class that will listen for instrumentation events broadcast by other classes
            and report them to system services. This attribute is placed on the class that is to be
            listened to, in order to define the class that will listen to it.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.#ctor(System.Type)">
            <overloads>
            Initializes attribute with given <paramref name="listenerType"></paramref>. 
            </overloads>
            <summary>
            Initializes attribute with given <paramref name="listenerType"></paramref>. 
            </summary>
            <param name="listenerType">Instrumentation listener type to instantiate.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes attribute with given <paramref name="listenerType"></paramref>. Use when
            you need to specify an explicit binder class.
            </summary>
            <param name="listenerType">Instrumentation listener type to instantiate.</param>
            <param name="listenerBinderType">Instrumentation binder listener type to instantiate.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.ListenerType">
            <summary>
            Gets type of class to instantiate to listen for events.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationListenerAttribute.ListenerBinderType">
            <summary>
            Gets type of class to use to bind an instance of the attributed class to 
            an instance of the listener class
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationProviderAttribute">
            <summary>
            Defines events that are producing instrumentation events.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentationProviderAttribute.#ctor(System.String)">
            <summary>
            Initializes this object with the instrumentation subject name being produced.
            </summary>
            <param name="subjectName">Subect name of event being produced.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.NoPrefixNameFormatter">
            <summary>
            Provides a pluggable way to format the name given to a particular instance of a performance counter.
            This class does no formatting, returning the provided name suffix as the counter name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.NoPrefixNameFormatter.CreateName(System.String)">
            <summary>
            Returns the given <paramref name="nameSuffix"></paramref> as the created name.
            </summary>
            <param name="nameSuffix">Performance counter name, as defined during installation of the counter</param>
            <returns>Formatted instance name in form of "nameSuffix"</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute">
            <summary>
            Defines a <see cref="T:System.Diagnostics.PerformanceCounter"></see>. Used by the reflection-based installers to 
            prepare a performance counter for installation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
            <summary>
            Initializes this object with all data needed to install a <see cref="T:System.Diagnostics.PerformanceCounter"></see>.
            </summary>
            <param name="counterName">Performance counter name.</param>
            <param name="counterHelp">Name of Help resource string. This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.</param>
            <param name="counterType">Performance Counter type.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.HasBaseCounter">
            <summary>
            Used to determine if the counter being installed has a base counter associated with it.
            </summary>
            <returns>True if counter being installed has a base counter associated with it.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.CounterType">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.CounterHelp">
            <summary>
            Get the name of Help resource string. This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.CounterName">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.BaseCounterType">
            <summary>
            Gets and sets the base <see cref="T:System.Diagnostics.PerformanceCounter"></see> type. This is an optional 
            property used when the counter being defined requires a base counter to operate, such as for 
            averages.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.BaseCounterHelp">
            <summary>
            Gets and sets the base <see cref="T:System.Diagnostics.PerformanceCounter"></see> help resource name. 
            This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.
            This is an optional 
            property used when the counter being defined requires a base counter to operate, such as for 
            averages.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterAttribute.BaseCounterName">
            <summary>
            Gets and sets the base <see cref="T:System.Diagnostics.PerformanceCounter"></see> name. This is an optional 
            property used when the counter being defined requires a base counter to operate, such as for 
            averages.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder">
            <summary>
            Add event log source definitions for classes that have been attributed
            with HasInstallableResourceAttribute and EventLogDefinition attributes to EventLogInstallers.
            One installer is created for each unique performance counter category that is found.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder.#ctor(System.Type[])">
            <summary>
            Initializes this object with a list of <see cref="T:System.Type"></see>s that may potentially be attributed appropriately.
            </summary>
            <param name="availableTypes">Array of types to inspect check for performance counter definitions needing installation</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder.CreateInstallers(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Creates <see cref="T:System.Diagnostics.PerformanceCounterInstaller"></see> instances for each separate performance counter definition needing installation.
            </summary>
            <param name="instrumentedTypes">Collection of <see cref="T:System.Type"></see>s that represent types defining
            performance counter definitions to be installed.</param>
            <returns>Collection of installers containing performance counter definitions to be installed.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder.GetCategoryHelp(Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute,System.Reflection.Assembly)">
            <summary>
            Gets the category help for a performance counter.
            </summary>
            <param name="attribute">The performance counter attribute.</param>
            <param name="originalAssembly">The assembly where the help is defined.</param>
            <returns>The help for the performance counter.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstallerBuilder.GetCounterHelp(System.String,System.Reflection.Assembly)">
            <summary>
            Gets the counter help for a performance counter.
            </summary>
            <param name="resourceName">The resource name.</param>
            <param name="originalAssembly">The assembly where the help is defined.</param>
            <returns>The help for the performance counter.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName">
            <summary>
            Constructs an instance name for a <see cref="T:System.Diagnostics.PerformanceCounter"></see> following embedded
            formatting rules.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName.#ctor(System.String,System.String)">
            <overloads>
            Initializes this object with information needed to construct a <see cref="T:System.Diagnostics.PerformanceCounter"></see>\
            instance name.
            </overloads>
            <summary>
            Initializes this object with information needed to construct a <see cref="T:System.Diagnostics.PerformanceCounter"></see>\
            instance name.
            </summary>
            <param name="prefix">Counter name prefix.</param>
            <param name="suffix">Counter name suffix.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <overloads>
            Initializes this object with information needed to construct a <see cref="T:System.Diagnostics.PerformanceCounter"></see>\
            instance name.
            </overloads>
            <summary>
            Initializes this object with information needed to construct a <see cref="T:System.Diagnostics.PerformanceCounter"></see>\
            instance name.
            </summary>
            <param name="prefix">Counter name prefix.</param>
            <param name="suffix">Counter name suffix.</param>
            <param name="maxPrefixLength">Max prefix length.</param>
            <param name="maxSuffixLength">Max suffix length.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCounterInstanceName.ToString">
            <summary>
            Returns properly formatted counter name as a string.
            </summary>
            <returns>Formatted counter name.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute">
            <summary>
            Defines information needed to install a <see cref="T:System.Diagnostics.PerformanceCounterCategory"></see>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.#ctor(System.String,System.String)">
             <overloads>
             Initializes this attribute with information needed to install this performance counter category.
             </overloads>
             <summary>
             Initializes this attribute with information needed to install this performance counter category.
             </summary>
             <param name="categoryName">Performance counter category name</param>
             <param name="categoryHelp">Counter category help resource name. 
             This is not the help text itself, 
             but is the resource name used to look up the internationalized help text at install-time.
            </param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType)">
             <summary>
             Initializes this attribute with information needed to install this performance counter category.
             </summary>
             <param name="categoryName">Performance counter category name</param>
             <param name="categoryHelp">Counter category help resource name. 
             This is not the help text itself, 
             but is the resource name used to look up the internationalized help text at install-time.
            </param>
             <param name="categoryType">Performance counter category type.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.CategoryType">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> category type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.CategoryName">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> category name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.PerformanceCountersDefinitionAttribute.CategoryHelp">
            <summary>
            Gets the <see cref="T:System.Diagnostics.PerformanceCounter"></see> category help resource name.
            This is not the help text itself, 
            but is the resource name used to look up the internationalized help text at install-time.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstaller`1">
            <summary>
            Generic installer wrapper around installer builder. Used to find and install 
            given type of installable resource.
            </summary>
            <typeparam name="TInstallerBuilder">Specific type of installer builder to instantiate</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstaller`1.Install(System.Collections.IDictionary)">
            <summary>
            Installs the instrumentation resources
            </summary>
            <param name="stateSaver">An <see cref="T:System.Collections.IDictionary"/> used to save information needed to perform a commit, rollback, or uninstall operation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.ReflectionInstaller`1.Uninstall(System.Collections.IDictionary)">
            <summary>
            Uninstalls the instrumentation resources
            </summary>
            <param name="stateSaver">An <see cref="T:System.Collections.IDictionary"/> that contains the state of the computer after the installation was complete.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter">
            <summary>
            A formatter object that allows replacement tokens in a string.
            The supported tokens are:
            <list type="bullet">
            <item><term>{appdomain}</term><description>Includes the current appdomain's friendly name.</description></item>
            <item><term>{assembly}</term><description>Includes the assembly name.</description></item>
            <item><term>{namespace}</term><description>Includes the target class's namespace.</description></item>
            <item><term>{type}</term><description>Includes the name of the type containing the target method.</description></item>
            <item><term>{method}</term><description>Includes the name of the target method.</description></item>
            </list>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter">
            <summary>
            This class provides an engine to process a string that contains
            replacement tokens of the form "{token}" and replace them with
            calculated value later.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter.#ctor">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken[])">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter"/>.
            </summary>
            <param name="tokens">List of tokens to replace.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken})">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter"/>.
            </summary>
            <param name="tokens">List of tokens to replace.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter.Add(Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken[])">
            <summary>
            Add a new set of replacement tokens.
            </summary>
            <param name="tokens">Tokens to add to the list.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter.AddRange(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken})">
            <summary>
            Add new tokens to the set of replacements.
            </summary>
            <param name="tokens">Tokens to add to the list.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter.Format(System.String)">
            <summary>
            Format the given template, replacing any tokens present.
            </summary>
            <param name="template">The string to format, containing the replacement tokens.</param>
            <returns>The formatted string, with tokens replaced.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation)">
            <summary>
            Creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.MethodInvocationFormatter"/> that replaces tokens
            using the information in the given method invocation.
            </summary>
            <param name="input"><see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/> object containing information
            about the current method call.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken">
            <summary>
            A single replacement token used by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementFormatter"/>. A
            token consists of two things:
            <list type="bullet">
            <item><description>The actual text of the token (including the {})</description></item>
            <item><description>A delegate to retrieve the value to replace the token.</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Common.ReplacementTextDelegate)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken"/>.
            </summary>
            <param name="token">The string marking where the token should be replaced.</param>
            <param name="getReplacementText">Delegate to return the value that replaces the token.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken.ReplaceToken(System.Text.StringBuilder)">
            <summary>
            Replace this token in the given stringbuilder.
            </summary>
            <param name="sb"><see cref="T:System.Text.StringBuilder"/> holding the template to perform the token replacement on.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken.Token">
            <summary>
            The token string.
            </summary>
            <value>The token string.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementToken.ReplacementText">
            <summary>
            The text to replace this token with.
            </summary>
            <value>Replacement text.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.ReplacementTextDelegate">
            <summary>
            Delegate type giving a function that returns the replacement text for a token.
            </summary>
            <returns>The replacement text.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.CannotCreateDesignSource">
            <summary>
              查找类似 Cannot create design source for rootSource other than DesignConfigurationSource. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ConfigurationSourceInvalidTypeErrorMessage">
            <summary>
              查找类似 The type &apos;{0}&apos; defined in the &apos;{1}&apos; configuration source is invalid 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.EventLogEntryExceptionTemplate">
            <summary>
              查找类似 The exception that occured was: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.EventLogEntryHeaderTemplate">
            <summary>
              查找类似 An error occurred in application {0} in the {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionArgumentShouldDeriveFromIDictionary">
            <summary>
              查找类似 The type &apos;{0}&apos; does not derive from IDictionary. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionArgumentShouldDeriveFromIList">
            <summary>
              查找类似 The type &apos;{0}&apos; does not derive from IList. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionAssemblerAttributeNotSet">
            <summary>
              查找类似 The [Assembler] attribute is not set in the configuration object type {0}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionAssemblerTypeNotCompatible">
            <summary>
              查找类似 The assembler configured for type {0} has type {2} which is not compatible with type {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionBaseConfigurationSourceElementIsInvalid">
            <summary>
              查找类似 The base ConfigurationSourceElement configuration type can not be used as a concrete configuration element. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCannotAddParametersAfterDispose">
            <summary>
              查找类似 Cannot add new paramters after Finish() or Dispose(). 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCanNotConvertType">
            <summary>
              查找类似 The AssemblyQualifiedTypeNameConverter can only convert values of type &apos;{0}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCannotFinish">
            <summary>
              查找类似 Builder has already added policies. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationFileNotFound">
            <summary>
              查找类似 The section {0} could not be saved because the file does not exist. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationLoadFileNotFound">
            <summary>
              查找类似 The configuration file {0} could not be found. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationObjectIsNotCustomProviderData">
            <summary>
              查找类似 The configuration object for type &apos;{0}&apos; with name &apos;{1}&apos; has type &apos;{2}&apos; which is does not implement ICustomProviderData. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationObjectWithTypeDoesNotHaveTypeSet">
            <summary>
              查找类似 The concrete type for polymorphic object named &apos;{1}&apos; in hierarchy {2} is not defined in configuration object {0}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationSectionPointsToNonExistingSource">
            <summary>
              查找类似 The configuration section &apos;{0}&apos; specifies Source &apos;{1}&apos;, which is not declared in the configuration sources section. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationSourceNotFound">
            <summary>
              查找类似 A configuration source named &apos;{0}&apos; was not found in the {1} section. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionConfigurationSourceSectionNotFound">
            <summary>
              查找类似 The configuration source section is not found in the application configuration file. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionContainerPolicyCreatorAttributeNotPresent">
            <summary>
              查找类似 The required &quot;ContainerPolicyCreatorAttribute&quot; is not present in the supplied type &quot;{0}&quot;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCustomFactoryAttributeNotFound">
            <summary>
              查找类似 The [CustomFactory] attribute was not found on type {0} while processing request for id &apos;{1}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionCustomProviderTypeDoesNotHaveTheRequiredConstructor">
            <summary>
              查找类似 Type &apos;{0}&apos; specified as a custom provider does not have the required public constructor with a single NameValueCollection parameter. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionEventRaisingFailed">
            <summary>
              查找类似 There was an error raising an event in  的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionFactoryMethodHasInvalidReturnType">
            <summary>
              查找类似 The method with signature {0} is not a valid factory method to build type {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionIncompaitbleMergeElementType">
             <summary>
               查找类似 Cannot merge the configuration element.
            The local elements type &apos;{0}&apos; is  incompatible with the parent elements type &apos;{1}&apos;. 的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionInvalidType">
            <summary>
              查找类似 The type &apos;{0}&apos; cannot be resolved. Please verify the spelling is correct or that the full type name is provided. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionMustBeNameTypeConfigurationElement">
            <summary>
              查找类似 The supplied configuration object has type &apos;{0}&apos;, which is not a descendant of &apos;NameTypeConfigurationElement&apos; as required. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionMustHaveNoArgsConstructor">
            <summary>
              查找类似 The required zero argument constructor is not available for the supplied type &quot;{0}&quot;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionMustImplementIContainerPolicyCreator">
            <summary>
              查找类似 The required interface &quot;IContainerPolicyCreator&quot; is not implemented by the supplied type &quot;{0}&quot;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNamedConfigurationNotFound">
            <summary>
              查找类似 The configuration could not be found for name &apos;{0}&apos; in factory {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoConfigurationElementAttribute">
            <summary>
              查找类似 The type {0} does not contain the ConfigurationElementTypeAttribute. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoConfigurationObjectPolicySet">
            <summary>
              查找类似 No policy specifying the configuration source for the container has been set. The EnterpriseLibraryCoreExtension is probably missing. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoMatchingConstructorFound">
            <summary>
              查找类似 No public constructor with {1} arguments was found for type &quot;{0}&quot;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoMethodAnnotatedForInjectionFound">
            <summary>
              查找类似 The type {0} does not have a public method annotated as an injection target as required by the use of injection. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoSuitableFactoryMethodFound">
            <summary>
              查找类似 The type {0} does not have a static method with a TargetConstructorAttribuite suitable to create an object of type {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionNoTypeAttribute">
            <summary>
              查找类似 The type attribute does not exist on the element {0}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionParameterNotAnnotatedForInjection">
            <summary>
              查找类似 The parameter &apos;{0}&apos; for injection target &apos;{1}&apos; in type &apos;{2}&apos; is missing the injection interpretation attribute. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPerformanceCounterRedefined">
            <summary>
              查找类似 The performance counter &apos;{0}&apos; in category &apos;{1}&apos; is redefined in type {2} with a different configuration. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPolicyBuilderFinished">
            <summary>
              查找类似 Attempt to continue working with a PolicyBuilder after the policies have been added to a policy list for type &apos;{1}&apos; with key &apos;{0}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPolicyBuilderStillWaitingForPropertyPolicy">
            <summary>
              查找类似 The specified policies cannot be added: a property policy mapping is still taking place. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPropertyAccessExpressionNotPropertyAccess">
            <summary>
              查找类似 The supplied expression is not a valid property access expression: &apos;{0}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionPropertyNotFound">
            <summary>
              查找类似 e {2}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionRedirectedConfigurationSectionNotFound">
            <summary>
              查找类似 Unable to find the redirected section {0} in the specified configuration source {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionRegistrationServiceTypeIsNotCompatible">
            <summary>
              查找类似 Service type of {0} is not compatible with supplied expression type of {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionRegistrationTypeExpressionMustBeNewLambda">
            <summary>
              查找类似 Lambda expression must construct a new instance of a type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionRetrievalAttributeNotFound">
            <summary>
              查找类似 The type {0} does not contain the ConfigurationDataRetrievalAttribute required to resolve named references. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionShouldBeImplementedBySubclass">
            <summary>
              查找类似 Method must be overriden by subclass. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionSourcePropertyDoesNotExist">
            <summary>
              查找类似 Could not retrieve parameter value. The property {0} does not exist for type {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionStringNullOrEmpty">
            <summary>
              查找类似 The value can not be null or string or empty. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionSuppliedCreationExpressionIsNotNewExpression">
            <summary>
              查找类似 A creation expression must be a constructor call, but the supplied expression was &apos;{0}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionSystemSourceNotDefined">
            <summary>
              查找类似 The system configuration source is not defined in the configuration file. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTheSpecifiedDefaultProviderDoesNotExistInConfiguration">
            <summary>
              查找类似 The configuration object for default provider named &apos;{0}&apos; for type &apos;{1}&apos; was not found in the supplied list. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeCouldNotBeCreated">
            <summary>
              查找类似 The type {0} from configuration could not be created. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeDoesNotProvideCorrectConstructor">
            <summary>
              查找类似 Type does not provide a constructor taking a single parameter type of NameValueCollection 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeMustDeriveFromType">
            <summary>
              查找类似 Type must be derived from &apos;{0}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeMustImplementInterface">
            <summary>
              查找类似 Type must implement interface &apos;{0}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeNotCustomFactory">
            <summary>
              查找类似 Type {0} is not an implementation of ICustomFactory for CustomFactoryAttribute. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeNotNameMapper">
            <summary>
              查找类似 Type {0} is not an implementation of IConfigurationNameMapper for ConfigurationNameMapperAttribute. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionTypeNotRetriever">
            <summary>
              查找类似 Type {0} is not an implementation of IConfigurationDataRetriever for ConfigurationDataRetrievalAttribute. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnableToMatchConstructorToConfigurationObject">
            <summary>
              查找类似 Default policy creation failed: The properties in the supplied configuration object of type {0} cannot be matched to any constructor on type {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnexpectedType">
            <summary>
              查找类似 The expected type &apos;{0}&apos; was not provided. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnknownResolveMethod">
            <summary>
              查找类似 An call to an unknown method named &apos;{0}&apos; in the Resolve class was found in the supplied argument expression: &apos;{1}&apos;. Cannot create policies for this expression. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnrecognizedContainerMarkerMethod">
            <summary>
              查找类似 Unrecognized Container marker method. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnrecognizedDependencyParameterType">
            <summary>
              查找类似 Unrecognized DependencyParameter type: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.ExceptionUnsupportedBindingExpressionType">
            <summary>
              查找类似 The initialization expression for property {0} is not supported: only simple bindings are supported. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.FileConfigurationSourceName">
            <summary>
              查找类似 File Configuration Source 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Properties.Resources.SystemConfigurationSourceName">
            <summary>
              查找类似 System Configuration Source 的本地化字符串。
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.ResourceStringLoader">
            <summary>
            Helper class to load resources strings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ResourceStringLoader.LoadString(System.String,System.String)">
            <summary>
            Load a resource string.
            </summary>
            <param name="baseName">The base name of the resource.</param>
            <param name="resourceName">The resource name.</param>
            <returns>The string from the resource.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.ResourceStringLoader.LoadString(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Load a resource string.
            </summary>
            <param name="baseName">The base name of the resource.</param>
            <param name="resourceName">The resource name.</param>
            <param name="asm">The assembly to load the resource from.</param>
            <returns>The string from the resource.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ConstantStringResolver">
            <summary>
            Resolves strings by returning a constant value.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver">
            <summary>
            Resolves string objects. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver.GetString">
            <summary>
            Returns a string represented by the receiver.
            </summary>
            <returns>The string object.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ConstantStringResolver.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ConstantStringResolver"/> with a constant value.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.DelegateStringResolver">
            <summary>
            Resolves strings by invoking a delegate and returning the resulting value.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.DelegateStringResolver.#ctor(System.Func{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ConstantStringResolver"/> with a delegate.
            </summary>
            <param name="resolverDelegate">The delegate to invoke when resolving a string.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.EnumerableExtensions">
            <summary>
            Some utility extensions on <see cref="T:System.Collections.Generic.IEnumerable`1"/> to suppliment
            those available from Linq.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Execute <paramref name="action"/> for each element of <paramref name="sequence"/>.
            </summary>
            <typeparam name="T">Type of items in <paramref name="sequence"/>.</typeparam>
            <param name="sequence">Sequence of items to act on.</param>
            <param name="action">Action to invoke for each item.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.EnumerableExtensions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Given a sequence, combine it with another sequence, passing the corresponding
            elements of each sequence to the <paramref name="zipper"/> action to create
            a new single value from the two sequence elements. "Zip" here refers to a zipper,
            not the compression algorithm. The resulting sequence will have the same number
            of elements as the shorter of sequence1 and sequence2.
            </summary>
            <typeparam name="T1">Type of the elments in the first sequence.</typeparam>
            <typeparam name="T2">Type of the elements in the second sequence.</typeparam>
            <typeparam name="TResult">Type of the resulting sequence elements.</typeparam>
            <param name="sequence1">The first sequence to combine.</param>
            <param name="sequence2">The second sequence to combine.</param>
            <param name="zipper">Func used to calculate the resulting values.</param>
            <returns>The result sequence.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.EnumerableExtensions.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Take two sequences and return a new sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects.
            </summary>
            <typeparam name="T1">Type of objects in sequence1.</typeparam>
            <typeparam name="T2">Type of objects in sequence2.</typeparam>
            <param name="sequence1">First sequence.</param>
            <param name="sequence2">Second sequence.</param>
            <returns>The sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Take two sequences and return a <see cref="T:System.Collections.Generic.IDictionary`2"/> with the first sequence
            holding the keys and the corresponding elements of the second sequence containing the values.
            </summary>
            <typeparam name="TKey">Type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">Type of values in the dictionary.</typeparam>
            <param name="keys">Sequence of dictionary keys.</param>
            <param name="values">Sequence of dictionary values.</param>
            <returns>The constructed dictionary.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver">
            <summary>
            Resolves strings by retrieving them from assembly resources, falling back to a specified
            value.
            </summary>
            <remarks>
            If both the resource type and the resource name are available, a resource lookup will be 
            performed; otherwise, the default value will be returned.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver"/>
            for a resource type, a resource name and a fallback value.
            </summary>
            <param name="resourceType">The type that identifies the resources file.</param>
            <param name="resourceName">The name of the resource.</param>
            <param name="fallbackValue">The fallback value, to use when any of the resource
            identifiers is not available.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ResourceStringResolver"/>
            for a resource type name, a resource name and a fallback value.
            </summary>
            <param name="resourceTypeName">The name of the type that identifies the resources file.</param>
            <param name="resourceName">The name of the resource.</param>
            <param name="fallbackValue">The fallback value, to use when any of the resource
            identifiers is not available.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ServiceLocatorExtensions">
            <summary>
            Extension methods on <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> for convenience.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.ServiceLocatorExtensions.Dispose(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            If the object implements <see cref="T:System.IDisposable"/> then call it.
            </summary>
            <param name="locator">The service locator to dispose, if possible.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.TypeExtensions">
            <summary>
            Extensios to <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.TypeExtensions.FindGenericParent(System.Type,System.Type)">
            <summary>
             Locates the generic parent of the type
            </summary>
            <param name="rootType">Type to begin search from.</param>
            <param name="parentType">Open generic type to seek</param>
            <returns>The found parent that is a closed generic of the <paramref name="parentType"/> or null</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Utility.WrappedAsyncOperation">
            <summary>
            A helper class that provides the code needed to wrap an existing
            asynchronous operation and return a different implementation of
            <see cref="T:System.IAsyncResult"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Utility.WrappedAsyncOperation.BeginAsyncOperation``1(System.AsyncCallback,System.Func{System.AsyncCallback,System.IAsyncResult},System.Func{System.IAsyncResult,``0})">
            <summary>
            Start an asyncronous operation that wraps a lower-level
            async operation.
            </summary>
            <typeparam name="TWrappingAsyncResult">Type that implements IAsyncResult
            that will be returned from this method.</typeparam>
            <param name="callback">The user's callback method to be called when
            the async operation completes.</param>
            <param name="beginOperation">A delegate that invokes the underlying
            async operation that we're wrapping.</param>
            <param name="wrappingResultCreator">A delegate that takes the inner
            async result and returns the wrapping instance of <typeparamref name="TWrappingAsyncResult"/>.
            </param>
            <returns>The <see cref="T:System.IAsyncResult"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.AliasElement">
            <summary>
            A configuration element storing information about a single type alias.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElement">
            <summary>
            Base class for configuration elements with a default implementation of
            public deserialization.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElement.Deserialize(System.Xml.XmlReader)">
            <summary>
            Load this element from the given <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">Contains the XML to initialize from.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AliasElement.#ctor">
            <summary>
            Construct a new, uninitialized <see cref="T:Microsoft.Practices.Unity.Configuration.AliasElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AliasElement.#ctor(System.String,System.Type)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.Configuration.AliasElement"/> that is initialized
            to alias <paramref name="alias"/> to the target <paramref name="targetType"/>.
            </summary>
            <param name="alias">Alias to use.</param>
            <param name="targetType">Type that is aliased.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AliasElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.AliasElement.Alias">
            <summary>
            The alias used for this type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.AliasElement.TypeName">
            <summary>
            The fully qualified name this alias refers to.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.AliasElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.Configuration.AliasElement"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollection`1">
            <summary>
            Specialization of <see cref="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollectionBase`1"/>
            that provides a canned implmentation of <see cref="M:System.Configuration.ConfigurationElementCollection.CreateNewElement"/>.
            </summary>
            <typeparam name="TElement">Type of configuration element in the collection.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollectionBase`1">
            <summary>
            A base helper class for implementing configuration collections.
            </summary>
            <typeparam name="TElement">Type of configuration element contained in 
            the collection.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollectionBase`1.GetElement(System.Int32)">
            <summary>
            Plug point to get objects out of the collection.
            </summary>
            <param name="index">Index in the collection to retrieve the item from.</param>
            <returns>Item at that index or null if not present.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollectionBase`1.GetElement(System.Object)">
            <summary>
            Plug point to get objects out of the collection.
            </summary>
            <param name="key">Key to look up the object by.</param>
            <returns>Item with that key or null if not present.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollectionBase`1.Deserialize(System.Xml.XmlReader)">
            <summary>
            Load this element from the given <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">Contains the XML to initialize from.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollectionBase`1.Add(`0)">
            <summary>
            Add a new element to the collection.
            </summary>
            <param name="element">Element to add.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            Remove an element from the collection at the given index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollectionBase`1.Clear">
            <summary>
            Remove all the items in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollectionBase`1.SerializeElementContents(System.Xml.XmlWriter,System.String)">
            <summary>
            Write out the contents of this collection to the given
            <paramref name="writer"/> without a containing element
            corresponding directly to this container element. Each
            child element will have a tag name given by
            <paramref name="elementName"/>.
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> to output XML to.</param>
            <param name="elementName">Name of tag to generate.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollectionBase`1.Item(System.Int32)">
            <summary>
            Indexer to retrieve items in the collection by index.
            </summary>
            <param name="index">Index of the item to get or set.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollection`1.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AliasElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Causes the configuration system to throw an exception.
            </summary>
            <returns>
            true if the unrecognized element was deserialized successfully; otherwise, false. The default is false.
            </returns>
            <param name="elementName">The name of the unrecognized element. 
                            </param><param name="reader">An input stream that reads XML from the configuration file. 
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element specified in <paramref name="elementName"/> is the &lt;clear&gt; element.
                            </exception><exception cref="T:System.ArgumentException"><paramref name="elementName"/> starts with the reserved prefix "config" or "lock".
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AliasElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.AliasElementCollection.Item(System.String)">
            <summary>
            Indexer that allows you to get or set an alias by the alias name.
            </summary>
            <param name="alias">Alias of element to get or set.</param>
            <returns>The type name at that alias.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ArrayElement">
            <summary>
            A configuration element used to configure injection of
            a specific set of values into an array.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ParameterValueElement">
            <summary>
            Base class for configuration elements that describe a value that will
            be injected.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ParameterValueElement.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Microsoft.Practices.Unity.Configuration.ParameterValueElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ParameterValueElement.GetInjectionParameterValue(Microsoft.Practices.Unity.IUnityContainer,System.Type)">
            <summary>
            Generate an <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> object
            that will be used to configure the container for a type registration.
            </summary>
            <param name="container">Container that is being configured. Supplied in order
            to let custom implementations retrieve services; do not configure the container
            directly in this method.</param>
            <param name="parameterType">Type of the </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ParameterValueElement.GuardPropertyValueIsPresent(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Validate that an expected attribute is present in the given
            dictionary and that it has a non-empty value.
            </summary>
            <param name="propertyValues">Dictionary of name/value pairs to check.</param>
            <param name="requiredProperty">attribute name to check.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ParameterValueElement.Key">
            <summary>
            Return a unique string that can be used to identify this object. Used
            by the configuration collection support.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ArrayElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ArrayElement.GetInjectionParameterValue(Microsoft.Practices.Unity.IUnityContainer,System.Type)">
            <summary>
            Generate an <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> object
            that will be used to configure the container for a type registration.
            </summary>
            <param name="container">Container that is being configured. Supplied in order
            to let custom implementations retrieve services; do not configure the container
            directly in this method.</param>
            <param name="parameterType">Type of the </param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ArrayElement.TypeName">
            <summary>
            Type of array to inject. This is actually the type of the array elements,
            not the array type. Optional, if not specified we take the type from
            our containing element.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ArrayElement.Values">
            <summary>
            Values used to calculate the contents of the array.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.AssemblyElement">
            <summary>
            A configuration element representing the namespace
            tags in the config file.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.NamedElement">
            <summary>
            An element with a single "name" property, used for
            the namespaces and assemblies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.NamedElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.NamedElement.Name">
            <summary>
            Name attribute for this element.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.AssemblyElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.Configuration.AssemblyElement"/>s in configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.AssemblyElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ConfigurationElementExtensions">
            <summary>
            Helpful extension methods when implementing configuration sections
            that deserialize "unwrapped" elements - elements that should be
            deserialized into a container but can be present outside
            that container in the actual config file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ConfigurationElementExtensions.ReadUnwrappedElement``1(System.Configuration.ConfigurationElement,System.Xml.XmlReader,Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollectionBase{``0})">
            <summary>
            Deserialize an element of the given type, store it in
            the collection object, and 
            </summary>
            <typeparam name="TElementType">Type of element to create and deserialize.</typeparam>
            <param name="baseElement">Parent element containing element to deserialize.</param>
            <param name="reader">Xml reader containing state to deserialize from.</param>
            <param name="elementCollection">Collection to store the created element into.</param>
            <returns>The created element.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ConfigurationElementExtensions.ReadElementByType``1(System.Configuration.ConfigurationElement,System.Xml.XmlReader,System.Type,Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DeserializableConfigurationElementCollectionBase{``0})">
            <summary>
            Deserialize an element, basing the element type on the one
            supplied at runtime, and then store the element into the
            given <paramref name="elementCollection"/>.
            </summary>
            <remarks>This method is useful when reading elements into a polymorphic collection.</remarks>
            <typeparam name="TElementType">Base type of element to store.</typeparam>
            <param name="baseElement">Element that contains the collection being stored into.</param>
            <param name="reader">Xml Reader containing state to deserialize from.</param>
            <param name="elementType">Runtime type of element to create.</param>
            <param name="elementCollection">Collection to store the created element into.</param>
            <returns>The created element.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DictionaryExtensions">
            <summary>
            A couple of useful extension methods on IDictionary
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.DictionaryExtensions.GetOrNull``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Get the value from a dictionary, or null if there is no value.
            </summary>
            <typeparam name="TKey">Key type of dictionary.</typeparam>
            <typeparam name="TValue">Value type of dictionary.</typeparam>
            <param name="dictionary">Dictionary to search.</param>
            <param name="key">Key to look up.</param>
            <returns>The value at the key or null if not in the dictionary.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.InputStream">
            <summary>
            Class that tracks the current input state of the parser.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.IValueProvidingElement">
            <summary>
            An element that has a child Value property.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.IValueProvidingElement.Value">
            <summary>
            String that will be deserialized to provide the value.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.IValueProvidingElement.DestinationName">
            <summary>
            A string describing where the value this element contains
            is being used. For example, if setting a property Prop1,
            this should return "property Prop1" (in english).
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseBuilder">
            <summary>
            A simple implementing of the rules for a Parsing Expression Grammar
            parsing algorithm. This supplies basic methods to do the primitives
            of the PEG, and combinators to create larger rules.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseBuilder.Any(Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.InputStream)">
            <summary>
            The PEG "dot" operator that matches and consumes one character.
            </summary>
            <param name="input">Input to the parser.</param>
            <returns>The parse result.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseBuilder.Match(System.Char)">
            <summary>
            Parse function generator that returns a method to match a single,
            specific character.
            </summary>
            <param name="charToMatch">Character to match.</param>
            <returns>The generated parsing function.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseBuilder.Match(System.Func{System.Char,System.Boolean})">
            <summary>
            Parse function generator that checks if the current character matches
            the predicate supplied.
            </summary>
            <param name="predicate">Predicate used to determine if the character is in
            the given range.</param>
            <returns>The generated parsing function.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseBuilder.ZeroOrMore(System.Func{Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.InputStream,Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult})">
            <summary>
            The "*" operator - match zero or more of the inner parse expressions.
            </summary>
            <param name="inner">Parse method to repeat matching.</param>
            <returns>The generated parsing function.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseBuilder.Sequence(System.Func{Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.InputStream,Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult}[])">
            <summary>
            Parsing combinator that matches all of the given expressions in
            order, or matches none of them.
            </summary>
            <param name="expressions">Expressions that form the sequence to match.</param>
            <returns>The combined sequence.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseBuilder.FirstOf(System.Func{Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.InputStream,Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult}[])">
            <summary>
            Parsing combinator that implements the PEG prioritized choice operator. Basically,
            try each of the expressions in order, and match if any of them match, stopping on the
            first match.
            </summary>
            <param name="expressions">Expressions that form the set of alternatives.</param>
            <returns>The combined parsing method.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseBuilder.Not(System.Func{Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.InputStream,Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult})">
            <summary>
            Parsing combinator implementing the "not" predicate. This wraps
            the given <paramref name="expression"/> parsing method with a check
            to see if it matched. If it matched, then the Not fails, and vice
            versa. The result consumes no input.
            </summary>
            <param name="expression">The parse method to wrap.</param>
            <returns>The generated parsing function.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseBuilder.EOF(Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.InputStream)">
            <summary>
            Parsing expression that matches End of input.
            </summary>
            <param name="input">Parser input.</param>
            <returns>Parse result</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseBuilder.WithAction(System.Func{Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.InputStream,Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult},System.Action{Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult})">
            <summary>
            Combinator that executes an action if the given expression matched.
            </summary>
            <param name="expression">Parsing expression to match.</param>
            <param name="onMatched">Action to execute if <paramref name="expression"/>
            matched. Input is the matched text from <paramref name="expression"/>.</param>
            <returns>The result of <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseBuilder.WithAction(System.Func{Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.InputStream,Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult},System.Func{Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult,Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult})">
            <summary>
            Combinator that executes an action if the given expression matched.
            </summary>
            <param name="expression">parsing expression to match.</param>
            <param name="onMatched">Method to execute if a match happens. This method returns
            the <see cref="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult"/> that will be returned from the combined expression.</param>
            <returns>The result of <paramref name="onMatched"/> if expression matched, else
            whatever <paramref name="expression"/> returned.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult">
            <summary>
            Object containing the result of attempting to match a PEG rule.
            This object is the return type for all parsing methods.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult.Matched">
            <summary>
            Did the rule match?
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult.MatchedString">
            <summary>
            The characters that were matched (if any)
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult.ResultData">
            <summary>
            Any extra information provided by the parsing expression
            (only set if the parse matched). The nature
            of the data varies depending on the parsing expression.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.SequenceResult">
            <summary>
            Helper methods to make it easier to pull the data
            out of the result of a sequence expression.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.SequenceResult.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.SequenceResult.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.SequenceResult.Add(Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.SequenceResult.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. 
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.SequenceResult.Contains(Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.SequenceResult.CopyTo(Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult[],System.Int32)">
            <summary>
            Copies the elements of the sequence to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this sequence. The <see cref="T:System.Array"/> must have zero-based indexing.
                            </param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
                            </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
                                -or-
                            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
                                -or-
                                The number of elements in the source is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.SequenceResult.Remove(Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.SequenceResult.IndexOf(Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.SequenceResult.Insert(System.Int32,Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ParseResult)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.
                            </param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.SequenceResult.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
                            </exception>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.SequenceResult.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.SequenceResult.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.SequenceResult.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
                            </exception>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeNameInfo">
            <summary>
            Class containing information about a type name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeNameInfo.Name">
            <summary>
            The base name of the class
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeNameInfo.Namespace">
            <summary>
            Namespace if any
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeNameInfo.AssemblyName">
            <summary>
            Assembly name, if any
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeResolver">
            <summary>
            Type that manage access to a set of type aliases and implements
            the logic for converting aliases to their actual types.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeResolver.SetAliases(Microsoft.Practices.Unity.Configuration.UnityConfigurationSection)">
            <summary>
            Set the set of aliases to use for resolution.
            </summary>
            <param name="section">Configuration section containing the various
            type aliases, namespaces and assemblies.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeResolver.ResolveType(System.String)">
            <summary>
            Resolves a type alias or type fullname to a concrete type.
            </summary>
            <param name="typeNameOrAlias">Type alias or type fullname</param>
            <returns>Type object or null if resolve fails.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if alias lookup fails.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeResolver.ResolveType(System.String,System.Boolean)">
            <summary>
            Resolves a type alias or type fullname to a concrete type.
            </summary>
            <param name="typeNameOrAlias">Alias or name to resolve.</param>
            <param name="throwIfResolveFails">if true and the alias does not
            resolve, throw an <see cref="T:System.InvalidOperationException"/>, otherwise 
            return null on failure.</param>
            <returns>The type object or null if resolve fails and 
            <paramref name="throwIfResolveFails"/> is false.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeResolver.ResolveTypeWithDefault(System.String,System.Type)">
            <summary>
            Resolve a type alias or type full name to a concrete type.
            If <paramref name="typeNameOrAlias"/> is null or empty, return the
            given <paramref name="defaultValue"/> instead.
            </summary>
            <param name="typeNameOrAlias">Type alias or full name to resolve.</param>
            <param name="defaultValue">Value to return if typeName is null or empty.</param>
            <returns>The concrete <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if alias lookup fails.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeResolver.ResolveTypeWithDefault(System.String,System.Type,System.Boolean)">
            <summary>
            Resolve a type alias or type full name to a concrete type.
            If <paramref name="typeNameOrAlias"/> is null or empty, return the
            given <paramref name="defaultValue"/> instead.
            </summary>
            <param name="typeNameOrAlias">Type alias or full name to resolve.</param>
            <param name="defaultValue">Value to return if typeName is null or empty.</param>
            <param name="throwIfResolveFails">if true and the alias does not
            resolve, throw an <see cref="T:System.InvalidOperationException"/>, otherwise 
            return null on failure.</param>
            <returns>The concrete <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if alias lookup fails and
            <paramref name="throwIfResolveFails"/> is true.</exception>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeResolverImpl">
            <summary>
            A helper class that implements the actual logic for resolving a shorthand
            type name (alias or raw type name) into an actual type object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeResolverImpl.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeResolverImpl"/> that uses the given
            sequence of alias, typename pairs to resolve types.
            </summary>
            <param name="aliasesSequence">Type aliases from the configuration file.</param>
            <param name="assemblies">Assembly names to search.</param>
            <param name="namespaces">Namespaces to search.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeResolverImpl.ResolveType(System.String,System.Boolean)">
            <summary>
            Resolves a type alias or type fullname to a concrete type.
            </summary>
            <param name="typeNameOrAlias">Alias or name to resolve.</param>
            <param name="throwIfResolveFails">if true and the alias does not
            resolve, throw an <see cref="T:System.InvalidOperationException"/>, otherwise 
            return null on failure.</param>
            <returns>The type object or null if resolve fails and 
            <paramref name="throwIfResolveFails"/> is false.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.TypeResolverImpl.ResolveTypeWithDefault(System.String,System.Type,System.Boolean)">
            <summary>
            Resolve a type alias or type full name to a concrete type.
            If <paramref name="typeNameOrAlias"/> is null or empty, return the
            given <paramref name="defaultValue"/> instead.
            </summary>
            <param name="typeNameOrAlias">Type alias or full name to resolve.</param>
            <param name="defaultValue">Value to return if typeName is null or empty.</param>
            <param name="throwIfResolveFails">if true and the alias does not
            resolve, throw an <see cref="T:System.InvalidOperationException"/>, otherwise 
            return null on failure.</param>
            <returns>
            <para>If <paramref name="typeNameOrAlias"/> is null or an empty string,
            then return <paramref name="defaultValue"/>.</para>
            <para>Otherwise, return the resolved type object. If the resolution fails
            and <paramref name="throwIfResolveFails"/> is false, then return null.</para>
            </returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.UnknownElementHandlerMap`1">
            <summary>
            A helper class used to map element tag names to a handler method
            used to interpret that element.
            </summary>
            <typeparam name="TContainingElement"></typeparam>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.UnknownElementHandlerMap`1.Add(System.String,System.Action{`0,System.Xml.XmlReader})">
            <summary>
            Add method to enable dictionary initializer syntax 
            </summary>
            <param name="elementName"></param>
            <param name="processingAction"></param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.UnknownElementHandlerMap`1.ProcessElement(`0,System.String,System.Xml.XmlReader)">
            <summary>
            Process an unknown element according to the map entries.
            </summary>
            <param name="parentElement">Parent element that hit this unknown element.</param>
            <param name="elementName">Name of the unknown element.</param>
            <param name="reader">XmlReader positioned at start of element.</param>
            <returns>true if processed, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.UnknownElementHandlerMap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.UnknownElementHandlerMap`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.UnknownElementHandlerMap">
            <summary>
            A helper class used to map element tag names to a handler method
            used to interpret that element.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.UnknownElementHandlerMap.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.UnknownElementHandlerMap.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ValueElementHelper">
            <summary>
            A helper class that assists in deserializing parameter and property
            elements. These elements both have a single "value" child element that
            specify the value to inject for the property or parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ValueElementHelper.#ctor(Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.IValueProvidingElement)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ValueElementHelper"/> that wraps reading
            values and storing them in the given <paramref name="parentElement"/>.
            </summary>
            <param name="parentElement">Element that contains the value elements.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ValueElementHelper.GetValue(Microsoft.Practices.Unity.Configuration.ParameterValueElement)">
            <summary>
            Gets a <see cref="T:Microsoft.Practices.Unity.Configuration.ParameterValueElement"/>, or if none is present,
            returns a default <see cref="T:Microsoft.Practices.Unity.Configuration.DependencyElement"/>.
            </summary>
            <param name="currentValue">The <see cref="T:Microsoft.Practices.Unity.Configuration.ParameterValueElement"/>.</param>
            <returns>The given <paramref name="currentValue"/>, unless
            <paramref name="currentValue"/> is null, in which case returns
            a <see cref="T:Microsoft.Practices.Unity.Configuration.DependencyElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ValueElementHelper.DeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Helper method used during deserialization to handle
            attributes for the dependency and value tags.
            </summary>
            <param name="name">attribute name.</param>
            <param name="value">attribute value.</param>
            <returns>true</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ValueElementHelper.DeserializeUnknownElement(System.String,System.Xml.XmlReader)">
            <summary>
            Helper method used during deserialization to handle the default
            value element tags.
            </summary>
            <param name="elementName">The element name.</param>
            <param name="reader">XML data to read.</param>
            <returns>True if deserialization succeeded, false if it failed.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ValueElementHelper.CompleteValueElement(System.Xml.XmlReader)">
            <summary>
            Call this method at the end of deserialization of your element to
            set your value element.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.ValueElementHelper.SerializeParameterValueElement(System.Xml.XmlWriter,Microsoft.Practices.Unity.Configuration.ParameterValueElement,System.Boolean)">
            <summary>
            Serialize a <see cref="T:Microsoft.Practices.Unity.Configuration.ParameterValueElement"/> object out to XML.
            This method is aware of and implements the shorthand attributes
            for dependency and value elements.
            </summary>
            <param name="writer">Writer to output XML to.</param>
            <param name="element">The <see cref="T:Microsoft.Practices.Unity.Configuration.ParameterValueElement"/> to serialize.</param>
            <param name="elementsOnly">If true, always output an element. If false, then
            dependency and value elements will be serialized as attributes in the parent tag.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.XmlWriterExtensions">
            <summary>
            Helper methods on <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.XmlWriterExtensions.WriteElement(System.Xml.XmlWriter,System.String,System.Action{System.Xml.XmlWriter})">
            <summary>
            A helper method to make it more foolproof to write elements. This takes care of writing the
            start and end elment tags, and takes a nested closure with the code to write the content of
            the tag. That way the caller doesn't need to worry about the details of getting the start
            and end tags correct.
            </summary>
            <remarks>
            We don't support XML Namespaces here because .NET configuration doesn't use them so
            we don't need it for this current implementation.
            </remarks>
            <param name="writer">XmlWriter to write to.</param>
            <param name="elementName">Name of element.</param>
            <param name="writeContent">Nested lambda which, when executed, will create the content for the
            element.</param>
            <returns><paramref name="writer"/> (for method chaining if desired).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConfigurationHelpers.XmlWriterExtensions.WriteAttributeIfNotEmpty(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            A helper method to make it easier to output attributes. If the <paramref name="attributeValue"/> is
            null or an empty string, output nothing, else output the given XML attribute.
            </summary>
            <param name="writer">Writer to output to.</param>
            <param name="attributeName">Attribute name to write.</param>
            <param name="attributeValue">Value for the attribute.</param>
            <returns><paramref name="writer"/> (for method chaining if desired).</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ConstructorElement">
            <summary>
            Configuration element representing a constructor configuration.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.InjectionMemberElement">
            <summary>
            Base class for configuration elements that generate <see cref="T:Microsoft.Practices.Unity.InjectionMember"/>
            object to configure a container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.InjectionMemberElement.GetInjectionMembers(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,System.String)">
            <summary>
            Return the set of <see cref="T:Microsoft.Practices.Unity.InjectionMember"/>s that are needed
            to configure the container according to this configuration element.
            </summary>
            <param name="container">Container that is being configured.</param>
            <param name="fromType">Type that is being registered.</param>
            <param name="toType">Type that <paramref name="fromType"/> is being mapped to.</param>
            <param name="name">Name this registration is under.</param>
            <returns>One or more <see cref="T:Microsoft.Practices.Unity.InjectionMember"/> objects that should be
            applied to the container registration.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.InjectionMemberElement.GetMemberElementName(Microsoft.Practices.Unity.Configuration.InjectionMemberElement)">
            <summary>
            Get the standard tag name for an <see cref="T:Microsoft.Practices.Unity.Configuration.InjectionMemberElement"/>
            taking into account currently loaded section extensions.
            </summary>
            <param name="memberElement">Element to get the name for.</param>
            <returns>The element name.</returns>
            <exception cref="T:System.ArgumentException">If the member element is not currently registered
            with the section.</exception>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.InjectionMemberElement.Key">
            <summary>
            Each element must have a unique key, which is generated by the subclasses.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.InjectionMemberElement.ElementName">
            <summary>
            Element name to use to serialize this into XML.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConstructorElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ConstructorElement.GetInjectionMembers(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,System.String)">
            <summary>
            Return the set of <see cref="T:Microsoft.Practices.Unity.InjectionMember"/>s that are needed
            to configure the container according to this configuration element.
            </summary>
            <param name="container">Container that is being configured.</param>
            <param name="fromType">Type that is being registered.</param>
            <param name="toType">Type that <paramref name="fromType"/> is being mapped to.</param>
            <param name="name">Name this registration is under.</param>
            <returns>One or more <see cref="T:Microsoft.Practices.Unity.InjectionMember"/> objects that should be
            applied to the container registration.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConstructorElement.Parameters">
            <summary>
            The parameters of the constructor to call.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConstructorElement.Key">
            <summary>
            Each element must have a unique key, which is generated by the subclasses.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ConstructorElement.ElementName">
            <summary>
            Element name to use to serialize this into XML.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ContainerConfiguringElement">
            <summary>
            A base class for those elements that can be used
            to configure a unity container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfiguringElement.#ctor">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerConfiguringElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfiguringElement.ConfigureContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Apply this element's configuration to the given <paramref name="container"/>.
            </summary>
            <param name="container">Container to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ContainerConfiguringElement.Key">
            <summary>
            Return a unique key that can be used to manage this element in a collection.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ContainerConfiguringElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerConfiguringElement"/>s as
            loaded from configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfiguringElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerConfiguringElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ContainerElement">
            <summary>
            A configuration element class defining the set of registrations to be
            put into a container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerElement.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Original configuration API kept for backwards compatibility.
            </summary>
            <param name="container">Container to configure</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerElement.ConfigureContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Apply the configuration information in this element to the
            given <paramref name="container"/>.
            </summary>
            <param name="container">Container to configure.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Gets a value indicating whether an unknown element is encountered during deserialization.
            </summary>
            <returns>
            true when an unknown element is encountered while deserializing; otherwise, false.
            </returns>
            <param name="elementName">The name of the unknown subelement.
                            </param><param name="reader">The <see cref="T:System.Xml.XmlReader"/> being used for deserialization.
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element identified by <paramref name="elementName"/> is locked.
                                - or -
                                One or more of the element's attributes is locked.
                                - or -
                            <paramref name="elementName"/> is unrecognized, or the element has an unrecognized attribute.
                                - or -
                                The element has a Boolean attribute with an invalid value.
                                - or -
                                An attempt was made to deserialize a property more than once.
                                - or -
                                An attempt was made to deserialize a property that is not a valid member of the element.
                                - or -
                                The element cannot contain a CDATA or text element.
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ContainerElement.Name">
            <summary>
            Name for this container configuration as given in the config file.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ContainerElement.Registrations">
            <summary>
            The type registrations in this container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ContainerElement.Instances">
            <summary>
            Any instances to register in the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ContainerElement.Extensions">
            <summary>
            Any extensions to add to the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ContainerElement.ConfiguringElements">
            <summary>
            Set of any extra configuration elements that were added by a
            section extension.
            </summary>
            <remarks>
            This is not marked as a configuration property because we don't want
            the actual property to show up as a nested element in the configuration.</remarks>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ContainerElementCollection">
            <summary>
            Collection element for <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerElement"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerElementCollection.GetElement(System.Int32)">
            <summary>
            Plug point to get objects out of the collection.
            </summary>
            <param name="index">Index in the collection to retrieve the item from.</param>
            <returns>Item at that index or null if not present.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerElementCollection.GetElement(System.Object)">
            <summary>
            Plug point to get objects out of the collection.
            </summary>
            <param name="key">Key to look up the object by.</param>
            <returns>Item with that key or null if not present.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ContainerElementCollection.Item(System.String)">
            <summary>
            Retrieve a stored <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerElement"/> by name.
            </summary>
            <param name="name">Name to look up.</param>
            <returns>The stored container or null if not in the collection.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ContainerElementCollection.Default">
            <summary>
            Return the default container in the collection. The default is the one without a name.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ContainerExtensionElement">
            <summary>
            Configuration element representing an extension to add to a container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerExtensionElement.ConfigureContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Add the extension specified in this element to the container.
            </summary>
            <param name="container">Container to configure.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerExtensionElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ContainerExtensionElement.TypeName">
            <summary>
            Type of the extension to add.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ContainerExtensionElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerExtensionElement"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ContainerExtensionElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.DependencyElement">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.Configuration.ParameterValueElement"/> derived class that describes
            a parameter that should be resolved through the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.DependencyElement.#ctor">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.Unity.Configuration.DependencyElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.DependencyElement.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.Unity.Configuration.DependencyElement"/> with
            properties initialized from the contents of 
            <paramref name="attributeValues"/>.
            </summary>
            <param name="attributeValues">Dictionary of name/value pairs to
            initialize this object with.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.DependencyElement.Microsoft#Practices#Unity#Configuration#IAttributeOnlyElement#SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.DependencyElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
             Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>. This
             method always outputs an explicit &lt;dependency&gt; tag, instead of providing
             attributes to the parent method.
            </summary>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.DependencyElement.GetInjectionParameterValue(Microsoft.Practices.Unity.IUnityContainer,System.Type)">
            <summary>
            Generate an <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> object
            that will be used to configure the container for a type registration.
            </summary>
            <param name="container">Container that is being configured. Supplied in order
            to let custom implementations retrieve services; do not configure the container
            directly in this method.</param>
            <param name="parameterType">Type of the </param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.DependencyElement.Name">
            <summary>
            Name to use to when resolving. If empty, resolves the default.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.DependencyElement.TypeName">
            <summary>
            Name of type this dependency should resolve to. This is optional;
            without it the container will resolve the type of whatever
            property or parameter this element is contained in.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ExtensionConfigurationElement">
            <summary>
            Base class used to derive new elements that can occur
            directly within a container element.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ExtensionConfigurationElement.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Microsoft.Practices.Unity.Configuration.ExtensionConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ExtensionConfigurationElement.ConfigureContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            When overridden in a derived class, this method will make configuration
            calls into the given <paramref name="container"/> according to its contents.
            </summary>
            <param name="container">The container to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ExtensionConfigurationElement.Key">
            <summary>
            Unique key generated for use in the collection class.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ExtensionConfigurationElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.Configuration.ExtensionConfigurationElement"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ExtensionConfigurationElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ExtensionConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ExtensionElementMap">
            <summary>
            This class manages the set of extension elements
            added by section elements.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ExtensionElementMap.Clear">
            <summary>
            Clear the current set of extension elements.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ExtensionElementMap.AddContainerConfiguringElement(System.String,System.String,System.Type)">
            <summary>
            Register a new ContainerExtensionConfigurationElement with he section so it
            can be read.
            </summary>
            <param name="prefix">prefix if any.</param>
            <param name="tag">tag name.</param>
            <param name="elementType">Type of element to register.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ExtensionElementMap.AddInjectionMemberElement(System.String,System.String,System.Type)">
            <summary>
            Register a new <see cref="T:Microsoft.Practices.Unity.Configuration.InjectionMemberElement"/> with the section
            so it can be read.
            </summary>
            <param name="prefix">prefix if any.</param>
            <param name="tag">Tag name.</param>
            <param name="elementType">Type of element to register.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ExtensionElementMap.AddParameterValueElement(System.String,System.String,System.Type)">
            <summary>
            Register a new <see cref="T:Microsoft.Practices.Unity.Configuration.ParameterValueElement"/> with the section
            so it can be read.
            </summary>
            <param name="prefix">prefix if any.</param>
            <param name="tag">Tag name.</param>
            <param name="elementType">Type of element to register.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ExtensionElementMap.GetContainerConfiguringElementType(System.String)">
            <summary>
            Retrieve the <see cref="T:Microsoft.Practices.Unity.Configuration.ContainerConfiguringElement"/> registered for the given
            tag.
            </summary>
            <param name="tag">Tag to look up.</param>
            <returns>Type of element, or null if not registered.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ExtensionElementMap.GetInjectionMemberElementType(System.String)">
            <summary>
            Retrieve the ContainerExtensionConfigurationElement registered for the given
            tag.
            </summary>
            <param name="tag">Tag to look up.</param>
            <returns>Type of element, or null if not registered.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ExtensionElementMap.GetParameterValueElementType(System.String)">
            <summary>
            Retrieve the ContainerExtensionConfigurationElement registered for the given
            tag.
            </summary>
            <param name="tag">Tag to look up.</param>
            <returns>Type of element, or null if not registered.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ExtensionElementMap.GetTagForExtensionElement(System.Configuration.ConfigurationElement)">
            <summary>
            Retrieve the correct tag to use when serializing the given
            <paramref name="element"/> to XML.
            </summary>
            <param name="element">Element to be serialized.</param>
            <returns>The tag for that element type.</returns>
            <exception cref="T:System.ArgumentException"> if the element is of a type that
            is not registered with the section already.</exception>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.InjectionMemberElementCollection">
            <summary>
            A polymorphic collection of <see cref="T:Microsoft.Practices.Unity.Configuration.InjectionMemberElement"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.InjectionMemberElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Causes the configuration system to throw an exception.
            </summary>
            <returns>
            true if the unrecognized element was deserialized successfully; otherwise, false. The default is false.
            </returns>
            <param name="elementName">The name of the unrecognized element. 
                            </param><param name="reader">An input stream that reads XML from the configuration file. 
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element specified in <paramref name="elementName"/> is the &lt;clear&gt; element.
                            </exception><exception cref="T:System.ArgumentException"><paramref name="elementName"/> starts with the reserved prefix "config" or "lock".
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.InjectionMemberElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.InjectionMemberElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.InjectionMemberElementCollection.Item(System.String)">
            <summary>
            Indexer that lets you access elements by their key.
            </summary>
            <param name="key">Key to retrieve element with.</param>
            <returns>The element.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.InstanceElement">
            <summary>
            A configuration element that describes an instance to add to the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.InstanceElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.InstanceElement.ConfigureContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Add the instance defined by this element to the given container.
            </summary>
            <param name="container">Container to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.InstanceElement.Name">
            <summary>
            Name to register instance under
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.InstanceElement.Value">
            <summary>
            Value for this instance
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.InstanceElement.TypeName">
            <summary>
            Type of the instance. If not given, defaults to string
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.InstanceElement.TypeConverterTypeName">
            <summary>
            Type name for the type converter to use to create the instance. If not
            given, defaults to the default type converter for this instance type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.InstanceElement.Key">
            <summary>
            Key used to keep these instances unique in the config collection.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.InstanceElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.Configuration.InstanceElement"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.InstanceElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.LifetimeElement">
            <summary>
            A configuration element that represents lifetime managers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.LifetimeElement.CreateLifetimeManager">
            <summary>
            Create the <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> described by
            this element.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.LifetimeElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.LifetimeElement.TypeName">
            <summary>
            Type of the lifetime manager.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.LifetimeElement.Value">
            <summary>
            Extra initialization information used by the type converter for this lifetime manager.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.LifetimeElement.TypeConverterTypeName">
            <summary>
            Type of <see cref="T:System.ComponentModel.TypeConverter"/> to use to create the
            lifetime manager.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.MethodElement">
            <summary>
            A configuration element representing a method to call.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.MethodElement.#ctor">
            <summary>
            Construct a new instance of <see cref="T:Microsoft.Practices.Unity.Configuration.MethodElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.MethodElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.MethodElement.GetInjectionMembers(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,System.String)">
            <summary>
            Return the set of <see cref="T:Microsoft.Practices.Unity.InjectionMember"/>s that are needed
            to configure the container according to this configuration element.
            </summary>
            <param name="container">Container that is being configured.</param>
            <param name="fromType">Type that is being registered.</param>
            <param name="toType">Type that <paramref name="fromType"/> is being mapped to.</param>
            <param name="name">Name this registration is under.</param>
            <returns>One or more <see cref="T:Microsoft.Practices.Unity.InjectionMember"/> objects that should be
            applied to the container registration.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.MethodElement.Name">
            <summary>
            Name of the method to call.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.MethodElement.Parameters">
            <summary>
            Parameters to the method call.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.MethodElement.Key">
            <summary>
            Each element must have a unique key, which is generated by the subclasses.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.MethodElement.ElementName">
            <summary>
            Element name to use to serialize this into XML.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.NamespaceElement">
            <summary>
            A configuration element representing the namespace
            tags in the config file.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.NamespaceElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.Configuration.NamespaceElement"/>s in configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.NamespaceElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.OptionalElement">
            <summary>
            A configuration element that specifies that a value
            is optional.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.OptionalElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.OptionalElement.GetInjectionParameterValue(Microsoft.Practices.Unity.IUnityContainer,System.Type)">
            <summary>
            Generate an <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> object
            that will be used to configure the container for a type registration.
            </summary>
            <param name="container">Container that is being configured. Supplied in order
            to let custom implementations retrieve services; do not configure the container
            directly in this method.</param>
            <param name="parameterType">Type of the </param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.OptionalElement.Name">
            <summary>
            Name used to resolve the dependency, leave out or blank to resolve default.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.OptionalElement.TypeName">
            <summary>
            Type of dependency to resolve. If left out, resolved the type of
            the containing parameter or property.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ParameterElement">
            <summary>
            Configuration element representing a parameter passed to a constructor
            or a method.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ParameterElement.#ctor">
            <summary>
            Construct a new instance of <see cref="T:Microsoft.Practices.Unity.Configuration.ParameterElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ParameterElement.GetParameterValue(Microsoft.Practices.Unity.IUnityContainer,System.Type)">
            <summary>
            Returns the required <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> needed
            to configure the container so that the correct value is injected.
            </summary>
            <param name="container">Container being configured.</param>
            <param name="parameterType">Type of the parameter.</param>
            <returns>The value to use to configure the container.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ParameterElement.Matches(System.Reflection.ParameterInfo)">
            <summary>
            Does the information in this <see cref="T:Microsoft.Practices.Unity.Configuration.ParameterElement"/> match
            up with the given <paramref name="parameterInfo"/>?
            </summary>
            <param name="parameterInfo">Information about the parameter.</param>
            <returns>True if this is a match, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ParameterElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Reads XML from the configuration file.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that reads from the configuration file.
                            </param><param name="serializeCollectionKey">true to serialize only the collection key properties; otherwise, false.
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element to read is locked.
                                - or -
                                An attribute of the current node is not recognized.
                                - or -
                                The lock status of the current node cannot be determined.  
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ParameterElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Gets a value indicating whether an unknown attribute is encountered during deserialization.
            </summary>
            <returns>
            true when an unknown attribute is encountered while deserializing; otherwise, false.
            </returns>
            <param name="name">The name of the unrecognized attribute.
                            </param><param name="value">The value of the unrecognized attribute.
                            </param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ParameterElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Gets a value indicating whether an unknown element is encountered during deserialization.
            </summary>
            <returns>
            true when an unknown element is encountered while deserializing; otherwise, false.
            </returns>
            <param name="elementName">The name of the unknown subelement.
                            </param><param name="reader">The <see cref="T:System.Xml.XmlReader"/> being used for deserialization.
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element identified by <paramref name="elementName"/> is locked.
                                - or -
                                One or more of the element's attributes is locked.
                                - or -
                            <paramref name="elementName"/> is unrecognized, or the element has an unrecognized attribute.
                                - or -
                                The element has a Boolean attribute with an invalid value.
                                - or -
                                An attempt was made to deserialize a property more than once.
                                - or -
                                An attempt was made to deserialize a property that is not a valid member of the element.
                                - or -
                                The element cannot contain a CDATA or text element.
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ParameterElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ParameterElement.Name">
            <summary>
            Name of this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ParameterElement.TypeName">
            <summary>
            Type of this parameter.
            </summary>
            <remarks>This is only needed in order to disambiguate method overloads. Normally
            the parameter name is sufficient.</remarks>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ParameterElement.Value">
            <summary>
            Element that describes the value for this property.
            </summary>
            <remarks>
            This is NOT marked as a ConfigurationProperty because this
            child element is polymorphic, and the element tag determines
            the type. Standard configuration properties only let you do
            this if it's a collection, but we only want one value. Thus
            the separate property. The element is deserialized in 
            <see cref="M:Microsoft.Practices.Unity.Configuration.ParameterElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)"/>.</remarks>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ParameterElement.DestinationName">
            <summary>
            A string describing where the value this element contains
            is being used. For example, if setting a property Prop1,
            this should return "property Prop1" (in english).
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ParameterElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.Configuration.ParameterElement"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ParameterElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ParameterValueElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.Configuration.ParameterValueElement"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ParameterValueElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Causes the configuration system to throw an exception.
            </summary>
            <returns>
            true if the unrecognized element was deserialized successfully; otherwise, false. The default is false.
            </returns>
            <param name="elementName">The name of the unrecognized element. 
                            </param><param name="reader">An input stream that reads XML from the configuration file. 
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element specified in <paramref name="elementName"/> is the &lt;clear&gt; element.
                            </exception><exception cref="T:System.ArgumentException"><paramref name="elementName"/> starts with the reserved prefix "config" or "lock".
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ParameterValueElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ParameterValueElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ParameterValueElementCollection.DeserializedElementHolder.Value">
            <summary>
            String that will be deserialized to provide the value.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ParameterValueElementCollection.DeserializedElementHolder.DestinationName">
            <summary>
            A string describing where the value this element contains
            is being used. For example, if setting a property Prop1,
            this should return "property Prop1" (in english).
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.PropertyElement">
            <summary>
            A class representing a property configuration element.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.PropertyElement.#ctor">
            <summary>
            Construct a new instance of <see cref="T:Microsoft.Practices.Unity.Configuration.PropertyElement"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.PropertyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Reads XML from the configuration file.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that reads from the configuration file.
                            </param><param name="serializeCollectionKey">true to serialize only the collection key properties; otherwise, false.
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element to read is locked.
                                - or -
                                An attribute of the current node is not recognized.
                                - or -
                                The lock status of the current node cannot be determined.  
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.PropertyElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Gets a value indicating whether an unknown attribute is encountered during deserialization.
            </summary>
            <returns>
            true when an unknown attribute is encountered while deserializing; otherwise, false.
            </returns>
            <param name="name">The name of the unrecognized attribute.
                            </param><param name="value">The value of the unrecognized attribute.
                            </param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.PropertyElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Gets a value indicating whether an unknown element is encountered during deserialization.
            </summary>
            <returns>
            true when an unknown element is encountered while deserializing; otherwise, false.
            </returns>
            <param name="elementName">The name of the unknown subelement.
                            </param><param name="reader">The <see cref="T:System.Xml.XmlReader"/> being used for deserialization.
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element identified by <paramref name="elementName"/> is locked.
                                - or -
                                One or more of the element's attributes is locked.
                                - or -
                            <paramref name="elementName"/> is unrecognized, or the element has an unrecognized attribute.
                                - or -
                                The element has a Boolean attribute with an invalid value.
                                - or -
                                An attempt was made to deserialize a property more than once.
                                - or -
                                An attempt was made to deserialize a property that is not a valid member of the element.
                                - or -
                                The element cannot contain a CDATA or text element.
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.PropertyElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.PropertyElement.GetInjectionMembers(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,System.String)">
            <summary>
            Return the set of <see cref="T:Microsoft.Practices.Unity.InjectionMember"/>s that are needed
            to configure the container according to this configuration element.
            </summary>
            <param name="container">Container that is being configured.</param>
            <param name="fromType">Type that is being registered.</param>
            <param name="toType">Type that <paramref name="fromType"/> is being mapped to.</param>
            <param name="name">Name this registration is under.</param>
            <returns>One or more <see cref="T:Microsoft.Practices.Unity.InjectionMember"/> objects that should be
            applied to the container registration.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.PropertyElement.Name">
            <summary>
            Name of the property that will be set.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.PropertyElement.Key">
            <summary>
            Each element must have a unique key, which is generated by the subclasses.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.PropertyElement.Value">
            <summary>
            String that will be deserialized to provide the value.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.PropertyElement.DestinationName">
            <summary>
            A string describing where the value this element contains
            is being used. For example, if setting a property Prop1,
            this should return "property Prop1" (in english).
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.PropertyElement.ElementName">
            <summary>
            Element name to use to serialize this into XML.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.RegisterElement">
            <summary>
            A configuration element representing a single container type registration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterElement.ConfigureContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Apply the registrations from this element to the given container.
            </summary>
            <param name="container">Container to configure.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.RegisterElement.TypeName">
            <summary>
            The type that is registered.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.RegisterElement.Name">
            <summary>
            Name registered under.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.RegisterElement.MapToName">
            <summary>
            Type that is mapped to.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.RegisterElement.Lifetime">
            <summary>
            Lifetime manager to register for this registration.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.RegisterElement.InjectionMembers">
            <summary>
            Any injection members (constructor, properties, etc.) that are specified for
            this registration.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.RegisterElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterElement"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Causes the configuration system to throw an exception.
            </summary>
            <returns>
            true if the unrecognized element was deserialized successfully; otherwise, false. The default is false.
            </returns>
            <param name="elementName">The name of the unrecognized element. 
                            </param><param name="reader">An input stream that reads XML from the configuration file. 
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element specified in <paramref name="elementName"/> is the &lt;clear&gt; element.
                            </exception><exception cref="T:System.ArgumentException"><paramref name="elementName"/> starts with the reserved prefix "config" or "lock".
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.RegisterElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.CannotCreateContainerConfiguringElement">
            <summary>
              查找类似 An abstract ContainerConfiguringElement cannot be created. Please specify a concrete type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.CannotCreateExtensionConfigurationElement">
            <summary>
              查找类似 An abstract ExtensionConfigurationElement object cannot be created. Please specify a concrete type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.CannotCreateInjectionMemberElement">
            <summary>
              查找类似 An abstract InjectionMemberElement object cannot be created. Please specify a concrete type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.CannotCreateParameterValueElement">
            <summary>
              查找类似 An abstract ParameterValueElement object cannot be created. Please specify a concrete type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.CouldNotResolveType">
            <summary>
              查找类似 The type name or alias {0} could not be resolved. Please check your configuration file and verify this type name. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.DependencyForGenericParameterWithTypeSet">
            <summary>
              查找类似 The dependency element for generic parameter {0} must not have an explicit type name but has &apos;{1}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.DependencyForOptionalGenericParameterWithTypeSet">
            <summary>
              查找类似 The optional dependency element for generic parameter {0} must not have an explicit type name but has &apos;{1}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.DestinationNameFormat">
            <summary>
              查找类似 {0} {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.DuplicateParameterValueElement">
            <summary>
              查找类似 The injection configuration for {0} has multiple values. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.ElementTypeNotRegistered">
            <summary>
              查找类似 The configuration element type {0} has not been registered with the section. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.ElementWithAttributesAndParameterValueElements">
            <summary>
              查找类似 The injection configuration for {0} is specified through both attributes and child value elements. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.ExtensionTypeNotFound">
            <summary>
              查找类似 Could not load section extension type {0}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.ExtensionTypeNotValid">
            <summary>
              查找类似 The extension type {0} does not derive from SectionExtension. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.InvalidExtensionElementType">
            <summary>
              查找类似 The extension element type {0} that is being added does not derive from ContainerConfiguringElement, InjectionMemberElement, or ParameterValueElement. An extension element must derive from one of these types. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.InvalidValueAttributes">
            <summary>
              查找类似 No valid attributes were found to construct the value for the {0}. Please check the configuration file. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.NoMatchingConstructor">
            <summary>
              查找类似 Configuration is incorrect, the type {0} does not have a constructor that takes parameters named {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.NoMatchingMethod">
            <summary>
              查找类似 Configuration is incorrect, the type {0} does not have a method named {1} that takes parameters named {2}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.NoSuchContainer">
            <summary>
              查找类似 The container named &quot;{0}&quot; is not defined in this configuration section. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.NoSuchProperty">
            <summary>
              查找类似 The type {0} does not have a property named {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.NotAnArray">
            <summary>
              查找类似 The configuration is set to inject an array, but the type {0} is not an array type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.Parameter">
            <summary>
              查找类似 parameter 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.Property">
            <summary>
              查找类似 property 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.RequiredPropertyMissing">
            <summary>
              查找类似 The attribute {0} must be present and non-empty. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.ValueNotAllowedForGenericArrayType">
            <summary>
              查找类似 The value element for {1} was specified for the generic array type {0}. Value elements are not allowed for generic array types. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.ValueNotAllowedForGenericParameterType">
            <summary>
              查找类似 The value element for {1} was specified for the generic parameter type {0}. Value elements are not allowed for generic parameter types. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.Properties.Resources.ValueNotAllowedForOpenGenericType">
            <summary>
              查找类似 The value element for {1} was specified for the generic type {0}. Value elements are not allowed for generic types. 的本地化字符串。
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.SectionExtension">
            <summary>
            Base class for Unity configuration section extensions.
            Derived classes are used to add custom elments and aliases
            into the configuration section being loaded.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.SectionExtension.AddExtensions(Microsoft.Practices.Unity.Configuration.SectionExtensionContext)">
            <summary>
            Add the extensions to the section via the context.
            </summary>
            <param name="context">Context object that can be used to add elements and aliases.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.SectionExtensionContext">
            <summary>
            An object that gives the ability to add
            elements and aliases to a configuration section.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.SectionExtensionContext.AddAlias(System.String,System.Type)">
            <summary>
            Add a new alias to the configuration section. This is useful
            for those extensions that add commonly used types to configuration
            so users don't have to alias them repeatedly.
            </summary>
            <param name="newAlias">The alias to use.</param>
            <param name="aliasedType">Type the alias maps to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.SectionExtensionContext.AddAlias``1(System.String)">
            <summary>
            Add a new alias to the configuration section. This is useful
            for those extensions that add commonly used types to configuration
            so users don't have to alias them repeatedly.
            </summary>
            <typeparam name="TAliased">Type the alias maps to.</typeparam>
            <param name="alias">The alias to use</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.SectionExtensionContext.AddElement(System.String,System.Type)">
            <summary>
            Add a new element to the configuration section schema.
            </summary>
            <param name="tag">Tag name in the XML.</param>
            <param name="elementType">Type the tag maps to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.SectionExtensionContext.AddElement``1(System.String)">
            <summary>
            Add a new element to the configuration section schema.
            </summary>
            <typeparam name="TElement">Type the tag maps to.</typeparam>
            <param name="tag">Tag name in the XML.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.SectionExtensionElement">
            <summary>
            A configuration element used to specify which extensions to
            add to the configuration schema.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.SectionExtensionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Reads XML from the configuration file.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that reads from the configuration file.
                            </param><param name="serializeCollectionKey">true to serialize only the collection key properties; otherwise, false.
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element to read is locked.
                                - or -
                                An attribute of the current node is not recognized.
                                - or -
                                The lock status of the current node cannot be determined.  
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.SectionExtensionElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.SectionExtensionElement.TypeName">
            <summary>
            Type of the section extender object that will provide new elements to the schema.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.SectionExtensionElement.Prefix">
            <summary>
            Optional prefix that will be added to the element names added by this
            section extender. If left out, no prefix will be added.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.SectionExtensionElement.ExtensionObject">
            <summary>
            The extension object represented by this element.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.SectionExtensionElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.Configuration.SectionExtensionElement"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.SectionExtensionElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection">
            <summary>
            A configuration section describing configuration for an <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.SectionName">
            <summary>
            The name of the section where unity configuration is expected to be found.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.XmlNamespace">
            <summary>
            XML Namespace string used for IntelliSense in this section.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.Configure(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Apply the configuration in the default container element to the given container.
            </summary>
            <param name="container">Container to configure.</param>
            <returns>The passed in <paramref name="container"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.Configure(Microsoft.Practices.Unity.IUnityContainer,System.String)">
            <summary>
            Apply the configuration in the default container element to the given container.
            </summary>
            <param name="container">Container to configure.</param>
            <param name="configuredContainerName">Name of the container element to use to configure the container.</param>
            <returns>The passed in <paramref name="container"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.DeserializeSection(System.Xml.XmlReader)">
            <summary>
            Reads XML from the configuration file.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> object, which reads from the configuration file. 
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="reader"/> found no elements in the configuration file.
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Gets a value indicating whether an unknown element is encountered during deserialization.
            </summary>
            <returns>
            true when an unknown element is encountered while deserializing; otherwise, false.
            </returns>
            <param name="elementName">The name of the unknown subelement.
                            </param><param name="reader">The <see cref="T:System.Xml.XmlReader"/> being used for deserialization.
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element identified by <paramref name="elementName"/> is locked.
                                - or -
                                One or more of the element's attributes is locked.
                                - or -
                            <paramref name="elementName"/> is unrecognized, or the element has an unrecognized attribute.
                                - or -
                                The element has a Boolean attribute with an invalid value.
                                - or -
                                An attempt was made to deserialize a property more than once.
                                - or -
                                An attempt was made to deserialize a property that is not a valid member of the element.
                                - or -
                                The element cannot contain a CDATA or text element.
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.SerializeSection(System.Configuration.ConfigurationElement,System.String,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Creates an XML string containing an unmerged view of the <see cref="T:System.Configuration.ConfigurationSection"/> object as a single section to write to a file.
            </summary>
            <returns>
            An XML string containing an unmerged view of the <see cref="T:System.Configuration.ConfigurationSection"/> object.
            </returns>
            <param name="parentElement">The <see cref="T:System.Configuration.ConfigurationElement"/> instance to use as the parent when performing the un-merge.
                            </param><param name="name">The name of the section to create.
                            </param><param name="saveMode">The <see cref="T:System.Configuration.ConfigurationSaveMode"/> instance to use when writing to a string.
                            </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.CurrentSection">
            <summary>
            The current <see cref="T:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection"/> that is being deserialized
            or being configured from.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.Xmlns">
            <summary>
            Storage for XML namespace. The namespace isn't used or validated by config, but
            it is useful for Visual Studio XML IntelliSense to kick in.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.Containers">
            <summary>
            The set of containers defined in this configuration section.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.TypeAliases">
            <summary>
            The set of type aliases defined in this configuration file.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.SectionExtensions">
            <summary>
            Any schema extensions that are added.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.Namespaces">
            <summary>
            Any namespaces added to the type search list.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.Assemblies">
            <summary>
            Any assemblies added to the type search list.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.ExtensionContext.AddAlias(System.String,System.Type)">
            <summary>
            Add a new alias to the configuration section. This is useful
            for those extensions that add commonly used types to configuration
            so users don't have to alias them repeatedly.
            </summary>
            <param name="newAlias">The alias to use.</param>
            <param name="aliasedType">Type the alias maps to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityConfigurationSection.ExtensionContext.AddElement(System.String,System.Type)">
            <summary>
            Add a new element to the configuration section schema.
            </summary>
            <param name="tag">Tag name in the XML.</param>
            <param name="elementType">Type the tag maps to.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.UnityContainerExtensions">
            <summary>
            Extensions to <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to simplify
            loading configuration into a container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensions.LoadConfiguration(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.Configuration.UnityConfigurationSection,System.String)">
            <summary>
            Apply configuration from the given section and named container
            into the given container.
            </summary>
            <param name="container">Unity container to configure.</param>
            <param name="section">Configuration section with config information.</param>
            <param name="containerName">Named container.</param>
            <returns><paramref name="container"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensions.LoadConfiguration(Microsoft.Practices.Unity.IUnityContainer,System.String)">
            <summary>
            Apply configuration from the default section (named "unity" pulled out of
            ConfigurationManager) and the named container.
            </summary>
            <param name="container">Unity container to configure.</param>
            <param name="containerName">Named container element in configuration.</param>
            <returns><paramref name="container"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensions.LoadConfiguration(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Apply configuration from the default section and unnamed container element.
            </summary>
            <param name="container">Container to configure.</param>
            <returns><paramref name="container"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.UnityContainerExtensions.LoadConfiguration(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.Configuration.UnityConfigurationSection)">
            <summary>
            Apply configuration from the default container in the given section.
            </summary>
            <param name="container">Unity container to configure.</param>
            <param name="section">Configuration section.</param>
            <returns><paramref name="container"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Configuration.ValueElement">
            <summary>
            Element that describes a constant value that will be
            injected into the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ValueElement.#ctor">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.Configuration.ValueElement"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ValueElement.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.Configuration.ValueElement"/> object,
            initializing properties from the contents of
            <paramref name="propertyValues"/>.
            </summary>
            <param name="propertyValues">Name/value pairs which
            contain the values to initialize properties to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ValueElement.Microsoft#Practices#Unity#Configuration#IAttributeOnlyElement#SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ValueElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
             Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>. This
             method always outputs an explicit &lt;dependency&gt; tag, instead of providing
             attributes to the parent method.
            </summary>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Configuration.ValueElement.GetInjectionParameterValue(Microsoft.Practices.Unity.IUnityContainer,System.Type)">
            <summary>
            Generate an <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> object
            that will be used to configure the container for a type registration.
            </summary>
            <param name="container">Container that is being configured. Supplied in order
            to let custom implementations retrieve services; do not configure the container
            directly in this method.</param>
            <param name="parameterType">Type of the parameter to get the value for.</param>
            <returns>The required <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> object.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ValueElement.Value">
            <summary>
            Value for this element
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Configuration.ValueElement.TypeConverterTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.AddInterfaceElement">
            <summary>
            Configuration element that lets you specify additional interfaces
            to add when this type is intercepted.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.AddInterfaceElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.AddInterfaceElement.GetInjectionMembers(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,System.String)">
            <summary>
            Return the set of <see cref="T:Microsoft.Practices.Unity.InjectionMember"/>s that are needed
            to configure the container according to this configuration element.
            </summary>
            <param name="container">Container that is being configured.</param>
            <param name="fromType">Type that is being registered.</param>
            <param name="toType">Type that <paramref name="fromType"/> is being mapped to.</param>
            <param name="name">Name this registration is under.</param>
            <returns>One or more <see cref="T:Microsoft.Practices.Unity.InjectionMember"/> objects that should be
            applied to the container registration.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.AddInterfaceElement.TypeName">
            <summary>
            Type of interface to add.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.AddInterfaceElement.Key">
            <summary>
            Each element must have a unique key, which is generated by the subclasses.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.CallHandlerElement">
            <summary>
            Configuration element representing a call handler.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyChildElement">
            <summary>
            Base class for the two children of the Policy element:
            MatchingRuleElement and CallHandlerElement.
            </summary>
            <remarks>
            <para>
            These configuration elements have a required "name" attribute, an optional "type" attribute, and 
            optional child elements &lt;lifetime&gt; and &lt;injection&gt;
            </para>
            <para>
            Elements without a value for the type attribute can only have a value for the name attribute, and 
            indicate that the represented handler or rule is configured elsewhere and that a reference to 
            the given name must be added to the policy to be resolved, while elements with a value for the type
            attribute indicate how the represented handler or rule should be built and can optionally specify
            lifetime management and injection configuration.
            </para>
            <para>
            This element is similar to the <see cref="T:Microsoft.Practices.Unity.Configuration.RegisterElement"/>, except that it does not provide 
            an extension point for arbitrary configuration.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyChildElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Reads XML from the configuration file.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that reads from the configuration file.
                            </param><param name="serializeCollectionKey">true to serialize only the collection key properties; otherwise, false.
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element to read is locked.
                                - or -
                                An attribute of the current node is not recognized.
                                - or -
                                The lock status of the current node cannot be determined.  
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyChildElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyChildElement.Name">
            <summary>
            Name of this item
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyChildElement.TypeName">
            <summary>
            Type that implements this matching rule or call handler.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyChildElement.Injection">
            <summary>
            Injection members that control how this item is created.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyChildElement.Lifetime">
            <summary>
            Lifetime manager for this item.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.CallHandlerElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.CallHandlerElement"/>s for configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.CallHandlerElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.CallHandlerElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Causes the configuration system to throw an exception.
            </summary>
            <returns>
            true if the unrecognized element was deserialized successfully; otherwise, false. The default is false.
            </returns>
            <param name="elementName">The name of the unrecognized element. 
                            </param><param name="reader">An input stream that reads XML from the configuration file. 
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element specified in <paramref name="elementName"/> is the &lt;clear&gt; element.
                            </exception><exception cref="T:System.ArgumentException"><paramref name="elementName"/> starts with the reserved prefix "config" or "lock".
                            </exception>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.CallHandlerElementCollection.Item(System.String)">
            <summary>
            Retrieve a call handler element from the collection by name.
            </summary>
            <param name="name">Name to look up.</param>
            <returns>The rule, or null if not in the collection.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.DefaultElement">
            <summary>
            The &lt;default&gt; element that appears inside an &lt;interceptor&gt; element.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorRegistrationElement">
            <summary>
            Base class for the default and key elements that can occur
            inside the &lt;interceptor&gt; element.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorRegistrationElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorRegistrationElement.RegisterInterceptor(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.InterceptionExtension.IInterceptor)">
            <summary>
            Actually register the interceptor against this type.
            </summary>
            <param name="container">Container to configure.</param>
            <param name="interceptor">interceptor to register.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorRegistrationElement.TypeName">
            <summary>
            Type name that this interceptor will be registered for.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorRegistrationElement.ResolvedType">
            <summary>
            Return the type object that is resolved from the <see cref="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorRegistrationElement.TypeName"/> property.
            </summary>
            <returns>The type object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.DefaultElement.RegisterInterceptor(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.InterceptionExtension.IInterceptor)">
            <summary>
            Actually register the interceptor against this type.
            </summary>
            <param name="container">Container to configure.</param>
            <param name="interceptor">interceptor to register.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionBehaviorElement">
            <summary>
            Configuration elmement for specifying 
            interception behaviors for a type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionBehaviorElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Reads XML from the configuration file.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that reads from the configuration file.
                            </param><param name="serializeCollectionKey">true to serialize only the collection key properties; otherwise, false.
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element to read is locked.
                                - or -
                                An attribute of the current node is not recognized.
                                - or -
                                The lock status of the current node cannot be determined.  
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionBehaviorElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionBehaviorElement.GetInjectionMembers(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,System.String)">
            <summary>
            Return the set of <see cref="T:Microsoft.Practices.Unity.InjectionMember"/>s that are needed
            to configure the container according to this configuration element.
            </summary>
            <param name="container">Container that is being configured.</param>
            <param name="fromType">Type that is being registered.</param>
            <param name="toType">Type that <paramref name="fromType"/> is being mapped to.</param>
            <param name="name">Name this registration is under.</param>
            <returns>One or more <see cref="T:Microsoft.Practices.Unity.InjectionMember"/> objects that should be
            applied to the container registration.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionBehaviorElement.TypeName">
            <summary>
            Type of behavior to add.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionBehaviorElement.Name">
            <summary>
            Name of behavior to resolve.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionBehaviorElement.IsDefaultForType">
            <summary>
            Should this behavior be configured as a default behavior for this type, or
            specifically for this type/name pair only?
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionBehaviorElement.Key">
            <summary>
            Each element must have a unique key, which is generated by the subclasses.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension">
            <summary>
            Section extension class used to add the elements needed to configure
            Unity interception to the configuration schema.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension.AddExtensions(Microsoft.Practices.Unity.Configuration.SectionExtensionContext)">
            <summary>
            Add the extensions to the section via the context.
            </summary>
            <param name="context">Context object that can be used to add elements and aliases.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionElement">
            <summary>
            A configuration element that contains the top-level container configuration
            information for interception - handler policies and global interceptor definitions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Gets a value indicating whether an unknown element is encountered during deserialization.
            </summary>
            <returns>
            true when an unknown element is encountered while deserializing; otherwise, false.
            </returns>
            <param name="elementName">The name of the unknown subelement.
                            </param><param name="reader">The <see cref="T:System.Xml.XmlReader"/> being used for deserialization.
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element identified by <paramref name="elementName"/> is locked.
                                - or -
                                One or more of the element's attributes is locked.
                                - or -
                            <paramref name="elementName"/> is unrecognized, or the element has an unrecognized attribute.
                                - or -
                                The element has a Boolean attribute with an invalid value.
                                - or -
                                An attempt was made to deserialize a property more than once.
                                - or -
                                An attempt was made to deserialize a property that is not a valid member of the element.
                                - or -
                                The element cannot contain a CDATA or text element.
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionElement.ConfigureContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Apply this element's configuration to the given <paramref name="container"/>.
            </summary>
            <param name="container">Container to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionElement.Policies">
            <summary>
            Policies defined for this container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorElement">
            <summary>
            Configuration element that lets you configure
            what interceptor to use for a type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorElement.#ctor">
            <summary>
            Initialize a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorElement.GetInjectionMembers(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,System.String)">
            <summary>
            Return the set of <see cref="T:Microsoft.Practices.Unity.InjectionMember"/>s that are needed
            to configure the container according to this configuration element.
            </summary>
            <param name="container">Container that is being configured.</param>
            <param name="fromType">Type that is being registered.</param>
            <param name="toType">Type that <paramref name="fromType"/> is being mapped to.</param>
            <param name="name">Name this registration is under.</param>
            <returns>One or more <see cref="T:Microsoft.Practices.Unity.InjectionMember"/> objects that should be
            applied to the container registration.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorElement.TypeName">
            <summary>
            Type name for the interceptor to apply.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorElement.Name">
            <summary>
            Name to use when resolving interceptors from the container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorElement.IsDefaultForType">
            <summary>
            Should this interceptor be registered as the default for the contained
            type, or only for this particular type/name pair?
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorElement.Key">
            <summary>
            Each element must have a unique key, which is generated by the subclasses.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorRegistrationElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorRegistrationElement"/> objects as shown
            in configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorRegistrationElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorRegistrationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorsElement">
            <summary>
            Configuration element that provides a top-level element for
            configuration interceptors for types in a container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorsElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorsElement.ConfigureContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Apply this element's configuration to the given <paramref name="container"/>.
            </summary>
            <param name="container">Container to configure.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorsElement.Interceptors">
            <summary>
            The various child elements that are contained in this element.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorsInterceptorElement">
            <summary>
            Configuration element that represents the configuration for
            a specific interceptor, as presented in the config file inside
            the &lt;interceptors&gt; element.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorsInterceptorElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorsInterceptorElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Gets a value indicating whether an unknown element is encountered during deserialization.
            </summary>
            <returns>
            true when an unknown element is encountered while deserializing; otherwise, false.
            </returns>
            <param name="elementName">The name of the unknown subelement.
                            </param><param name="reader">The <see cref="T:System.Xml.XmlReader"/> being used for deserialization.
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element identified by <paramref name="elementName"/> is locked.
                                - or -
                                One or more of the element's attributes is locked.
                                - or -
                            <paramref name="elementName"/> is unrecognized, or the element has an unrecognized attribute.
                                - or -
                                The element has a Boolean attribute with an invalid value.
                                - or -
                                An attempt was made to deserialize a property more than once.
                                - or -
                                An attempt was made to deserialize a property that is not a valid member of the element.
                                - or -
                                The element cannot contain a CDATA or text element.
                            </exception>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorsInterceptorElement.TypeName">
            <summary>
            Type of interceptor to configure.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorsInterceptorElement.Registrations">
            <summary>
            The types that this interceptor will be registered against.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorsInterceptorElement.Value">
            <summary>
            Any value passed to the type converter.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorsInterceptorElement.TypeConverterTypeName">
            <summary>
            Type converter to use to create the interceptor, if any.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorsInterceptorElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorsInterceptorElement"/> objects
            as stored in configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptorsInterceptorElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.KeyElement">
            <summary>
            The &lt;key&gt; element that occurs inside an &lt;interceptor&gt; element
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.KeyElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.KeyElement.RegisterInterceptor(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.InterceptionExtension.IInterceptor)">
            <summary>
            Actually register the interceptor against this type.
            </summary>
            <param name="container">Container to configure.</param>
            <param name="interceptor">interceptor to register.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.KeyElement.Name">
            <summary>
            Name registration should be under. To register under the default, leave blank.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.MatchingRuleElement">
            <summary>
            A configuration element representing a matching rule.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.MatchingRuleElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.MatchingRuleElement"/>s for configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.MatchingRuleElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.MatchingRuleElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Causes the configuration system to throw an exception.
            </summary>
            <returns>
            true if the unrecognized element was deserialized successfully; otherwise, false. The default is false.
            </returns>
            <param name="elementName">The name of the unrecognized element. 
                            </param><param name="reader">An input stream that reads XML from the configuration file. 
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element specified in <paramref name="elementName"/> is the &lt;clear&gt; element.
                            </exception><exception cref="T:System.ArgumentException"><paramref name="elementName"/> starts with the reserved prefix "config" or "lock".
                            </exception>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.MatchingRuleElementCollection.Item(System.String)">
            <summary>
            Retrieve a matching rule element from the collection by name.
            </summary>
            <param name="name">Name to look up.</param>
            <returns>The rule, or null if not in the collection.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyElement">
            <summary>
            Configuration element for building up an interception policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Gets a value indicating whether an unknown element is encountered during deserialization.
            </summary>
            <returns>
            true when an unknown element is encountered while deserializing; otherwise, false.
            </returns>
            <param name="elementName">The name of the unknown subelement.
                            </param><param name="reader">The <see cref="T:System.Xml.XmlReader"/> being used for deserialization.
                            </param><exception cref="T:System.Configuration.ConfigurationErrorsException">The element identified by <paramref name="elementName"/> is locked.
                                - or -
                                One or more of the element's attributes is locked.
                                - or -
                            <paramref name="elementName"/> is unrecognized, or the element has an unrecognized attribute.
                                - or -
                                The element has a Boolean attribute with an invalid value.
                                - or -
                                An attempt was made to deserialize a property more than once.
                                - or -
                                An attempt was made to deserialize a property that is not a valid member of the element.
                                - or -
                                The element cannot contain a CDATA or text element.
                            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyElement.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Write the contents of this element to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>The caller of this method has already written the start element tag before
            calling this method, so deriving classes only need to write the element content, not
            the start or end tags.</remarks>
            <param name="writer">Writer to send XML content to.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyElement.Name">
            <summary>
            Name of this policy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyElement.MatchingRules">
            <summary>
            Matching rules for this policy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyElement.CallHandlers">
            <summary>
            Call handlers for this policy.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyElement"/> in the configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. 
                            </param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyElementCollection.Item(System.String)">
            <summary>
            Indexer to retrieve policy element objects by name.
            </summary>
            <param name="policyName">Name of policy to get.</param>
            <returns>The element.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyInjectionElement">
            <summary>
            A shortcut element to enable the policy injection behavior.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyInjectionElement.GetInjectionMembers(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,System.String)">
            <summary>
            Return the set of <see cref="T:Microsoft.Practices.Unity.InjectionMember"/>s that are needed
            to configure the container according to this configuration element.
            </summary>
            <param name="container">Container that is being configured.</param>
            <param name="fromType">Type that is being registered.</param>
            <param name="toType">Type that <paramref name="fromType"/> is being mapped to.</param>
            <param name="name">Name this registration is under.</param>
            <returns>One or more <see cref="T:Microsoft.Practices.Unity.InjectionMember"/> objects that should be
            applied to the container registration.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.PolicyInjectionElement.Key">
            <summary>
            Each element must have a unique key, which is generated by the subclasses.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Configuration.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.Properties.Resources.CannotCreateInterceptorRegistrationElement">
            <summary>
              查找类似 The abstract type InterceptorRegistrationElement cannot be created. Please create a concrete instance. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.Properties.Resources.CannotHaveInjectionWithoutTypeName">
            <summary>
              查找类似 The &lt;injection/&gt; element is not allowed on element named &apos;{0}&apos; because it doesn&apos;t have a type attribute. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.Properties.Resources.CannotHaveLifetimeWithoutTypeName">
            <summary>
              查找类似 The &lt;lifetime/&gt; element is not allowed on element named &apos;{0}&apos; because it doesn&apos;t have a type attribute. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.Properties.Resources.CouldNotResolveType">
            <summary>
              查找类似 The type name or alias {0} could not be resolved. Please check your configuration file and verify this type name. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.Properties.Resources.ExceptionCannotCreateInstance">
            <summary>
              查找类似 Cannot create instance of type {0} with a default constructor. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.Properties.Resources.ExceptionResolvedTypeNotCompatible">
            <summary>
              查找类似 The type name {0} resolved to type {1} is not compatible with the required type {2}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.Properties.Resources.InvalidInterceptorType">
            <summary>
              查找类似 The type {0} could not be resolved to a valid type. Please double check your configuration. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Configuration.Properties.Resources.MustHaveAtLeastOneBehaviorAttribute">
            <summary>
              查找类似 The interception behavior element must have at least one of the &apos;name&apos; or &apos;type&apos; attributes. 的本地化字符串。
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface">
            <summary>
            Stores information about a single <see cref="T:System.Type"/> to be an additional interface for an intercepted object and
            configures a container accordingly.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionMember">
            <summary>
            Stores information about a an intercepted object and configures a container accordingly.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface"/> with a 
            <see cref="T:System.Type"/>.
            </summary>
            <param name="additionalInterface">A descriptor representing the interception behavior to use.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="additionalInterface"/> is
            <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="additionalInterface"/> is not an interface.
            </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the container to use the represented 
            <see cref="T:System.Type"/> as an additional interface for the supplied parameters.
            </summary>
            <param name="serviceType">Interface being registered.</param>
            <param name="implementationType">Type to register.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface`1">
            <summary>
            Stores information about a single <see cref="T:System.Type"/> to be an additional interface for an intercepted object and
            configures a container accordingly.
            </summary>
            <typeparam name="T">The interface.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterface`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior">
            <summary>
            An injection member that lets you specify behaviors that should
            apply to all instances of a type in the container regardless
            of what name it's resolved under.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase">
            <summary>
            Base class for injection members that allow you to add
            interception behaviors.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/>.
            </summary>
            <param name="interceptionBehavior">The interception behavior to use.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            given type/name pair.
            </summary>
            <param name="behaviorType">Type of behavior to </param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            given behavior type.
            </summary>
            <param name="behaviorType">Type of behavior to </param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the container to use the represented 
            <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> for the supplied parameters.
            </summary>
            <param name="serviceType">Interface being registered.</param>
            <param name="implementationType">Type to register.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorBase.GetBehaviorsPolicy(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.String)">
            <summary>
            Get the list of behaviors for the current type so that it can be added to.
            </summary>
            <param name="policies">Policy list.</param>
            <param name="implementationType">Implementation type to set behaviors for.</param>
            <param name="name">Name type is registered under.</param>
            <returns>An instance of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior"/> that will
            supply the given interception behavior to the container.
            </summary>
            <param name="interceptionBehavior">Behavior to apply to this type.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior.#ctor(System.Type,System.String)">
            <summary>
             Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior"/> that will
             resolve the given type/name pair to get the behavior.
            </summary>
            <param name="behaviorType">Type of behavior.</param>
            <param name="name">Name for behavior registration.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior"/> that will
            resolve the given type to get the behavior.
            </summary>
            <param name="behaviorType">Type of behavior.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior.GetBehaviorsPolicy(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.String)">
            <summary>
            Get the list of behaviors for the current type so that it can be added to.
            </summary>
            <param name="policies">Policy list.</param>
            <param name="implementationType">Implementation type to set behaviors for.</param>
            <param name="name">Name type is registered under.</param>
            <returns>An instance of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior`1">
            <summary>
            A generic version of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior"/> so you
            can give the behavior type using generic syntax.
            </summary>
            <typeparam name="TBehavior">Type of the behavior object to apply.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior`1.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior`1"/> instance
            that use the given type and name to resolve the behavior object.
            </summary>
            <param name="name">Name of the registration.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior`1.#ctor">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptionBehavior`1"/> instance
            that uses the given type to resolve the behavior object.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.InjectionMember"/> that can be passed to the
            <see cref="M:Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])"/> method to specify
            which interceptor to use. This member sets up the default
            interceptor for a type - this will be used regardless of which 
            name is used to resolve the type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IInterceptor)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor"/> instance that,
            when applied to a container, will register the given
            interceptor as the default one.
            </summary>
            <param name="interceptor">Interceptor to use.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor.#ctor(System.Type,System.String)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor"/> that, when
            applied to a container, will register the given type as
            the default interceptor. 
            </summary>
            <param name="interceptorType">Type of interceptor.</param>
            <param name="name">Name to use to resolve the interceptor.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor.#ctor(System.Type)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor"/> that, when
            applied to a container, will register the given type as
            the default interceptor. 
            </summary>
            <param name="interceptorType">Type of interceptor.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
            container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="serviceType">Type of interface being registered. If no interface,
            this will be null.</param>
            <param name="implementationType">Type of concrete type being registered.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor`1">
            <summary>
            A generic version of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor"/> so that
            you can specify the interceptor type using generics.
            </summary>
            <typeparam name="TInterceptor"></typeparam>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor`1.#ctor(System.String)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor`1"/>.
            </summary>
            <param name="name">Name to use when resolving interceptor.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor`1.#ctor">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.DefaultInterceptor`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Interception">
            <summary>
            A Unity container extension that allows you to configure
            whether an object should be intercepted and which mechanism should
            be used to do it, and also provides a convenient set of methods for
            configuring injection for <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy"/> instances.
            </summary>
            <seealso cref="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetDefaultInterceptorFor(System.Type,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)"/>
            <seealso cref="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetDefaultInterceptorFor(System.Type,Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)"/>
            <seealso cref="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor(System.Type,System.String,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)"/>
            <seealso cref="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor(System.Type,System.String,Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)"/>
            <seealso cref="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.AddPolicy(System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.Initialize">
            <summary>
            Initial the container with this extension's functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor(System.Type,System.String,Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <param name="typeToIntercept">Type to intercept.</param>
            <param name="name">Name type is registered under.</param>
            <param name="interceptor">Interceptor to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor(System.Type,Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <param name="typeToIntercept">Type to intercept.</param>
            <param name="interceptor">Interceptor to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor``1(System.String,Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <typeparam name="T">Type to intercept</typeparam>
            <param name="name">Name type is registered under.</param>
            <param name="interceptor">Interceptor object to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor``1(Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <typeparam name="T">Type to intercept</typeparam>
            <param name="interceptor">Interceptor object to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor(System.Type,System.String,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <param name="typeToIntercept">Type to intercept.</param>
            <param name="name">Name type is registered under.</param>
            <param name="interceptor">Instance interceptor to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetDefaultInterceptorFor(System.Type,Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>
            Set the interceptor for a type, regardless of what name is used to resolve the instances.
            </summary>
            <param name="typeToIntercept">Type to intercept</param>
            <param name="interceptor">Interceptor instance.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetDefaultInterceptorFor``1(Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>
            Set the interceptor for a type, regardless of what name is used to resolve the instances.
            </summary>
            <typeparam name="TTypeToIntercept">Type to intercept</typeparam>
            <param name="interceptor">Interceptor instance.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor(System.Type,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <param name="typeToIntercept">Type to intercept.</param>
            <param name="interceptor">Instance interceptor to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor``1(System.String,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <typeparam name="T">Type to intercept.</typeparam>
            <param name="name">Name type is registered under.</param>
            <param name="interceptor">Instance interceptor to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetInterceptorFor``1(Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
            API to configure interception for a type.
            </summary>
            <typeparam name="T">Type to intercept.</typeparam>
            <param name="interceptor">Instance interceptor to use.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetDefaultInterceptorFor(System.Type,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
            API to configure the default interception settings for a type.
            </summary>
            <param name="typeToIntercept">Type the interception is being configured for.</param>
            <param name="interceptor">The interceptor to use by default.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.SetDefaultInterceptorFor``1(Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
            API to configure the default interception settings for a type.
            </summary>
            <typeparam name="TTypeToIntercept">Type the interception is being configured for.</typeparam>
            <param name="interceptor">The interceptor to use by default.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interception.AddPolicy(System.String)">
            <summary>
            Starts the definition of a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy"/>.
            </summary>
            <param name="policyName">The policy name.</param>
            <returns></returns>
            <remarks>This is a convenient way for defining a new policy and the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/>
            instances and <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> instances that are required by a policy.
            <para/>
            This mechanism is just a shortcut for what can be natively expressed by wiring up together objects
            with repeated calls to the <see cref="M:Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])"/> method.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior">
            <summary>
            Stores information about a single <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> to be used on an intercepted object and
            configures a container accordingly.
            </summary>
            <seealso cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/>.
            </summary>
            <param name="interceptionBehavior">The interception behavior to use.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            given type/name pair.
            </summary>
            <param name="behaviorType">Type of behavior to </param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            given behavior type.
            </summary>
            <param name="behaviorType">Type of behavior to </param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior.GetBehaviorsPolicy(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.String)">
            <summary>
            Get the list of behaviors for the current type so that it can be added to.
            </summary>
            <param name="policies">Policy list.</param>
            <param name="implementationType">Implementation type to set behaviors for.</param>
            <param name="name">Name type is registered under.</param>
            <returns>An instance of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior`1">
            <summary>
            A generic version of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> that lets you
            specify behavior types using generic syntax.
            </summary>
            <typeparam name="TBehavior">Type of behavior to register.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            given behavior type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehavior"/> with a 
            given type/name pair.
            </summary>
            <param name="name">Name to use to resolve the behavior.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Interceptor">
            <summary>
            Stores information about the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptor"/> to be used to intercept an object and
            configures a container accordingly.
            </summary>
            <seealso cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interceptor.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IInterceptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Interceptor"/> class with an interceptor instance.
            </summary>
            <param name="interceptor">The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptor"/> to use.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is
            <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interceptor.#ctor(System.Type,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Interceptor"/> class with a given
            name and type that will be resolved to provide interception.
            </summary>
            <param name="interceptorType">Type of the interceptor</param>
            <param name="name">name to use to resolve.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interceptor.#ctor(System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Interceptor"/> class with
            a given type that will be resolved to provide interception.
            </summary>
            <param name="interceptorType">Type of the interceptor.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interceptor.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the container to use the represented 
            <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptor"/> for the supplied parameters.
            </summary>
            <param name="serviceType">Interface being registered.</param>
            <param name="implementationType">Type to register.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Interceptor`1">
            <summary>
            Generic version of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Interceptor"/> that lets you specify an interceptor
            type using generic syntax.
            </summary>
            <typeparam name="TInterceptor">Type of interceptor</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interceptor`1.#ctor">
            <summary>
            Initialize an instance of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Interceptor`1"/> that will
            resolve the given interceptor type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Interceptor`1.#ctor(System.String)">
            <summary>
            Initialize an instance of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Interceptor`1"/> that will
            resolve the given interceptor type and name.
            </summary>
            <param name="name">Name that will be used to resolve the interceptor.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterfacesPolicy">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IAdditionalInterfacesPolicy"/> that accumulates a sequence of 
            <see cref="T:System.Type"/> instances representing the additional interfaces for an intercepted object.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.IAdditionalInterfacesPolicy">
            <summary>
            An <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that returns a sequence of <see cref="T:System.Type"/> 
            instances representing the additional interfaces for an intercepted object.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy">
            <summary>
            Represents a builder policy interface. Since there are no fixed requirements
            for policies, it acts as a marker interface from which to derive all other
            policy interfaces.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.IAdditionalInterfacesPolicy.AdditionalInterfaces">
            <summary>
            Gets the <see cref="T:System.Type"/> instances accumulated by this policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterfacesPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterfacesPolicy"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.AdditionalInterfacesPolicy.AdditionalInterfaces">
            <summary>
            Gets the <see cref="T:System.Type"/> instances accumulated by this policy.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.FixedInstanceInterceptionPolicy">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy"/> that returns a
            pre-created interceptor.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy">
            <summary>
            An interface that determines when to intercept instances
            and which interceptor to use.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy.GetInterceptor(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Interceptor to use.
            </summary>
            <param name="context">Context for current build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.FixedInstanceInterceptionPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.FixedInstanceInterceptionPolicy"/>.
            </summary>
            <param name="interceptor">Interceptor to store.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.FixedInstanceInterceptionPolicy.GetInterceptor(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Interceptor to use.
            </summary>
            <param name="context">Context for current build operation.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.FixedTypeInterceptionPolicy">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy"/> that returns a precreated
            interceptor object.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy">
            <summary>
            Interface that controls when and how types get intercepted.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy.GetInterceptor(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Interceptor to use to create type proxy
            </summary>
            <param name="context">Context for current build operation.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy.ProxyType">
            <summary>
            Cache for proxied type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.FixedTypeInterceptionPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.FixedTypeInterceptionPolicy"/> that
            uses the given <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor"/>.
            </summary>
            <param name="interceptor">Interceptor to use.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.FixedTypeInterceptionPolicy.GetInterceptor(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Interceptor to use to create type proxy
            </summary>
            <param name="context">Context for current build operation.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.FixedTypeInterceptionPolicy.ProxyType">
            <summary>
            Cache for proxied type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehaviorsPolicy">
            <summary>
            An <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that returns a sequence of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> 
            instances for an intercepted object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehaviorsPolicy.GetEffectiveBehaviors(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.Unity.InterceptionExtension.IInterceptor,System.Type,System.Type)">
            <summary>
            Get the set of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> object to be used for the given type and
            interceptor.
            </summary>
            <remarks>
            This method will return a sequence of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/>s. These behaviors will
            only be included if their <see cref="P:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior.WillExecute"/> properties are true.
            </remarks>
            <param name="context">Context for the current build operation.</param>
            <param name="interceptor">Interceptor that will be used to invoke the behavior.</param>
            <param name="typeToIntercept">Type that interception was requested on.</param>
            <param name="implementationType">Type that implements the interception.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehaviorsPolicy.BehaviorKeys">
            <summary>
            Get the set of <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> that can be used to resolve the
            behaviors.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InstanceInterceptionStrategy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> that intercepts objects
            in the build chain by creating a proxy object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InstanceInterceptionStrategy.PostBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PostBuildUp method is called when the chain has finished the PreBuildUp
            phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehaviorsPolicy"/> that accumulates a sequence of 
            <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> instances for an intercepted object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy.GetEffectiveBehaviors(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.Unity.InterceptionExtension.IInterceptor,System.Type,System.Type)">
            <summary>
            Get the set of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> object to be used for the given type and
            interceptor.
            </summary>
            <remarks>
            This method will return a sequence of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/>s. These behaviors will
            only be included if their <see cref="P:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior.WillExecute"/> properties are true.
            </remarks>
            <param name="context">Context for the current build operation.</param>
            <param name="interceptor">Interceptor that will be used to invoke the behavior.</param>
            <param name="typeToIntercept">Type that interception was requested on.</param>
            <param name="implementationType">Type that implements the interception.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorsPolicy.BehaviorKeys">
            <summary>
            Get the set of <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> that can be used to resolve the
            behaviors.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ResolvedInstanceInterceptionPolicy">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptionPolicy"/> that will
            resolve the interceptor through the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ResolvedInstanceInterceptionPolicy.#ctor(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ResolvedInstanceInterceptionPolicy"/> that
            will resolve the interceptor using the given build key.
            </summary>
            <param name="buildKey">build key to resolve.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ResolvedInstanceInterceptionPolicy.GetInterceptor(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Interceptor to use.
            </summary>
            <param name="context">Context for current build operation.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ResolvedTypeInterceptionPolicy">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy"/> that will
            resolve the interceptor through the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ResolvedTypeInterceptionPolicy.#ctor(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ResolvedTypeInterceptionPolicy"/> that
            will resolve the interceptor with the given <paramref name="buildKey"/>.
            </summary>
            <param name="buildKey">The build key to use to resolve.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ResolvedTypeInterceptionPolicy.GetInterceptor(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Interceptor to use to create type proxy
            </summary>
            <param name="context">Context for current build operation.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.ResolvedTypeInterceptionPolicy.ProxyType">
            <summary>
            Cache for proxied type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.TypeInterceptionStrategy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> that hooks up type interception. It looks for
            a <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptionPolicy"/> for the current build key, or the current
            build type. If present, it substitutes types so that that proxy class gets
            built up instead. On the way back, it hooks up the appropriate handlers.
             </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TypeInterceptionStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <remarks>In this class, PreBuildUp is responsible for figuring out if the
            class is proxiable, and if so, replacing it with a proxy class.</remarks>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TypeInterceptionStrategy.PostBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PostBuildUp method is called when the chain has finished the PreBuildUp
            phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <remarks>In this class, PostBuildUp checks to see if the object was proxiable,
            and if it was, wires up the handlers.</remarks>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that, when implemented,
            will determine which constructor to call from the build plan.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy.SelectConstructor(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Choose the constructor to call for the given type.
            </summary>
            <param name="context">Current build context</param>
            <param name="resolverPolicyDestination">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to add any
            generated resolver objects into.</param>
            <returns>The chosen constructor.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition">
            <summary>
            Transient class that supports convenience method for specifying interception policies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule(System.String)">
            <summary>
            Adds a reference to matching rule by name.
            </summary>
            <param name="name">The name for the matching rule.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
            <remarks>
            The details of how the rule should be created by the container must be specified using a 
            standard injection specification mechanism.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule)">
            <summary>
            Makes <paramref name="instance"/> a matching rule in the current policy.
            </summary>
            <param name="instance">The new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> for the policy.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule(System.Type,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> and makes it available
            as a matching rule in the current policy.
            </summary>
            <param name="type">The type for the new matching rule.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule(System.Type,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> and makes it available
            as a matching rule in the current policy, using the given <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="type">The type for the new matching rule.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured matching rule.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule(System.Type,System.String,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> using the specified name
            and makes it available as a matching rule in the current policy.
            </summary>
            <param name="type">The type for the new matching rule.</param>
            <param name="name">The name for the injection configuration for the matching rule.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule(System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> and makes it available
            as a matching rule in the current policy, using the given <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="type">The type for the new matching rule.</param>
            <param name="name">The name for the injection configuration for the matching rule.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured matching rule.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule``1(Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> and makes it available
            as a matching rule in the current policy.
            </summary>
            <typeparam name="TMatchingRule">The type for the new matching rule.</typeparam>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule``1(Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> and makes it available
            as a matching rule in the current policy, using the given <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <typeparam name="TMatchingRule">The type for the new matching rule.</typeparam>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured matching rule.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule``1(System.String,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> using the specified name
            and makes it available as a matching rule in the current policy.
            </summary>
            <typeparam name="TMatchingRule">The type for the new matching rule.</typeparam>
            <param name="name">The name for the injection configuration for the matching rule.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddMatchingRule``1(System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> using the specified name
            and makes it available as a matching rule in the current policy, 
            using the given <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <typeparam name="TMatchingRule">The type for the new matching rule.</typeparam>
            <param name="name">The name for the injection configuration for the matching rule.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured matching rule.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler(System.String)">
            <summary>
            Adds a reference to call handler by name.
            </summary>
            <param name="name">The name for the call handler.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
            <remarks>
            The details of how the handler should be created by the container must be specified using a 
            standard injection specification mechanism.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler(Microsoft.Practices.Unity.InterceptionExtension.ICallHandler)">
            <summary>
            Makes <paramref name="instance"/> a call handler in the current policy.
            </summary>
            <param name="instance">The new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> for the policy.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler(System.Type,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> and makes it available
            as a call handler in the current policy.
            </summary>
            <param name="type">The type for the new call handler.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler(System.Type,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> and makes it available
            as a call handler in the current policy, using the given <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="type">The type for the new call handler.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured call handler.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler(System.Type,System.String,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> using the specified name
            and makes it available as a call handler in the current policy.
            </summary>
            <param name="type">The type for the new call handler.</param>
            <param name="name">The name for the injection configuration for the call handler.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler(System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> using the specified name
            and makes it available as a call handler in the current policy, 
            using the given <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="type">The type for the new call handler.</param>
            <param name="name">The name for the injection configuration for the call handler.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured call handler.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler``1(Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> and makes it available
            as a call handler in the current policy.
            </summary>
            <typeparam name="TCallHandler">The type for the new call handler.</typeparam>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler``1(Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> and makes it available
            as a call handler in the current policy, using the given <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <typeparam name="TCallHandler">The type for the new call handler.</typeparam>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured call handler.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler``1(System.String,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> using the specified name
            and makes it available as a call handler in the current policy.
            </summary>
            <typeparam name="TCallHandler">The type for the new call handler.</typeparam>
            <param name="name">The name for the injection configuration for the call handler .</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.AddCallHandler``1(System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Configures injection for a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> using the specified name
            and makes it available as a call handler in the current policy, 
            using the given <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <typeparam name="TCallHandler">The type for the new call handler.</typeparam>
            <param name="name">The name for the injection configuration for the call handler .</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the configured call handler.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition"/> than allows further configuration of the policy.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.Container">
            <summary>
            The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> that is currently being
            configured.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.Interception">
            <summary>
            The <see cref="P:Microsoft.Practices.Unity.InterceptionExtension.PolicyDefinition.Interception"/> extension to which the policy was added.
            </summary>
            <remarks>
            Use this property to start adding a new policy.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Intercept">
            <summary>
            High-level API for performing interception on existing and new objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Intercept.ThroughProxyWithAdditionalInterfaces``1(``0,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Returns a <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy"/> for type <typeparamref name="T"/> which wraps 
            the supplied <paramref name="target"/>.
            </summary>
            <typeparam name="T">The type to intercept.</typeparam>
            <param name="target">The instance to intercept.</param>
            <param name="interceptor">The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <param name="additionalInterfaces">Any additional interfaces the proxy must implement.</param>
            <returns>A proxy for <paramref name="target"/> compatible with <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="additionalInterfaces"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Intercept.ThroughProxy``1(``0,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior})">
            <summary>
            Returns a <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy"/> for type <typeparamref name="T"/> which wraps
            the supplied <paramref name="target"/>.
            </summary>
            <typeparam name="T">Type to intercept.</typeparam>
            <param name="target">The instance to intercept.</param>
            <param name="interceptor">The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <returns>A proxy for <paramref name="target"/> compatible with <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Intercept.ThroughProxyWithAdditionalInterfaces(System.Type,System.Object,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Returns a <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy"/> for type <paramref name="interceptedType"/> which wraps 
            the supplied <paramref name="target"/>.
            </summary>
            <param name="interceptedType">The type to intercept.</param>
            <param name="target">The instance to intercept.</param>
            <param name="interceptor">The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <param name="additionalInterfaces">Any additional interfaces the proxy must implement.</param>
            <returns>A proxy for <paramref name="target"/> compatible with <paramref name="interceptedType"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptedType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="additionalInterfaces"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <paramref name="interceptedType"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Intercept.ThroughProxy(System.Type,System.Object,Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior})">
            <summary>
            Returns a <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy"/> for type <paramref name="interceptedType"/> which wraps 
            the supplied <paramref name="target"/>.
            </summary>
            <param name="interceptedType">The type to intercept.</param>
            <param name="target">The instance to intercept.</param>
            <param name="interceptor">The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <returns>A proxy for <paramref name="target"/> compatible with <paramref name="interceptedType"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptedType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <paramref name="interceptedType"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Intercept.NewInstanceWithAdditionalInterfaces``1(Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Collections.Generic.IEnumerable{System.Type},System.Object[])">
            <summary>
            Creates a new instance of type <typeparamref name="T"/> that is intercepted with the behaviors in 
            <paramref name="interceptionBehaviors"/>.
            </summary>
            <typeparam name="T">The type of the object to create.</typeparam>
            <param name="interceptor">The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <param name="additionalInterfaces">Any additional interfaces the proxy must implement.</param>
            <param name="constructorParameters">The arguments for the creation of the new instance.</param>
            <returns>An instance of a class compatible with <typeparamref name="T"/> that includes execution of the
            given <paramref name="interceptionBehaviors"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="additionalInterfaces"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Intercept.NewInstance``1(Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Object[])">
            <summary>
            Creates a new instance of type <typeparamref name="T"/> that is intercepted with the behaviors in 
            <paramref name="interceptionBehaviors"/>.
            </summary>
            <typeparam name="T">The type of the object to create.</typeparam>
            <param name="interceptor">The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <param name="constructorParameters">The arguments for the creation of the new instance.</param>
            <returns>An instance of a class compatible with <typeparamref name="T"/> that includes execution of the
            given <paramref name="interceptionBehaviors"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Intercept.NewInstanceWithAdditionalInterfaces(System.Type,Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Collections.Generic.IEnumerable{System.Type},System.Object[])">
            <summary>
            Creates a new instance of type <paramref name="type"/> that is intercepted with the behaviors in 
            <paramref name="interceptionBehaviors"/>.
            </summary>
            <param name="type">The type of the object to create.</param>
            <param name="interceptor">The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <param name="additionalInterfaces">Any additional interfaces the instance must implement.</param>
            <param name="constructorParameters">The arguments for the creation of the new instance.</param>
            <returns>An instance of a class compatible with <paramref name="type"/> that includes execution of the
            given <paramref name="interceptionBehaviors"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="type"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="additionalInterfaces"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <paramref name="type"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Intercept.NewInstance(System.Type,Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Object[])">
            <summary>
            Creates a new instance of type <paramref name="type"/> that is intercepted with the behaviors in 
            <paramref name="interceptionBehaviors"/>.
            </summary>
            <param name="type">The type of the object to create.</param>
            <param name="interceptor">The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor"/> to use when creating the proxy.</param>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <param name="constructorParameters">The arguments for the creation of the new instance.</param>
            <returns>An instance of a class compatible with <paramref name="type"/> that includes execution of the
            given <paramref name="interceptionBehaviors"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="type"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptor"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="interceptionBehaviors"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="interceptor"/> cannot intercept 
            <paramref name="type"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Intercept.GetAllAdditionalInterfaces(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Computes the array with all the additional interfaces for the interception of an object.
            </summary>
            <param name="interceptionBehaviors">The interception behaviors for the new proxy.</param>
            <param name="additionalInterfaces">Any additional interfaces the instance must implement.</param>
            <returns>An array with the required interfaces for </returns>
            <exception cref="T:System.ArgumentException">when the interfaces are not valid.</exception>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest">
            <summary>
            A simple data holder class used to store information about the current
            interception operation that's being set up. Useful for creating behaviors
            that need to know this stuff (especially the PIAB behavior).
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IInterceptor,System.Type,System.Type)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest"/> that
            stores the given <paramref name="interceptor"/>,
            <paramref name="typeToIntercept"/>, and <paramref name="implementationType"/>.
            </summary>
            <param name="interceptor"><see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptor"/> that will be used to
            create the intercepting type or proxy.</param>
            <param name="typeToIntercept">Type that interception was requested on.</param>
            <param name="implementationType">Type of the object that will actually be intercepted.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest.Interceptor">
            <summary>
            <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptor"/> that will be used to
            create the intercepting type or proxy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest.TypeToIntercept">
            <summary>
            Type that interception was requested on.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest.ImplementationType">
            <summary>
            Type of the object that will actually be intercepted.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior">
            <summary>
            Interception behaviors implement this interface and are called for each
            invocation of the pipelines that they're included in.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextInterceptionBehaviorDelegate)">
            <summary>
            Implement this method to execute your behavior processing.
            </summary>
            <param name="input">Inputs to the current call to the target.</param>
            <param name="getNext">Delegate to execute to get the next delegate in the behavior chain.</param>
            <returns>Return value from the target.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior.GetRequiredInterfaces">
            <summary>
            Returns the interfaces required by the behavior for the objects it intercepts.
            </summary>
            <returns>The required interfaces.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior.WillExecute">
            <summary>
            Returns a flag indicating if this behavior will actually do anything when invoked.
            </summary>
            <remarks>This is used to optimize interception. If the behaviors won't actually
            do anything (for example, PIAB where no policies match) then the interception
            mechanism can be skipped completely.</remarks>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InvokeInterceptionBehaviorDelegate">
            <summary>
            This delegate type is the type that points to the next
            method to execute in the current pipeline.
            </summary>
            <param name="input">Inputs to the current method call.</param>
            <param name="getNext">Delegate to get the next interceptor in the chain.</param>
            <returns>Return from the next method in the chain.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.GetNextInterceptionBehaviorDelegate">
            <summary>
            This delegate type is passed to each interceptor's Invoke method.
            Call the delegate to get the next delegate to call to continue
            the chain.
            </summary>
            <returns>Next delegate in the interceptor chain to call.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline">
            <summary>
            The InterceptionBehaviorPipeline class encapsulates a list of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/>s
            and manages calling them in the proper order with the right inputs.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline"/> with an empty pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior})">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline"/> with the given collection
            of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/>s.
            </summary>
            <param name="interceptionBehaviors">Collection of interception behaviors to add to the pipeline.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.InvokeInterceptionBehaviorDelegate)">
            <summary>
            Execute the pipeline with the given input.
            </summary>
            <param name="input">Input to the method call.</param>
            <param name="target">The ultimate target of the call.</param>
            <returns>Return value from the pipeline.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline.Add(Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> to the pipeline.
            </summary>
            <param name="interceptionBehavior">The interception behavior to add.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.InterceptionBehaviorPipeline.Count">
            <summary>
            Get the number of interceptors in this pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.GenericParameterMapper">
            <summary>
            Maps types involving generic parameter types from reflected types into equivalent versions involving generated types.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.GenericParameterMapper.#ctor(System.Type,Microsoft.Practices.Unity.InterceptionExtension.GenericParameterMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.GenericParameterMapper"/> class.
            </summary>
            <param name="type">A constructed generic type, open or closed.</param>
            <param name="parent">The parent mapper, or <see langword="null"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.GenericParameterMapper.#ctor(System.Type[],System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.GenericParameterMapper"/> class.
            </summary>
            <param name="reflectedParameters">The reflected generic parameters.</param>
            <param name="generatedParameters">The generated generic parameters.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.GenericParameterMapper.#ctor(System.Type[],System.Type[],Microsoft.Practices.Unity.InterceptionExtension.GenericParameterMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.GenericParameterMapper"/> class.
            </summary>
            <param name="reflectedParameters">The reflected generic parameters.</param>
            <param name="generatedParameters">The generated generic parameters.</param>
            <param name="parent">The parent mapper, or <see langword="null"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.GenericParameterMapper.Map(System.Type)">
            <summary>
            Maps a type to an equivalent type involving generated types.
            </summary>
            <param name="typeToMap">The type to map.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.GenericParameterMapper.GetReflectedParameters">
            <summary>
            Gets the formal parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.GenericParameterMapper.GetGeneratedParameters">
            <summary>
            Gets the actual parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.GenericParameterMapper.DefaultMapper">
            <summary>
            Gets the default mapper.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy">
            <summary>
            This interface is implemented by all proxy objects, type or instance based.
            It allows for adding interception behaviors.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy.AddInterceptionBehavior(Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> to the proxy.
            </summary>
            <param name="interceptor">The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> to add.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptor">
            <summary>
            Base interface for type and instance based interceptor classes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IInterceptor.CanIntercept(System.Type)">
            <summary>
            Can this interceptor generate a proxy for the given type?
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if interception is possible, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IInterceptor.GetInterceptableMethods(System.Type,System.Type)">
            <summary>
            Returns a sequence of methods on the given type that can be
            intercepted.
            </summary>
            <param name="interceptedType">Type that was specified when this interceptor
            was created (typically an interface).</param>
            <param name="implementationType">The concrete type of the implementing object.</param>
            <returns>Sequence of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo"/> objects.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor">
            <summary>
            Interface for interceptors that generate separate proxy
            objects to implement interception on instances.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IInstanceInterceptor.CreateProxy(System.Type,System.Object,System.Type[])">
            <summary>
            Create a proxy object that provides interception for <paramref name="target"/>.
            </summary>
            <param name="t">Type to generate the proxy of.</param>
            <param name="target">Object to create the proxy for.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
            <returns>The proxy object.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor">
            <summary>
            An instance interceptor that works by generating a
            proxy class on the fly for a single interface.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor.CanIntercept(System.Type)">
            <summary>
            Can this interceptor generate a proxy for the given type?
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if interception is possible, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor.GetInterceptableMethods(System.Type,System.Type)">
            <summary>
            Returns a sequence of methods on the given type that can be
            intercepted.
            </summary>
            <param name="interceptedType">Type that was specified when this interceptor
            was created (typically an interface).</param>
            <param name="implementationType">The concrete type of the implementing object.</param>
            <returns>Sequence of <see cref="T:System.Reflection.MethodInfo"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor.CreateProxy(System.Type,System.Object,System.Type[])">
            <summary>
            Create a proxy object that provides interception for <paramref name="target"/>.
            </summary>
            <param name="t">Type to generate the proxy of.</param>
            <param name="target">Object to create the proxy for.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
            <returns>The proxy object.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptorClassGenerator">
            <summary>
            A class used to generate proxy classes for doing interception on
            interfaces.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptorClassGenerator.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptorClassGenerator"/> that
            can construct an intercepting proxy for the given interface.
            </summary>
            <param name="typeToIntercept">Type of the interface to intercept.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptorClassGenerator.CreateProxyType">
            <summary>
            Create the type to proxy the requested interface
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InterfaceMethodOverride">
            <summary>
            Represents the implementation of an interface method.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterfaceMethodOverride.BuildAdditionalInterfaceNonImplementedException">
            <summary>
            Used to throw an <see cref="T:System.NotImplementedException"/> for non-implemented methods on the
            additional interfaces.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy">
            <summary>
            This class provides the remoting-based interception mechanism. It is
            invoked by a call on the corresponding TransparentProxy
            object. It routes calls through the handlers as appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy.#ctor(System.Object,System.Type,System.Type[])">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy"/> instance that applies
            the given policies to the given target object.
            </summary>
            <param name="target">Target object to intercept calls to.</param>
            <param name="classToProxy">Type to return as the type being proxied.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy.AddInterceptionBehavior(Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> to the proxy.
            </summary>
            <param name="interceptor">The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptionBehavior"/> to add.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy.CanCastTo(System.Type,System.Object)">
            <summary>
            Checks whether the proxy that represents the specified object type can be cast to the type represented by the <see cref="T:System.Runtime.Remoting.IRemotingTypeInfo"></see> interface.
            </summary>
            
            <returns>
            true if cast will succeed; otherwise, false.
            </returns>
            
            <param name="fromType">The type to cast to. </param>
            <param name="o">The object for which to check casting. </param>
            <exception cref="T:System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission. </exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Executes a method call represented by the <paramref name="msg"/>
            parameter. The CLR will call this method when a method is called
            on the TransparentProxy. This method runs the invocation through
            the call handler pipeline and finally sends it down to the
            target object, and then back through the pipeline. 
            </summary>
            <param name="msg">An <see cref="T:System.Runtime.Remoting.Messaging.IMessage"/> object that contains the information
            about the method call.</param>
            <returns>An <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn"/> object contains the
            information about the target method's return value.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy.Target">
            <summary>
            Returns the target of this intercepted call.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.InterceptingRealProxy.TypeName">
            <summary>
            Gets or sets the fully qualified type name of the server object in a <see cref="T:System.Runtime.Remoting.ObjRef"></see>.
            </summary>
            
            <value>
            The fully qualified type name of the server object in a <see cref="T:System.Runtime.Remoting.ObjRef"></see>.
            </value>
            
            <exception cref="T:System.Security.SecurityException">The immediate caller makes the call through a reference to the interface and does not have infrastructure permission. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure" /></PermissionSet>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInputParameterCollection">
            <summary>
            A class that wraps the inputs of a <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/> into the
            <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection"/> interface.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection"/> that wraps a provided array
            containing the argument values.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection">
            <summary>
            This interface represents a list of either input or output
            parameters. It implements a fixed size list, plus a couple
            of other utility methods.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection.ParameterName(System.Int32)">
            <summary>
            Gets the name of a parameter based on index.
            </summary>
            <param name="index">Index of parameter to get the name for.</param>
            <returns>Name of the requested parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection.GetParameterInfo(System.Int32)">
            <summary>
            Gets the ParameterInfo for a particular parameter by index.
            </summary>
            <param name="index">Index for this parameter.</param>
            <returns>ParameterInfo object describing the parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection.GetParameterInfo(System.String)">
            <summary>
            Gets the ParameterInfo for a particular parameter by name.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>ParameterInfo object for the named parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection.ContainsParameter(System.String)">
            <summary>
            Does this collection contain a parameter value with the given name?
            </summary>
            <param name="parameterName">Name of parameter to find.</param>
            <returns>True if the parameter name is in the collection, false if not.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection.Item(System.String)">
            <summary>
            Fetches a parameter's value by name.
            </summary>
            <param name="parameterName">parameter name.</param>
            <returns>value of the named parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.#ctor(System.Object[],System.Reflection.ParameterInfo[],System.Predicate{System.Reflection.ParameterInfo})">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection"/> that wraps the
            given array of arguments.
            </summary>
            <param name="arguments">Complete collection of arguments.</param>
            <param name="argumentInfo">Type information about each parameter.</param>
            <param name="isArgumentPartOfCollection">A <see cref="T:System.Predicate`1"/> that indicates
            whether a particular parameter is part of the collection. Used to filter out only input
            parameters, for example.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.GetParameterInfo(System.Int32)">
            <summary>
            Gets the ParameterInfo for a particular parameter by index.
            </summary>
            <param name="index">Index for this parameter.</param>
            <returns>ParameterInfo object describing the parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.GetParameterInfo(System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.ParameterInfo"/> for the given named parameter.
            </summary>
            <param name="parameterName">Name of parameter.</param>
            <returns><see cref="T:System.Reflection.ParameterInfo"/> for the requested parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ParameterName(System.Int32)">
            <summary>
            Gets the name of a parameter based on index.
            </summary>
            <param name="index">Index of parameter to get the name for.</param>
            <returns>Name of the requested parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ContainsParameter(System.String)">
            <summary>
            Does this collection contain a parameter value with the given name?
            </summary>
            <param name="parameterName">Name of parameter to find.</param>
            <returns>True if the parameter name is in the collection, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Add(System.Object)">
            <summary>
            Adds to the collection. This is a read only collection, so this method
            always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">Object to add.</param>
            <returns>Nothing, always throws.</returns>
            <exception cref="T:System.NotSupportedException">Always throws this.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Contains(System.Object)">
            <summary>
            Checks to see if the collection contains the given object.
            </summary>
            <remarks>Tests for the object using object.Equals.</remarks>
            <param name="value">Object to find.</param>
            <returns>true if object is in collection, false if it is not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Clear">
            <summary>
            Remove all items in the collection. This collection is fixed-size, so this
            method always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">This is always thrown.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.IndexOf(System.Object)">
            <summary>
            Returns the index of the given object, or -1 if not found.
            </summary>
            <param name="value">Object to find.</param>
            <returns>zero-based index of found object, or -1 if not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a new item. This is a fixed-size collection, so this method throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">Index to insert at.</param>
            <param name="value">Always throws.</param>
            <exception cref="T:System.NotSupportedException">Always throws this.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Remove(System.Object)">
            <summary>
            Removes the given item. This is a fixed-size collection, so this method throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">Always throws.</param>
            <exception cref="T:System.NotSupportedException">Always throws this.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the given item. This is a fixed-size collection, so this method throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">Always throws.</param>
            <exception cref="T:System.NotSupportedException">Always throws this.</exception>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of this collection to the given array.
            </summary>
            <param name="array">Destination array.</param>
            <param name="index">index to start copying from.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.GetEnumerator">
            <summary>
            Gets an enumerator object to support the foreach construct.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Item(System.String)">
            <summary>
            Fetches a parameter's value by name.
            </summary>
            <param name="parameterName">parameter name.</param>
            <value>value of the named parameter.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Item(System.Int32)">
            <summary>
            Gets the value of a parameter based on index.
            </summary>
            <param name="index">Index of parameter to get the value for.</param>
            <value>Value of the requested parameter.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.IsReadOnly">
            <summary>
            Is this collection read only?
            </summary>
            <value>No, it is not read only, the contents can change.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.IsFixedSize">
            <summary>
            Is this collection fixed size?
            </summary>
            <value>Yes, it is.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.Count">
            <summary>
            Total number of items in the collection.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.SyncRoot">
            <summary>
            Gets a synchronized version of this collection. WARNING: Not implemented completely,
            DO NOT USE THIS METHOD.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.IsSynchronized">
            <summary>
            Is the object synchronized for thread safety?
            </summary>
            <value>No, it isn't.</value>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ArgumentInfo">
            <summary>
            An internal struct that maps the index in the arguments collection to the
            corresponding <see cref="F:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ArgumentInfo.ParameterInfo"/> about that argument.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ArgumentInfo.#ctor(System.Int32,System.Reflection.ParameterInfo)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ArgumentInfo"/> object linking the
            given index and <see cref="F:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ArgumentInfo.ParameterInfo"/> object.
            </summary>
            <param name="index">Index into arguments array (zero-based).</param>
            <param name="parameterInfo"><see cref="F:Microsoft.Practices.Unity.InterceptionExtension.ParameterCollection.ArgumentInfo.ParameterInfo"/> for the argument at <paramref name="index"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInputParameterCollection.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Object[])">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInputParameterCollection"/> that wraps the
            given method call and arguments.
            </summary>
            <param name="callMessage">The call message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInterceptor">
            <summary>
            An instance interceptor that uses remoting proxies to do the
            interception.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInterceptor.CanIntercept(System.Type)">
            <summary>
            Can this interceptor generate a proxy for the given type?
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if interception is possible, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInterceptor.GetInterceptableMethods(System.Type,System.Type)">
            <summary>
            Returns a sequence of methods on the given type that can be
            intercepted.
            </summary>
            <param name="interceptedType">The intercepted type.</param>
            <param name="implementationType">The concrete type of the implementing object.</param>
            <returns>Sequence of <see cref="T:System.Reflection.MethodInfo"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyInterceptor.CreateProxy(System.Type,System.Object,System.Type[])">
            <summary>
            Create a proxy object that provides interception for <paramref name="target"/>.
            </summary>
            <param name="t">Type to generate the proxy of.</param>
            <param name="target">Object to create the proxy for.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
            <returns>The proxy object.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/> that wraps the
            remoting-based <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/> in the PIAB call
            interface.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation">
            <summary>
            This interface is used to represent the call to a method.
            An implementation of IMethodInvocation is passed to the
            call handlers so that they may manipulate the call
            (typically by changing the parameters) before the final target
            gets called.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.CreateMethodReturn(System.Object,System.Object[])">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn.
            </summary>
            <param name="returnValue">Return value to be placed in the IMethodReturn object.</param>
            <param name="outputs">All arguments passed or returned as out/byref to the method. 
            Note that this is the entire argument list, including in parameters.</param>
            <returns>New IMethodReturn object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.CreateExceptionMethodReturn(System.Exception)">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn in the presence of an exception.
            </summary>
            <param name="ex">Exception to be set into the returned object.</param>
            <returns>New IMethodReturn object</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.Inputs">
            <summary>
            Gets the inputs for this call.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.Arguments">
            <summary>
            Collection of all parameters to the call: in, out and byref.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.Target">
            <summary>
            The object that the call is made on.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation.MethodBase">
            <summary>
            The method on Target that we're aiming at.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Object)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/> implementation that wraps
            the given <paramref name="callMessage"/>, with the given ultimate
            target object.
            </summary>
            <param name="callMessage">Remoting call message object.</param>
            <param name="target">Ultimate target of the method call.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.CreateMethodReturn(System.Object,System.Object[])">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn.
            </summary>
            <remarks>In this implementation we create an instance of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn"/>.</remarks>
            <param name="returnValue">Return value to be placed in the IMethodReturn object.</param>
            <param name="outputs">All arguments passed or returned as out/byref to the method. 
            Note that this is the entire argument list, including in parameters.</param>
            <returns>New IMethodReturn object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.CreateExceptionMethodReturn(System.Exception)">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn in the presence of an exception.
            </summary>
            <param name="ex">Exception to be set into the returned object.</param>
            <returns>New IMethodReturn object</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.Inputs">
            <summary>
            Gets the inputs for this call.
            </summary>
            <value>The input collection.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.Microsoft#Practices#Unity#InterceptionExtension#IMethodInvocation#Arguments">
            <summary>
            Collection of all parameters to the call: in, out and byref.
            </summary>
            <value>The arguments collection.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
            <value>The invocation context dictionary.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.Target">
            <summary>
            The object that the call is made on.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.MethodBase">
            <summary>
            The method on Target that we're aiming at.
            </summary>
            <value>The target method base.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodInvocation.Arguments">
            <summary>
            Gets the collection of arguments being passed to the target.
            </summary>
            <remarks>This method exists becuase the underlying remoting call message
            does not let handlers change the arguments.</remarks>
            <value>Array containing the arguments to the target.</value>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn"/> that wraps the
            remoting call and return messages.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn">
            <summary>
            This interface is used to represent the return value from a method.
            An implementation of IMethodReturn is returned by call handlers, and
            each handler can manipulate the parameters, return value, or add an
            exception on the way out.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn.Outputs">
            <summary>
            The collection of output parameters. If the method has no output
            parameters, this is a zero-length list (never null).
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn.ReturnValue">
            <summary>
            Returns value from the method call.
            </summary>
            <remarks>This value is null if the method has no return value.</remarks>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn.Exception">
            <summary>
            If the method threw an exception, the exception object is here.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
            <remarks>This is guaranteed to be the same dictionary that was used
            in the IMethodInvocation object, so handlers can set context
            properties in the pre-call phase and retrieve them in the after-call phase.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Object,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn"/> object that contains a
            return value.
            </summary>
            <param name="callMessage">The original call message that invoked the method.</param>
            <param name="returnValue">Return value from the method.</param>
            <param name="arguments">Collections of arguments passed to the method (including the new
            values of any out params).</param>
            <param name="invocationContext">Invocation context dictionary passed into the call.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn.#ctor(System.Exception,System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn"/> object that contains an
            exception thrown by the target.
            </summary>
            <param name="ex">Exception that was thrown.</param>
            <param name="callMessage">The original call message that invoked the method.</param>
            <param name="invocationContext">Invocation context dictionary passed into the call.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn.ToMethodReturnMessage">
            <summary>
            Constructs a <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage"/> for the remoting
            infrastructure based on the contents of this object.
            </summary>
            <returns>The <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage"/> instance.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn.Outputs">
            <summary>
            The collection of output parameters. If the method has no output
            parameters, this is a zero-length list (never null).
            </summary>
            <value>The output parameter collection.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn.ReturnValue">
            <summary>
            Return value from the method call.
            </summary>
            <remarks>This value is null if the method has no return value.</remarks>
            <value>The return value.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn.Exception">
            <summary>
            If the method threw an exception, the exception object is here.
            </summary>
            <value>The exception, or null if no exception was thrown.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyMethodReturn.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
            <remarks>This is guaranteed to be the same dictionary that was used
            in the IMethodInvocation object, so handlers can set context
            properties in the pre-call phase and retrieve them in the after-call phase.
            </remarks>
            <value>The invocation context dictionary.</value>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyOutputParameterCollection">
            <summary>
            A class that wraps the outputs of a <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage"/> into the
            <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IParameterCollection"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyOutputParameterCollection.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Object[])">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TransparentProxyOutputParameterCollection"/> that wraps the
            given method call and arguments.
            </summary>
            <param name="callMessage">The call message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo">
            <summary>
            A dumb data holder that returns the methodinfo for both an
            interface method and the method that implements that interface
            method.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.#ctor(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo"/> which holds
            the given <see cref="T:System.Reflection.MethodInfo"/> objects.
            </summary>
            <param name="interfaceMethodInfo">MethodInfo for the interface method (may be null if no interface).</param>
            <param name="implementationMethodInfo">MethodInfo for implementing method.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.Equals(System.Object)">
            <summary>
                                Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">
                                The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
            <exception cref="T:System.NullReferenceException">
                                The <paramref name="obj" /> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.GetHashCode">
            <summary>
                                Serves as a hash function for a particular type. 
            </summary>
            <returns>
                                A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.op_Equality(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            Standard equals operator
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.op_Inequality(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            standard not equal operator.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.ToString">
            <summary>
                                Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
                                A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.InterfaceMethodInfo">
            <summary>
            The interface method MethodInfo.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo.ImplementationMethodInfo">
            <summary>
            The implementing method MethodInfo.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor">
            <summary>
            Interface for interceptor objects that generate
            proxy types.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ITypeInterceptor.CreateProxyType(System.Type,System.Type[])">
            <summary>
            Create a type to proxy for the given type <paramref name="t"/>.
            </summary>
            <param name="t">Type to proxy.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
            <returns>New type that can be instantiated instead of the
            original type t, and supports interception.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ConstructorWithResolverKeysSelectorPolicy">
            <summary>
             A small implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy"/> that returns the
             given <see cref="T:Microsoft.Practices.ObjectBuilder2.SelectedConstructor"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ConstructorWithResolverKeysSelectorPolicy.#ctor(Microsoft.Practices.ObjectBuilder2.SelectedConstructor)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ConstructorWithResolverKeysSelectorPolicy"/> instance.
            </summary>
            <param name="selectedConstructor">Information about which constructor to select.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ConstructorWithResolverKeysSelectorPolicy.SelectConstructor(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Choose the constructor to call for the given type.
            </summary>
            <param name="context">Current build context</param>
            <param name="resolverPolicyDestination">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to add any
            generated resolver objects into.</param>
            <returns>The chosen constructor.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocationMethods">
            <summary>
            MethodInfo objects for the methods we need to generate
            calls to on IMethodInvocation.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptingClassGenerator">
            <summary>
            Class that handles generating the dynamic types used for interception.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptingClassGenerator.#ctor(System.Type,System.Type[])">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptingClassGenerator"/> that will generate a
            wrapper class for the requested <paramref name="typeToIntercept"/>.
            </summary>
            <param name="typeToIntercept">Type to generate the wrapper for.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InterceptingClassGenerator.GenerateType">
            <summary>
            Create the wrapper class for the given type.
            </summary>
            <returns>Wrapper type.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InterceptingProxyImplementor">
            <summary>
            This class provides the code needed to implement the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IInterceptingProxy"/>
            interface on a class.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.MethodOverride">
            <summary>
            Represents the implementation of a method override.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodOverride.BuildAbstractMethodInvokedException">
            <summary>
            Used to throw an <see cref="T:System.NotImplementedException"/> for overrides on abstract methods.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.MethodOverrideParameterMapper">
            <summary>
            This class handles parameter type mapping. When we generate
            a generic method, we need to make sure our parameter type
            objects line up with the generic parameters on the generated
            method, not on the one we're overriding. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.MethodSorter">
            <summary>
            A utility class that takes a set of <see cref="T:System.Reflection.MethodInfo"/>s
            and pulls out shadowed methods, only returning the ones that
            are actually accessible to be overridden.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.GroupMethodsByName(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Take the list of methods and put them together into lists index by method name.
            </summary>
            <param name="methodsToSort">Methods to sort through.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.RemoveHiddenOverloads(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Given a list of overloads for a method, return only those methods
            that are actually visible. In other words, if there's a "new SomeType" method
            somewhere, return only the new one, not the one from the base class
            that's now hidden.
            </summary>
            <param name="methods">Sequence of methods to process.</param>
            <returns>Sequence of returned methods.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.GroupOverloadedMethods(System.Collections.Generic.IList{System.Reflection.MethodInfo})">
            <summary>
            Take a semi-randomly ordered set of methods on a type and
            sort them into groups by name and by parameter list.
            </summary>
            <param name="sortedMethods">The list of methods.</param>
            <returns>Sequence of lists of methods, grouped by method name.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.SelectMostDerivedOverload(System.Collections.Generic.IList{System.Reflection.MethodInfo})">
            <summary>
            Given a set of hiding overloads, return only the currently visible one.
            </summary>
            <param name="overloads">The set of overloads.</param>
            <returns>The most visible one.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.DeclarationDepth(System.Reflection.MethodInfo)">
            <summary>
            Given a method, return a value indicating how deeply in the
            inheritance hierarchy the method is declared. Current type = 0,
            parent = 1, grandparent = 2, etc.
            </summary>
            <param name="method">Method to check.</param>
            <returns>Declaration depth</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.CompareMethodInfosByParameterLists(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            A <see cref="T:System.Comparison`1"/> implementation that can compare two <see cref="T:System.Reflection.MethodInfo"/>
            based on their parameter lists.
            </summary>
            <param name="left">First <see cref="T:System.Reflection.MethodInfo"/> to compare.</param>
            <param name="right">Second <see cref="T:System.Reflection.MethodInfo"/> to compare.</param>
            <returns>&lt; 0, 0, or &gt; 0 based on which one is "greater" than the other.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.CompareParameterLists(System.Reflection.ParameterInfo[],System.Reflection.ParameterInfo[])">
            <summary>
            Compare two parameter lists.
            </summary>
            <param name="left">First parameter list.</param>
            <param name="right">Second parameter list.</param>
            <returns>&lt; 0, 0, or &gt; 0.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodSorter.CompareParameterInfo(System.Reflection.ParameterInfo,System.Reflection.ParameterInfo)">
            <summary>
            Compare two <see cref="T:System.Reflection.ParameterInfo"/> objects by type.
            </summary>
            <param name="left">First <see cref="T:System.Reflection.ParameterInfo"/></param>
            <param name="right">First <see cref="T:System.Reflection.ParameterInfo"/></param>
            <returns>&lt; 0, 0, or &gt; 0</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInterceptor">
            <summary>
            A type based interceptor that works by generated a new class
            on the fly that derives from the target class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInterceptor.CanIntercept(System.Type)">
            <summary>
            Can this interceptor generate a proxy for the given type?
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if interception is possible, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInterceptor.GetInterceptableMethods(System.Type,System.Type)">
            <summary>
            Returns a sequence of methods on the given type that can be
            intercepted.
            </summary>
            <param name="interceptedType">The intercepted type.</param>
            <param name="implementationType">The concrete type of the implementing object.</param>
            <returns>Sequence of <see cref="T:System.Reflection.MethodInfo"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInterceptor.CreateProxyType(System.Type,System.Type[])">
            <summary>
            Create a type to proxy for the given type <paramref name="t"/>.
            </summary>
            <param name="t">Type to proxy.</param>
            <param name="additionalInterfaces">Additional interfaces the proxy must implement.</param>
            <returns>New type that can be instantiated instead of the
            original type t, and supports interception.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/> used
            by the virtual method interceptor.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.#ctor(System.Object,System.Reflection.MethodBase,System.Object[])">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation"/> instance for the
            given target object and method, passing the <paramref name="parameterValues"/>
            to the target method.
            </summary>
            <param name="target">Object that is target of this invocation.</param>
            <param name="targetMethod">Method on <paramref name="target"/> to call.</param>
            <param name="parameterValues">Values for the parameters.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.CreateMethodReturn(System.Object,System.Object[])">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn.
            </summary>
            <param name="returnValue">Return value to be placed in the IMethodReturn object.</param>
            <param name="outputs">All arguments passed or returned as out/byref to the method. 
            Note that this is the entire argument list, including in parameters.</param>
            <returns>New IMethodReturn object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.CreateExceptionMethodReturn(System.Exception)">
            <summary>
            Factory method that creates the correct implementation of
            IMethodReturn in the presence of an exception.
            </summary>
            <param name="ex">Exception to be set into the returned object.</param>
            <returns>New IMethodReturn object</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.Inputs">
            <summary>
            Gets the inputs for this call.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.Arguments">
            <summary>
            Collection of all parameters to the call: in, out and byref.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.Target">
            <summary>
            The object that the call is made on.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodInvocation.MethodBase">
            <summary>
            The method on Target that we're aiming at.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMethodReturn"/> used by
            the virtual method interception mechanism.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,System.Object,System.Object[])">
            <summary>
            Construct a <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn"/> instance that returns
            a value.
            </summary>
            <param name="originalInvocation">The method invocation.</param>
            <param name="returnValue">Return value (should be null if method returns void).</param>
            <param name="arguments">All arguments (including current values) passed to the method.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,System.Exception)">
            <summary>
            Construct a <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn"/> instance for when the target method throws an exception.
            </summary>
            <param name="originalInvocation">The method invocation.</param>
            <param name="exception">Exception that was thrown.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn.Outputs">
            <summary>
            The collection of output parameters. If the method has no output
            parameters, this is a zero-length list (never null).
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn.ReturnValue">
            <summary>
            Returns value from the method call.
            </summary>
            <remarks>This value is null if the method has no return value.</remarks>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn.Exception">
            <summary>
            If the method threw an exception, the exception object is here.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.VirtualMethodReturn.InvocationContext">
            <summary>
            Retrieves a dictionary that can be used to store arbitrary additional
            values. This allows the user to pass values between call handlers.
            </summary>
            <remarks>This is guaranteed to be the same dictionary that was used
            in the IMethodInvocation object, so handlers can set context
            properties in the pre-call phase and retrieve them in the after-call phase.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey">
            <summary>
            Key for handler pipelines.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey.ForMethod(System.Reflection.MethodBase)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey"/> for the supplied method.
            </summary>
            <param name="methodBase">The method for the key.</param>
            <returns>The new key.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey.Equals(System.Object)">
            <summary>
            Compare two <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey"/> instances.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if the two keys are equal, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey.GetHashCode">
            <summary>
            Calculate a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey.op_Equality(Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey,Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey)">
            <summary>
            Compare two <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey"/> instances for equality.
            </summary>
            <param name="left">First of the two keys to compare.</param>
            <param name="right">Second of the two keys to compare.</param>
            <returns>True if the values of the keys are the same, else false.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey.op_Inequality(Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey,Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey)">
            <summary>
            Compare two <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey"/> instances for inequality.
            </summary>
            <param name="left">First of the two keys to compare.</param>
            <param name="right">Second of the two keys to compare.</param>
            <returns>false if the values of the keys are the same, else true.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey.Equals(Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey)">
            <summary>
            Compare two <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipelineKey"/> instances.
            </summary>
            <param name="other">Object to compare to.</param>
            <returns>True if the two keys are equal, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ApplyNoPoliciesMatchingRule">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> implementation that fails to match
            if the method in question has the ApplyNoPolicies attribute on it.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule">
            <summary>
            This interface is implemented by the matching rule classes.
            A Matching rule is used to see if a particular policy should
            be applied to a class member.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests to see if this rule applies to the given member.
            </summary>
            <param name="member">Member to test.</param>
            <returns>true if the rule applies, false if it doesn't.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ApplyNoPoliciesMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check if the <paramref name="member"/> matches this rule.
            </summary>
            <remarks>This rule returns true if the member does NOT have the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ApplyNoPoliciesAttribute"/>
            on it, or a containing type doesn't have the attribute.</remarks>
            <param name="member">Member to check.</param>
            <returns>True if the rule matches, false if it doesn't.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> that matches the assembly name of the
            given member.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule"/> with the given
            assembly name (or partial name).
            </summary>
            <param name="assemblyName">Assembly name to match.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule"/> that matches
            against the given assembly.
            </summary>
            <param name="assembly">Assembly to match.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.AssemblyMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Determines if the supplied <paramref name="member"/> matches the rule.
            </summary>
            <remarks>
            This rule matches if the assembly containing the given <paramref name="member"/>
            matches the name given. The rule used for matches lets you include the parts
            of the assembly name in order. You can specify assembly name only, assembly and version,
            assembly, version and culture, or the fully qualified assembly name.
            </remarks>
            <param name="member">Member to check.</param>
            <returns>true if <paramref name="member"/> is in a matching assembly, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicyMatchingRule">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> that checks to see if the
            member (or type containing that member) have any <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicyMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Checks to see if <paramref name="member"/> matches the rule.
            </summary>
            <remarks>Returns true if any <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute"/>s are present on the method
            or the type containing that method.</remarks>
            <param name="member">Member to check.</param>
            <returns>true if member matches, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.CustomAttributeMatchingRule">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> that checks to see if
            the member tested has an arbitrary attribute applied.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.CustomAttributeMatchingRule.#ctor(System.Type,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.CustomAttributeMatchingRule"/>.
            </summary>
            <param name="attributeType">Attribute to match.</param>
            <param name="inherited">If true, checks the base class for attributes as well.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.CustomAttributeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Checks to see if the given <paramref name="member"/> matches the rule.
            </summary>
            <param name="member">Member to check.</param>
            <returns>true if it matches, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo">
            <summary>
            Class used for storing information about a single name/ignoreCase
            pair. This class is also used as a base class for other classes that
            need this pair plus some other properties.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo.#ctor">
            <summary>
            Constructs an empty <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo"/> object with empty
            string and ignoreCase = false.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo"/> object that matches the given
            string. IgnoreCase is false.
            </summary>
            <param name="nameToMatch">The name to match.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo"/> object that matches the
            given string, setting the ignoreCase flag to the given value.
            </summary>
            <param name="nameToMatch">The name to match.</param>
            <param name="ignoreCase">true to do case insensitive comparison, false to do case sensitive.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo.Match">
            <summary>
            Gets or sets the name to match.
            </summary>
            <value>The name to match.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo.IgnoreCase">
            <summary>
            Gets or sets whether to do case sensitive comparisons of Match.
            </summary>
            <value>If false, case sensitive comparison. If true, case insensitive comparisons.</value>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.MatchingRuleSet">
            <summary>
            A <cref see="T:MatchingRuleSet"/> is a matching rule that
            is a collection of other matching rules. All the contained
            rules much match for the set to match.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MatchingRuleSet.Matches(System.Reflection.MethodBase)">
            <summary>
            Tests the given member against the ruleset. The member matches
            if all contained rules in the ruleset match against it.
            </summary>
            <remarks>If the ruleset is empty, then Matches passes since no rules failed.</remarks>
            <param name="member">MemberInfo to test.</param>
            <returns>true if all contained rules match, false if any fail.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule">
            <summary>
            A matching rule that matches when the given member name is
            the same as the one supplied in the constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule"/> that matches the
            given member name. Wildcards are allowed.
            </summary>
            <param name="nameToMatch">Name to match against. Comparison is case sensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule"/> that matches the
            given member name. Wildcards are allowed.
            </summary>
            <param name="nameToMatch">Name to match against.</param>
            <param name="ignoreCase">If false, name comparisons are case sensitive. If true, name comparisons are case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule"/> that matches the
            given member names. Wildcards are allowed.
            </summary>
            <param name="namesToMatch">collections of names to match. If any of these patterns match, the rule matches. Comparisons are case sensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule"/> that matches the
            given member names. Wildcards are allowed.
            </summary>
            <param name="namesToMatch">Collections of names to match. If any of these patterns match, the rule matches. </param>
            <param name="ignoreCase">If false, name comparisons are case sensitive. If true, name comparisons are case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo})">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule"/> that matches
            one of the given member names. Wildcards are allowed.
            </summary>
            <param name="matches">List of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo"/> objects containing
            the pattern to match and case sensitivity flag.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MemberNameMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check if the given <paramref name="member"/> matches one of this
            object's matching patterns.
            </summary>
            <param name="member">Member to check.</param>
            <returns>True if matches, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule">
            <summary>
            Match methods with the given names and method signature.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule"/> that matches methods
            with the given name, with parameter types matching the given list.
            </summary>
            <param name="methodName">Method name to match. Wildcards are allowed.</param>
            <param name="parameterTypeNames">Parameter type names to match, in order. Wildcards are allowed.</param>
            <param name="ignoreCase">If false, name comparisons are case sensitive. If true, name comparisons are case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule"/> that matches methods
            with the given name, with parameter types matching the given list.
            </summary>
            <remarks>Name comparisons are case sensitive.</remarks>
            <param name="methodName">Method name to match. Wildcards are allowed.</param>
            <param name="parameterTypeNames">Parameter type names to match, in order. Wildcards are allowed.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule"/> that matches any method
            with parameter types matching the given list.
            </summary>
            <remarks>Name comparisons are case sensitive.</remarks>
            <param name="parameterTypeNames">Parameter type names to match, in order. Wildcards are allowed.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule"/> that matches any method
            with parameter types matching the given list.
            </summary>
            <param name="parameterTypeNames">Parameter type names to match, in order. Wildcards are allowed.</param>
            <param name="ignoreCase">If false, name comparisons are case sensitive. If true, name comparisons are case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check to see if the given method matches the name and signature.
            </summary>
            <param name="member">Member to check.</param>
            <returns>True if match, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> that matches members in a given namespace. You can
            specify either a single namespace (e.g. <c>System.Data</c>) or a namespace root
            (e.g. <c>System.Data.*</c> to match types in that namespace or below.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule"/> that matches the given
            namespace.
            </summary>
            <param name="namespaceName">namespace name to match. Comparison is case sensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule"/> that matches the given
            namespace.
            </summary>
            <param name="namespaceName">namespace name to match.</param>
            <param name="ignoreCase">If false, comparison is case sensitive. If true, comparison is case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo})">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule"/> that matches any of
            the given namespace names.
            </summary>
            <param name="matches">Collection of namespace names to match.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check to see if the given <paramref name="member"/> is in a namespace
            matched by any of our given namespace names.
            </summary>
            <param name="member">member to check.</param>
            <returns>True if member is contained in a matching namespace, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.NamespaceMatchingInfo">
            <summary>
            A helper class that encapsulates the name to match, case sensitivity flag,
            and the wildcard rules for matching namespaces.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.NamespaceMatchingInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.NamespaceMatchingInfo"/> that matches the
            given namespace name.
            </summary>
            <param name="match">Namespace name to match.</param>
            <param name="ignoreCase">If false, comparison is case sensitive. If true, comparison is case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.NamespaceMatchingRule.NamespaceMatchingInfo.Matches(System.Type)">
            <summary>
            Check if the given type <paramref name="t"/> is in a matching namespace.
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if type is in a matching namespace, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> that matches methods that have any parameters
            of the given types.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo})">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule"/> that matches if any of
            the method parameters match ones in the given collection.
            </summary>
            <param name="matches">Collection of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo"/> that
            describes the types to match.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check the given member to see if it has any matching parameters.
            </summary>
            <param name="member">Member to match.</param>
            <returns>true if member matches, false if it doesn't.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingRule.ParameterMatches">
            <summary>
            The list of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo"/> describing the parameter types to match.
            </summary>
            <value>The collection of matches.</value>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterKind">
            <summary>
            Describes the type of parameter to match.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.ParameterKind.Input">
            <summary>
            Input parameter
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.ParameterKind.Output">
            <summary>
            Output parameter
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.ParameterKind.InputOrOutput">
            <summary>
            Input or output parameter
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.ParameterKind.ReturnValue">
            <summary>
            Method return value
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo">
            <summary>
            A class that stores information about a single type to match.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo.#ctor">
            <summary>
            Creates a new uninitialized <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo.#ctor(Microsoft.Practices.Unity.InterceptionExtension.ParameterKind)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo"/> matching the given kind of parameter.
            </summary>
            <param name="kind"><see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterKind"/> of parameter to match.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo.#ctor(System.String,Microsoft.Practices.Unity.InterceptionExtension.ParameterKind)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo"/> matching the given parameter
            type and kind.
            </summary>
            <param name="nameToMatch">Parameter <see cref="T:System.Type"/> name to match.</param>
            <param name="kind"><see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterKind"/> of parameter to match.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo.#ctor(System.String,System.Boolean,Microsoft.Practices.Unity.InterceptionExtension.ParameterKind)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo"/> matching the given parameter
            type and kind.
            </summary>
            <param name="nameToMatch">Parameter <see cref="T:System.Type"/> name to match.</param>
            <param name="ignoreCase">If false, compare type names using case-sensitive comparison.
            If true, compare type names using case-insensitive comparison.</param>
            <param name="kind"><see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterKind"/> of parameter to match.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.ParameterTypeMatchingInfo.Kind">
            <summary>
            What kind of parameter to match.
            </summary>
            <value><see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ParameterKind"/> indicating which kind of parameters to match.</value>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> implementation that matches properties
            by name. You can match the getter, setter, or both.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule"/> that matches the
            getter or setter of the given property.
            </summary>
            <param name="propertyName">Name of the property. Name comparison is case sensitive. Wildcards are allowed.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule.#ctor(System.String,Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule"/> that matches the
            given method of the given property.
            </summary>
            <param name="propertyName">Name of the property. Name comparison is case sensitive. Wildcards are allowed.</param>
            <param name="option">Match the getter, setter, or both.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule.#ctor(System.String,Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule"/> that matches the
            given method of the given property.
            </summary>
            <param name="propertyName">Name of the property to match. Wildcards are allowed.</param>
            <param name="option">Match the getter, setter, or both.</param>
            <param name="ignoreCase">If false, name comparison is case sensitive. If true, name comparison is case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo})">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule"/> that matches any of the
            given properties.
            </summary>
            <param name="matches">Collection of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo"/> defining which
            properties to match.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Checks if the given member matches the rule.
            </summary>
            <param name="member">Member to check.</param>
            <returns>True if it matches, false if it does not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption">
            <summary>
            Specifies which methods of a property should be matches by
            the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingRule"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption.Get">
            <summary>
            Match the property getter method.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption.Set">
            <summary>
            Match the property setter method.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption.GetOrSet">
            <summary>
            Match either the getter or setter method.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo">
            <summary>
            Information about a property match.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo"/> that matches the get or set methods
            of the given property name, and does a case-sensitive comparison.
            </summary>
            <param name="match">Property name to match.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo.#ctor(System.String,Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo"/> that matches the given methods of
            the given property name, doing a case-sensitive comparison.
            </summary>
            <param name="match">Property name to match.</param>
            <param name="option"><see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption"/> specifying which methods of the property to match.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo.#ctor(System.String,Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption,System.Boolean)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo"/> that matches the given methods of
            the given property name.
            </summary>
            <param name="match">Property name to match.</param>
            <param name="option"><see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption"/> specifying which methods of the property to match.</param>
            <param name="ignoreCase">If false, name comparison is case sensitive. If true, name comparison is case insensitive.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingInfo.Option">
            <summary>
            The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PropertyMatchingOption"/> to use when doing name comparisons on this property.
            </summary>
            <value>Specifies which methods of the property to match.</value>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> that checks to see if a member has a specified
            type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule.#ctor(System.Type)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule"/> that matches
            members with the given return type.
            </summary>
            <param name="returnType">Type to look for.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule"/> that matches
            the given return type by name.
            </summary>
            <remarks>See the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/> class for details on how
            type name matches are done.</remarks>
            <param name="returnTypeName">Type name to match. Name comparisons are case sensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule"/> that matches
            the given return type by name.
            </summary>
            <remarks>See the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/> class for details on how
            type name matches are done.</remarks>
            <param name="returnTypeName">Type name to match.</param>
            <param name="ignoreCase">If false, name comparison is case sensitive. If true, comparison
            is case insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ReturnTypeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check to see if the given member has a matching return type.
            </summary>
            <param name="member">Member to check.</param>
            <returns>true if return types match, false if they don't.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.TagAttribute">
            <summary>
            A simple attribute used to "tag" classes, methods, or properties with a
            string that can later be matched via the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TagAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TagAttribute"/> with the given string.
            </summary>
            <param name="tag">The tag string.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.TagAttribute.Tag">
            <summary>
            The string tag for this attribute.
            </summary>
            <value>the tag.</value>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule"/> that checks a member for the presence
            of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TagAttribute"/> on the method, property, or class, and
            that the given string matches.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule"/>, looking for
            the given string. The comparison is case sensitive.
            </summary>
            <param name="tagToMatch">tag string to match.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule"/>, looking for
            the given string. The comparison is case sensitive if <paramref name="ignoreCase"/> is
            false, case insensitive if <paramref name="ignoreCase"/> is true.
            </summary>
            <param name="tagToMatch">tag string to match.</param>
            <param name="ignoreCase">if false, case-sensitive comparison. If true, case-insensitive comparison.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TagAttributeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Check the given member for the presence of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TagAttribute"/> and
            match the strings.
            </summary>
            <param name="member">Member to check.</param>
            <returns>True if tag strings match, false if they don't.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule">
            <summary>
            A matching rule that matches when the member is declared
            in the given type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule.#ctor(System.Type)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/> that matches the
            given type.
            </summary>
            <param name="type">The type to match.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/> that matches types
            with the given name.
            </summary>
            <remarks>Comparisons are case sensitive.</remarks>
            <param name="typeName">Type name to match.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/> that matches types
            with the given name, using the given case sensitivity.
            </summary>
            <param name="typeName">Type name to match.</param>
            <param name="ignoreCase">if false, do case-sensitive comparison. If true, do case-insensitive.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.MatchingInfo})">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule"/> that will match
            any of the type names given in the collection of match information.
            </summary>
            <param name="matches">The match information to match.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule.Matches(System.Reflection.MethodBase)">
            <summary>
            Checks if the given member matches any of this object's matches.
            </summary>
            <param name="member">Member to match.</param>
            <returns>True if match, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.TypeMatchingRule.Matches(System.Type)">
            <summary>
            Checks if the given type matches any of this object's matches.
            </summary>
            <remarks>Matches may be on the namespace-qualified type name or just the type name.</remarks>
            <param name="t">Type to check.</param>
            <returns>True if it matches, false if it doesn't.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.UtilityExtensions">
            <summary>
            Some utility extension methods to make things portable to Silverlight.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline">
            <summary>
            The HandlerPipeline class encapsulates a list of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/>s
            and manages calling them in the proper order with the right inputs.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline"/> with an empty pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.ICallHandler})">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline"/> with the given collection
            of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/>s.
            </summary>
            <param name="handlers">Collection of handlers to add to the pipeline.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.InvokeHandlerDelegate)">
            <summary>
            Execute the pipeline with the given input.
            </summary>
            <param name="input">Input to the method call.</param>
            <param name="target">The ultimate target of the call.</param>
            <returns>Return value from the pipeline.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline.Count">
            <summary>
            Get the number of handlers in this pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler">
            <summary>
            Handlers implement this interface and are called for each
            invocation of the pipelines that they're included in.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate)">
            <summary>
            Implement this method to execute your handler processing.
            </summary>
            <param name="input">Inputs to the current call to the target.</param>
            <param name="getNext">Delegate to execute to get the next delegate in the handler
            chain.</param>
            <returns>Return value from the target.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler.Order">
            <summary>
            Order in which the handler will be executed
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InvokeHandlerDelegate">
            <summary>
            This delegate type is the type that points to the next
            method to execute in the current pipeline.
            </summary>
            <param name="input">Inputs to the current method call.</param>
            <param name="getNext">Delegate to get the next handler in the chain.</param>
            <returns>Return from the next method in the chain.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate">
            <summary>
            This delegate type is passed to each handler's Invoke method.
            Call the delegate to get the next delegate to call to continue
            the chain.
            </summary>
            <returns>Next delegate in the handler chain to call.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.PipelineManager">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline"/> objects, indexed
            by <see cref="T:System.Reflection.MethodBase"/>. Returns an empty pipeline if a
            MethodBase is requested that isn't in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PipelineManager.GetPipeline(System.Reflection.MethodBase)">
            <summary>
            Retrieve the pipeline associated with the requested <paramref name="method"/>.
            </summary>
            <param name="method">The method for which the pipeline is being requested.</param>
            <returns>The handler pipeline for the given method. If no pipeline has
            been set, returns a new empty pipeline.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PipelineManager.SetPipeline(System.Reflection.MethodBase,Microsoft.Practices.Unity.InterceptionExtension.HandlerPipeline)">
            <summary>
            Set a new pipeline for a method.
            </summary>
            <param name="method">The method on which the pipeline should be set.</param>
            <param name="pipeline">The new pipeline.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PipelineManager.InitializePipeline(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InterceptionExtension.ICallHandler})">
            <summary>
            Get the pipeline for the given method, creating it if necessary.
            </summary>
            <param name="method">Method to retrieve the pipeline for.</param>
            <param name="handlers">Handlers to initialize the pipeline with</param>
            <returns>True if the pipeline has any handlers in it, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ApplyNoPoliciesAttribute">
            <summary>
            Attribute used to indicate that no interception should be applied to
            the attribute target.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy"/> class that reads and constructs handlers
            based on <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute"/> on the target.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy">
            <summary>
            Base class for Policies that specifies which handlers apply to which methods of an object.
            </summary>
            <remarks>
            <para>This base class always enforces the 
            <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ApplyNoPoliciesMatchingRule"/> before
            passing the checks onto derived classes. This way, derived classes do not need to
            worry about implementing this check.</para>
            <para>It also means that derived classes cannot override this rule. This is considered a feature.</para></remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.#ctor">
            <summary>
            Creates a new empty Policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.#ctor(System.String)">
            <summary>
            Creates a new empty policy with the given name.
            </summary>
            <param name="name">Name of the policy.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.Matches(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            Checks if the rules in this policy match the given member info.
            </summary>
            <param name="member">MemberInfo to check against.</param>
            <returns>true if ruleset matches, false if it does not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.GetHandlersFor(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Returns ordered collection of handlers in order that apply to the given member.
            </summary>
            <param name="member">Member that may or may not be assigned handlers by this policy.</param>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to use when creating handlers,
            if necessary.</param>
            <returns>Collection of handlers (possibly empty) that apply to this member.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.GetMethodSet(System.Reflection.MethodBase)">
            <summary>
            Given a method on an object, return the set of MethodBases for that method,
            plus any interface methods that the member implements.
            </summary>
            <param name="member">Member to get Method Set for.</param>
            <returns>The set of methods</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.DoesMatch(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            Derived classes implement this method to calculate if the policy
            will provide any handler to the specified member.
            </summary>
            <param name="member">Member to check.</param>
            <returns>true if policy applies to this member, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.DoGetHandlersFor(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Derived classes implement this method to supply the list of handlers for
            this specific member.
            </summary>
            <param name="member">Member to get handlers for.</param>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to use when creating handlers,
            if necessary.</param>
            <returns>Enumerable collection of handlers for this method.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy.Name">
            <summary>
            Gets the name of this policy.
            </summary>
            <value>The name of the policy.</value>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicy.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicy"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicy.DoesMatch(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            Derived classes implement this method to calculate if the policy
            will provide any handler to the specified member.
            </summary>
            <param name="member">Member to check.</param>
            <returns>true if policy applies to this member, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.AttributeDrivenPolicy.DoGetHandlersFor(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Derived classes implement this method to supply the list of handlers for
            this specific member.
            </summary>
            <param name="member">Member to get handlers for.</param>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to use when creating handlers,
            if necessary.</param>
            <returns>Enumerable collection of handlers for this method.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute">
            <summary>
            Base class for handler attributes used in the attribute-driven
            interception policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute.CreateHandler(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Derived classes implement this method. When called, it
            creates a new call handler as specified in the attribute
            configuration.
            </summary>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to use when creating handlers,
            if necessary.</param>
            <returns>A new call handler object.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.HandlerAttribute.Order">
            <summary>
            Gets or sets the order in which the handler will be executed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.PolicySet">
            <summary>
            A collection of Policy objects. The policies within a PolicySet combine using
            an "or" operation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicySet.#ctor(Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy[])">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicySet"/> containing the given policies.
            </summary>
            <param name="policies">Policies to put into the policy set.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicySet.GetPoliciesFor(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            Gets the policies that apply to the given member.
            </summary>
            <param name="member">Member to get policies for.</param>
            <returns>Collection of policies that apply to this member.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicySet.GetPoliciesNotFor(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            Gets the policies in the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicySet"/> that do not
            apply to the given member.
            </summary>
            <param name="member">Member to check.</param>
            <returns>Collection of policies that do not apply to <paramref name="member"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicySet.GetHandlersFor(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Gets the handlers that apply to the given member based on all policies in the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicySet"/>.
            </summary>
            <param name="member">Member to get handlers for.</param>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to use when creating handlers,
            if necessary.</param>
            <returns>Collection of call handlers for <paramref name="member"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy">
            <summary>
            A policy is a combination of a matching rule set and a set of handlers.
            If the policy applies to a member, then the handlers will be enabled for
            that member.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy.#ctor(Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule[],System.String[])">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy"/> object with a set of matching rules
            and the names to use when resolving handlers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy.#ctor(System.String,Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule[],System.String[])">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy"/> object with a name, a set of matching rules
            and the names to use when resolving handlers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy.DoesMatch(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo)">
            <summary>
            Checks if the rules in this policy match the given member info.
            </summary>
            <param name="member">MemberInfo to check against.</param>
            <returns>true if ruleset matches, false if it does not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.RuleDrivenPolicy.DoGetHandlersFor(Microsoft.Practices.Unity.InterceptionExtension.MethodImplementationInfo,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Return ordered collection of handlers in order that apply to the given member.
            </summary>
            <param name="member">Member that may or may not be assigned handlers by this policy.</param>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to use when creating handlers,
            if necessary.</param>
            <returns>Collection of handlers (possibly empty) that apply to this member.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior">
            <summary>
            Interceptor that performs policy injection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior.#ctor(Microsoft.Practices.Unity.InterceptionExtension.PipelineManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior"/> with a pipeline manager.
            </summary>
            <param name="pipelineManager">The <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PipelineManager"/> for the new instance.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior.#ctor(Microsoft.Practices.Unity.InterceptionExtension.CurrentInterceptionRequest,Microsoft.Practices.Unity.InterceptionExtension.InjectionPolicy[],Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior"/> with the given information
            about what's being intercepted and the current set of injection policies.
            </summary>
            <param name="interceptionRequest">Information about what will be injected.</param>
            <param name="policies">Current injection policies.</param>
            <param name="container">Unity container that can be used to resolve call handlers.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextInterceptionBehaviorDelegate)">
            <summary>
            Applies the policy injection handlers configured for the invoked method.
            </summary>
            <param name="input">Inputs to the current call to the target.</param>
            <param name="getNext">Delegate to execute to get the next delegate in the handler
            chain.</param>
            <returns>Return value from the target.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior.GetRequiredInterfaces">
            <summary>
            Returns the interfaces required by the behavior for the objects it intercepts.
            </summary>
            <returns>An empty array of interfaces.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.PolicyInjectionBehavior.WillExecute">
            <summary>
            Returns a flag indicating if this behavior will actually do anything when invoked.
            </summary>
            <remarks>This is used to optimize interception. If the behaviors won't actually
            do anything (for example, PIAB where no policies match) then the interception
            mechanism can be skipped completely.</remarks>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionAbstractMethodNotImplemented">
            <summary>
              查找类似 Intercepted abstract method was invoked. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionAdditionalInterfaceNotImplemented">
            <summary>
              查找类似 Additional interfaces do not have an implementation. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionAdditionalInterfacesInvalid">
            <summary>
              查找类似 The additional interfaces supplied are invalid: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionAttributeNoSubclassOfAttribute">
            <summary>
              查找类似 Type must be a subclass of System.Attribute. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionCannotCreateInstance">
            <summary>
              查找类似 Could not create instance of type {0} with no constructor arguments. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionCannotMapGenericTypeDefinition">
            <summary>
              查找类似 Cannot map generic type parameters on a generic type definition (an unbound generic type). 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionContainsNullElement">
            <summary>
              查找类似 Collection contains a null element. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionMappedParametersDoNotMatch">
            <summary>
              查找类似 The lengths of the mapped generic parameters do not match. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionNullInterfacesCollection">
            <summary>
              查找类似 The collection of interfaces is null. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionRequiredInterfacesInvalid">
            <summary>
              查找类似 The required interfaces for behavior {1} are invalid: {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionTypeIsNotInterface">
            <summary>
              查找类似 The type {0} is not an interface. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionTypeIsNull">
            <summary>
              查找类似 Null type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.ExceptionTypeIsOpenGeneric">
            <summary>
              查找类似 The type {0} is an open generic. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.InterceptionNotSupported">
            <summary>
              查找类似 The type {0} is not interceptable. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.InterfaceMethodNotImplemented">
            <summary>
              查找类似 Could not find the implementation of interface method {0}.{1} in type {2} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.InterceptionExtension.Properties.Resources.NullBehavior">
            <summary>
              查找类似 Null is not permitted as an interception behavior. 的本地化字符串。
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.Glob">
            <summary>
            A &quot;glob&quot; is a string matching pattern. It is similar to the
            matches available in the file system (*.cs, for example). The Glob
            class implements this string matching.
            </summary>
            <remarks>Glob supports the following metacharacters:
                * - match zero or more characters
                ? - match any one character
            [abc] - match one character if it's in the characters inside the brackets.
            All other characters in the glob are literals.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Glob.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Glob"/> instance that matches the given pattern.
            </summary>
            <remarks>
            The pattern match is case sensitive by default.
            </remarks>
            <param name="pattern">Pattern to use. See <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Glob"/> summary for
            details of the pattern.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Glob.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Glob"/> instance that matches the given pattern.
            </summary>
            <param name="pattern">The pattern to use. See <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.Glob"/> summary for
            details of the patterns supported.</param>
            <param name="caseSensitive">If true, perform a case sensitive match. 
            If false, perform a case insensitive comparison.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.Glob.IsMatch(System.String)">
            <summary>
            Checks to see if the given string matches the pattern.
            </summary>
            <param name="s">String to check.</param>
            <returns>True if it matches, false if it doesn't.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InterceptionExtension.ReflectionHelper">
            <summary>
            A collection of utility functions to encapsulate details of
            reflection and finding attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ReflectionHelper.GetPropertyFromMethod(System.Reflection.MethodBase)">
            <summary>
            Given a MethodBase for a property's get or set method,
            return the corresponding property info.
            </summary>
            <param name="method">MethodBase for the property's get or set method.</param>
            <returns>PropertyInfo for the property, or null if method is not part of a property.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ReflectionHelper.GetPropertyFromMethod(System.Reflection.MethodInfo)">
            <summary>
            Given a MethodInfo for a property's get or set method,
            return the corresponding property info.
            </summary>
            <param name="method">MethodBase for the property's get or set method.</param>
            <returns>PropertyInfo for the property, or null if method is not part of a property.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ReflectionHelper.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Given a particular MemberInfo, return the custom attributes of the
            given type on that member.
            </summary>
            <typeparam name="TAttribute">Type of attribute to retrieve.</typeparam>
            <param name="member">The member to look at.</param>
            <param name="inherits">True to include attributes inherited from base classes.</param>
            <returns>Array of found attributes.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InterceptionExtension.ReflectionHelper.GetAllAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Given a particular MemberInfo, find all the attributes that apply to this
            member. Specifically, it returns the attributes on the type, then (if it's a
            property accessor) on the property, then on the member itself.
            </summary>
            <typeparam name="TAttribute">Type of attribute to retrieve.</typeparam>
            <param name="member">The member to look at.</param>
            <param name="inherits">true to include attributes inherited from base classes.</param>
            <returns>Array of found attributes.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.DependencyAttribute">
            <summary>
            This attribute is used to mark properties and parameters as targets for injection.
            </summary>
            <remarks>
            For properties, this attribute is necessary for injection to happen. For parameters,
            it's not needed unless you want to specify additional information to control how
            the parameter is resolved.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Unity.DependencyResolutionAttribute">
            <summary>
            Base class for attributes that can be placed on parameters
            or properties to specify how to resolve the value for
            that parameter or property.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.DependencyResolutionAttribute.CreateResolver(System.Type)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that
            will be used to get the value for the member this attribute is
            applied to.
            </summary>
            <param name="typeToResolve">Type of parameter or property that
            this attribute is decoration.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.DependencyAttribute.#ctor">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.DependencyAttribute"/> with no name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.DependencyAttribute.#ctor(System.String)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.DependencyAttribute"/> with the given name.
            </summary>
            <param name="name">Name to use when resolving this dependency.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.DependencyAttribute.CreateResolver(System.Type)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that
            will be used to get the value for the member this attribute is
            applied to.
            </summary>
            <param name="typeToResolve">Type of parameter or property that
            this attribute is decoration.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.DependencyAttribute.Name">
            <summary>
            The name specified in the constructor.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InjectionConstructorAttribute">
            <summary>
            This attribute is used to indicate which constructor to choose when
            the container attempts to build a type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InjectionMethodAttribute">
            <summary>
            This attribute is used to mark methods that should be called when
            the container is building an object.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.OptionalDependencyAttribute">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.DependencyResolutionAttribute"/> used to mark a dependency
            as optional - the container will try to resolve it, and return null
            if the resolution fails rather than throw.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.OptionalDependencyAttribute.#ctor">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.OptionalDependencyAttribute"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.OptionalDependencyAttribute.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.OptionalDependencyAttribute"/> object that
            specifies a named dependency.
            </summary>
            <param name="name">Name of the dependency.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.OptionalDependencyAttribute.CreateResolver(System.Type)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that
            will be used to get the value for the member this attribute is
            applied to.
            </summary>
            <param name="typeToResolve">Type of parameter or property that
            this attribute is decoration.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.OptionalDependencyAttribute.Name">
            <summary>
            Name of the dependency.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.CompositeResolverOverride">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/> that composites other
            ResolverOverride objects. The GetResolver operation then
            returns the resolver from the first child override that
            matches the current context and request.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.ResolverOverride">
            <summary>
            Base class for all override objects passed in the
            <see cref="M:Microsoft.Practices.Unity.IUnityContainer.Resolve(System.Type,System.String,Microsoft.Practices.Unity.ResolverOverride[])"/> method.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolverOverride.GetResolver(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
            for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of dependency desired.</param>
            <returns>a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolverOverride.OnType``1">
            <summary>
            Wrap this resolver in one that verifies the type of the object being built.
            This allows you to narrow any override down to a specific type easily.
            </summary>
            <typeparam name="T">Type to constrain the override to.</typeparam>
            <returns>The new override.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolverOverride.OnType(System.Type)">
            <summary>
            Wrap this resolver in one that verifies the type of the object being built.
            This allows you to narrow any override down to a specific type easily.
            </summary>
            <param name="typeToOverride">Type to constrain the override to.</param>
            <returns>The new override.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.CompositeResolverOverride.Add(Microsoft.Practices.Unity.ResolverOverride)">
            <summary>
            Add a new <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/> to the collection
            that is checked.
            </summary>
            <param name="newOverride">item to add.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.CompositeResolverOverride.AddRange(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.ResolverOverride})">
            <summary>
            Add a setof <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/>s to the collection.
            </summary>
            <param name="newOverrides">items to add.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.CompositeResolverOverride.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Unity.CompositeResolverOverride.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Unity.CompositeResolverOverride.GetResolver(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
            for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of dependency desired.</param>
            <returns>a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.ContainerRegistration">
            <summary>
            Class that returns information about the types registered in a container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.ContainerRegistration.RegisteredType">
            <summary>
            The type that was passed to the <see cref="M:Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])"/> method
            as the "from" type, or the only type if type mapping wasn't done.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.ContainerRegistration.MappedToType">
            <summary>
            The type that this registration is mapped to. If no type mapping was done, the
            <see cref="P:Microsoft.Practices.Unity.ContainerRegistration.RegisteredType"/> property and this one will have the same value.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.ContainerRegistration.Name">
            <summary>
            Name the type was registered under. Null for default registration.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.ContainerRegistration.LifetimeManagerType">
            <summary>
            The registered lifetime manager instance.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.ContainerRegistration.LifetimeManager">
            <summary>
            The lifetime manager for this registration.
            </summary>
            <remarks>
            This property will be null if this registration is for an open generic.</remarks>
        </member>
        <member name="T:Microsoft.Practices.Unity.DependencyOverride">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/> class that overrides
            the value injected whenever there is a dependency of the
            given type, regardless of where it appears in the object graph.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.DependencyOverride.#ctor(System.Type,System.Object)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.DependencyOverride"/> to override
            the given type with the given value.
            </summary>
            <param name="typeToConstruct">Type of the dependency.</param>
            <param name="dependencyValue">Value to use.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.DependencyOverride.GetResolver(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
            for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of dependency desired.</param>
            <returns>a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.DependencyOverride`1">
            <summary>
            A convenience version of <see cref="T:Microsoft.Practices.Unity.DependencyOverride"/> that lets you
            specify the dependency type using generic syntax.
            </summary>
            <typeparam name="T">Type of the dependency to override.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Unity.DependencyOverride`1.#ctor(System.Object)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.DependencyOverride`1"/> object that will
            override the given dependency, and pass the given value.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.DependencyOverrides">
            <summary>
            A convenience form of <see cref="T:Microsoft.Practices.Unity.DependencyOverride"/> that lets you
            specify multiple parameter overrides in one shot rather than having
            to construct multiple objects.
            </summary>
            <remarks>
            This class isn't really a collection, it just implements IEnumerable
            so that we get use of the nice C# collection initializer syntax.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Unity.OverrideCollection`3">
            <summary>
            Base helper class for creating collections of <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/> objects
            for use in passing a bunch of them to the resolve call. This base class provides
            the mechanics needed to allow you to use the C# collection initializer syntax.
            </summary>
            <typeparam name="TOverride">Concrete type of the <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/> this class collects.</typeparam>
            <typeparam name="TKey">Key used to create the underlying override object.</typeparam>
            <typeparam name="TValue">Value that the override returns.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Unity.OverrideCollection`3.Add(`1,`2)">
            <summary>
            Add a new override to the collection with the given key and value.
            </summary>
            <param name="key">Key - for example, a parameter or property name.</param>
            <param name="value">Value - the value to be returned by the override.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.OverrideCollection`3.GetResolver(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
            for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of dependency desired.</param>
            <returns>a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.OverrideCollection`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Unity.OverrideCollection`3.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Unity.OverrideCollection`3.MakeOverride(`1,`2)">
            <summary>
            When implemented in derived classes, this method is called from the <see cref="M:Microsoft.Practices.Unity.OverrideCollection`3.Add(`1,`2)"/>
            method to create the actual <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/> objects.
            </summary>
            <param name="key">Key value to create the resolver.</param>
            <param name="value">Value to store in the resolver.</param>
            <returns>The created <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.DependencyOverrides.MakeOverride(System.Type,System.Object)">
            <summary>
            When implemented in derived classes, this method is called from the <see cref="M:Microsoft.Practices.Unity.OverrideCollection`3.Add(`1,`2)"/>
            method to create the actual <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/> objects.
            </summary>
            <param name="key">Key value to create the resolver.</param>
            <param name="value">Value to store in the resolver.</param>
            <returns>The created <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.ChildContainerCreatedEventArgs">
            <summary>
            Event argument class for the <see cref="E:Microsoft.Practices.Unity.ExtensionContext.ChildContainerCreated"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ChildContainerCreatedEventArgs.#ctor(Microsoft.Practices.Unity.ExtensionContext)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.ChildContainerCreatedEventArgs"/> object with the
            given child container object.
            </summary>
            <param name="childContext">An <see cref="T:Microsoft.Practices.Unity.ExtensionContext"/> for the newly created child
            container.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.ChildContainerCreatedEventArgs.ChildContainer">
            <summary>
            The newly created child container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.ChildContainerCreatedEventArgs.ChildContext">
            <summary>
            An extension context for the created child container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.ExtensionContext">
            <summary>
            The <see cref="T:Microsoft.Practices.Unity.ExtensionContext"/> class provides the means for extension objects
            to manipulate the internal state of the <see cref="T:Microsoft.Practices.Unity.UnityContainer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ExtensionContext.RegisterNamedType(System.Type,System.String)">
            <summary>
            Store a type/name pair for later resolution.
            </summary>
            <remarks>
            <para>
            When users register type mappings (or other things) with a named key, this method
            allows you to register that name with the container so that when the <see cref="M:Microsoft.Practices.Unity.IUnityContainer.ResolveAll(System.Type,Microsoft.Practices.Unity.ResolverOverride[])"/>
            method is called, that name is included in the list that is returned.
            </para></remarks>
            <param name="t"><see cref="T:System.Type"/> to register.</param>
            <param name="name">Name assocated with that type.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.ExtensionContext.Container">
            <summary>
            The container that this context is associated with.
            </summary>
            <value>The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> object.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.ExtensionContext.Strategies">
            <summary>
            The strategies this container uses.
            </summary>
            <value>The <see cref="T:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> that the container uses to build objects.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.ExtensionContext.BuildPlanStrategies">
            <summary>
            The strategies this container uses to construct build plans.
            </summary>
            <value>The <see cref="T:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> that this container uses when creating
            build plans.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.ExtensionContext.Policies">
            <summary>
            The policies this container uses.
            </summary>
            <remarks>The <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> the that container uses to build objects.</remarks>
        </member>
        <member name="P:Microsoft.Practices.Unity.ExtensionContext.Lifetime">
            <summary>
            The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> that this container uses.
            </summary>
            <value>The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> is used to manage <see cref="T:System.IDisposable"/> objects that the container is managing.</value>
        </member>
        <member name="E:Microsoft.Practices.Unity.ExtensionContext.Registering">
            <summary>
            This event is raised when the <see cref="M:Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])"/> method,
            or one of its overloads, is called.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Unity.ExtensionContext.RegisteringInstance">
            <summary>
            This event is raised when the <see cref="M:Microsoft.Practices.Unity.IUnityContainer.RegisterInstance(System.Type,System.String,System.Object,Microsoft.Practices.Unity.LifetimeManager)"/> method,
            or one of its overloads, is called.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Unity.ExtensionContext.ChildContainerCreated">
            <summary>
            This event is raised when the <see cref="M:Microsoft.Practices.Unity.IUnityContainer.CreateChildContainer"/> method is called, providing 
            the newly created child container to extensions to act on as they see fit.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.NamedEventArgs">
            <summary>
            An EventArgs class that holds a string Name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.NamedEventArgs.#ctor">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.NamedEventArgs"/> with a null name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.NamedEventArgs.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.NamedEventArgs"/> with the given name.
            </summary>
            <param name="name">Name to store.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.NamedEventArgs.Name">
            <summary>
            The name.
            </summary>
            <value>Name used for this event arg object.</value>
        </member>
        <member name="T:Microsoft.Practices.Unity.RegisterEventArgs">
            <summary>
            Event argument class for the <see cref="E:Microsoft.Practices.Unity.ExtensionContext.Registering"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.RegisterEventArgs.#ctor(System.Type,System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.Unity.RegisterEventArgs"/>.
            </summary>
            <param name="typeFrom">Type to map from.</param>
            <param name="typeTo">Type to map to.</param>
            <param name="name">Name for the registration.</param>
            <param name="lifetimeManager"><see cref="P:Microsoft.Practices.Unity.RegisterEventArgs.LifetimeManager"/> to manage instances.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.RegisterEventArgs.TypeFrom">
            <summary>
            Type to map from.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.RegisterEventArgs.TypeTo">
            <summary>
            Type to map to.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.RegisterEventArgs.LifetimeManager">
            <summary>
            <see cref="P:Microsoft.Practices.Unity.RegisterEventArgs.LifetimeManager"/> to manage instances.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.RegisterInstanceEventArgs">
            <summary>
            Event argument class for the <see cref="E:Microsoft.Practices.Unity.ExtensionContext.RegisteringInstance"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.RegisterInstanceEventArgs.#ctor">
            <summary>
            Create a default <see cref="T:Microsoft.Practices.Unity.RegisterInstanceEventArgs"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.RegisterInstanceEventArgs.#ctor(System.Type,System.Object,System.String,Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.Unity.RegisterInstanceEventArgs"/> instance initialized with the given arguments.
            </summary>
            <param name="registeredType">Type of instance being registered.</param>
            <param name="instance">The instance object itself.</param>
            <param name="name">Name to register under, null if default registration.</param>
            <param name="lifetimeManager"><see cref="P:Microsoft.Practices.Unity.RegisterInstanceEventArgs.LifetimeManager"/> object that handles how
            the instance will be owned.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.RegisterInstanceEventArgs.RegisteredType">
            <summary>
            Type of instance being registered.
            </summary>
            <value>
            Type of instance being registered.
            </value>
        </member>
        <member name="P:Microsoft.Practices.Unity.RegisterInstanceEventArgs.Instance">
            <summary>
            Instance object being registered.
            </summary>
            <value>Instance object being registered</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.RegisterInstanceEventArgs.LifetimeManager">
            <summary>
            <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls ownership of
            this instance.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.GenericParameter">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> that lets you specify that
            an instance of a generic type parameter should be resolved.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.GenericParameterBase">
            <summary>
            Base class for <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> subclasses that let you specify that
            an instance of a generic type parameter should be resolved.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InjectionParameterValue">
            <summary>
            Base type for objects that are used to configure parameters for
            constructor or method injection, or for getting the value to
            be injected into a property.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionParameterValue.MatchesType(System.Type)">
            <summary>
            Test to see if this parameter value has a matching type for the given type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if this parameter value is compatible with type <paramref name="t"/>,
            false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionParameterValue.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
            to resolve open generic parameters.</param>
            <returns>The <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionParameterValue.ToParameters(System.Object[])">
            <summary>
            Convert the given set of arbitrary values to a sequence of InjectionParameterValue
            objects. The rules are: If it's already an InjectionParameterValue, return it. If
            it's a Type, return a ResolvedParameter object for that type. Otherwise return
            an InjectionParameter object for that value.
            </summary>
            <param name="values">The values to build the sequence from.</param>
            <returns>The resulting converted sequence.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionParameterValue.ToParameter(System.Object)">
            <summary>
            Convert an arbitrary value to an InjectionParameterValue object. The rules are: 
            If it's already an InjectionParameterValue, return it. If it's a Type, return a
            ResolvedParameter object for that type. Otherwise return an InjectionParameter
            object for that value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The resulting <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.InjectionParameterValue.ParameterTypeName">
            <summary>
            Name for the type represented by this <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/>.
            This may be an actual type name or a generic argument name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.GenericParameterBase.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.GenericParameter"/> instance that specifies
            that the given named generic parameter should be resolved.
            </summary>
            <param name="genericParameterName">The generic parameter name to resolve.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.GenericParameterBase.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.GenericParameter"/> instance that specifies
            that the given named generic parameter should be resolved.
            </summary>
            <param name="genericParameterName">The generic parameter name to resolve.</param>
            <param name="resolutionKey">name to use when looking up in the container.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.GenericParameterBase.MatchesType(System.Type)">
            <summary>
            Test to see if this parameter value has a matching type for the given type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if this parameter value is compatible with type <paramref name="t"/>,
            false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.GenericParameterBase.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
            to resolve open generic parameters.</param>
            <returns>The <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.GenericParameterBase.DoGetResolverPolicy(System.Type,System.String)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToResolve">The actual type to resolve.</param>
            <param name="resolutionKey">The resolution key.</param>
            <returns>The <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.GenericParameterBase.ParameterTypeName">
            <summary>
            Name for the type represented by this <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/>.
            This may be an actual type name or a generic argument name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.GenericParameter.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.GenericParameter"/> instance that specifies
            that the given named generic parameter should be resolved.
            </summary>
            <param name="genericParameterName">The generic parameter name to resolve.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.GenericParameter.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.GenericParameter"/> instance that specifies
            that the given named generic parameter should be resolved.
            </summary>
            <param name="genericParameterName">The generic parameter name to resolve.</param>
            <param name="resolutionKey">name to use when looking up in the container.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.GenericParameter.DoGetResolverPolicy(System.Type,System.String)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToResolve">The actual type to resolve.</param>
            <param name="resolutionKey">The resolution key.</param>
            <returns>The <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.GenericResolvedArrayParameter">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> that lets you specify that
            an array containing the registered instances of a generic type parameter 
            should be resolved.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.GenericResolvedArrayParameter.#ctor(System.String,System.Object[])">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.GenericResolvedArrayParameter"/> instance that specifies
            that the given named generic parameter should be resolved.
            </summary>
            <param name="genericParameterName">The generic parameter name to resolve.</param>
            <param name="elementValues">The values for the elements, that will
            be converted to <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> objects.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.GenericResolvedArrayParameter.MatchesType(System.Type)">
            <summary>
            Test to see if this parameter value has a matching type for the given type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if this parameter value is compatible with type <paramref name="t"/>,
            false if not.</returns>
            <remarks>A type is considered compatible if it is an array type of rank one
            and its element type is a generic type parameter with a name matching this generic
            parameter name configured for the receiver.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.GenericResolvedArrayParameter.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
            to resolve open generic parameters.</param>
            <returns>The <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.GenericResolvedArrayParameter.ParameterTypeName">
            <summary>
            Name for the type represented by this <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/>.
            This may be an actual type name or a generic argument name.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.InjectedMembers">
            <summary>
            A Unity container extension that allows you to configure
            which constructors, properties, and methods get injected
            via an API rather than through attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectedMembers.Initialize">
            <summary>
            Initial the container with this extension's functionality.
            </summary>
            <remarks>
            When overridden in a derived class, this method will modify the given
            <see cref="T:Microsoft.Practices.Unity.ExtensionContext"/> by adding strategies, policies, etc. to
            install it's functions into the container.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectedMembers.ConfigureInjectionFor``1(Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            API to configure the injection settings for a particular type.
            </summary>
            <typeparam name="TTypeToInject">Type the injection is being configured for.</typeparam>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectedMembers.ConfigureInjectionFor``1(System.String,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            API to configure the injection settings for a particular type/name pair.
            </summary>
            <typeparam name="TTypeToInject">Type the injection is being configured for.</typeparam>
            <param name="name">Name of registration</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectedMembers.ConfigureInjectionFor(System.Type,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            API to configure the injection settings for a particular type.
            </summary>
            <param name="typeToInject">Type to configure.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectedMembers.ConfigureInjectionFor(System.Type,System.String,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            API to configure the injection settings for a particular type/name pair.
            </summary>
            <param name="typeToInject">Type to configure.</param>
            <param name="name">Name of registration.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectedMembers.ConfigureInjectionFor(System.Type,System.Type,System.String,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            API to configure the injection settings for a particular type/name pair.
            </summary>
            <param name="serviceType">Type of interface/base class being registered (may be null).</param>
            <param name="implementationType">Type of actual implementation class being registered.</param>
            <param name="name">Name of registration.</param>
            <param name="injectionMembers">Objects containing the details on which members to inject and how.</param>
            <returns>This extension object.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InjectionConstructor">
            <summary>
            A class that holds the collection of information
            for a constructor, so that the container can
            be configured to call this constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionConstructor.#ctor(System.Object[])">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.Unity.InjectionConstructor"/> that looks
            for a constructor with the given set of parameters.
            </summary>
            <param name="parameterValues">The values for the parameters, that will
            be converted to <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> objects.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionConstructor.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
            container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="serviceType">Interface registered, ignored in this implementation.</param>
            <param name="implementationType">Type to register.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InjectionFactory">
            <summary>
            A class that lets you specify a factory method the container
            will use to create the object.
            </summary>
            <remarks>This is a significantly easier way to do the same
            thing the old static factory extension was used for.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionFactory.#ctor(System.Func{Microsoft.Practices.Unity.IUnityContainer,System.Object})">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.Unity.InjectionFactory"/> with
            the given factory function.
            </summary>
            <param name="factoryFunc">Factory function.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionFactory.#ctor(System.Func{Microsoft.Practices.Unity.IUnityContainer,System.Type,System.String,System.Object})">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.Unity.InjectionFactory"/> with
            the given factory function.
            </summary>
            <param name="factoryFunc">Factory function.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionFactory.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
            container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="serviceType">Type of interface being registered. If no interface,
            this will be null. This parameter is ignored in this implementation.</param>
            <param name="implementationType">Type of concrete type being registered.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InjectionMethod">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.InjectionMember"/> that configures the
            container to call a method as part of buildup.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionMethod.#ctor(System.String,System.Object[])">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InjectionMethod"/> instance which will configure
            the container to call the given methods with the given parameters.
            </summary>
            <param name="methodName">Name of the method to call.</param>
            <param name="methodParameters">Parameter values for the method.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionMethod.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
            container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="serviceType">Type of interface registered, ignored in this implementation.</param>
            <param name="implementationType">Type to register.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionMethod.MethodNameMatches(System.Reflection.MemberInfo,System.String)">
            <summary>
            A small function to handle name matching. You can override this
            to do things like case insensitive comparisons.
            </summary>
            <param name="targetMethod">MethodInfo for the method you're checking.</param>
            <param name="nameToMatch">Name of the method you're looking for.</param>
            <returns>True if a match, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InjectionParameter">
            <summary>
            A class that holds on to the given value and provides
            the required <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>
            when the container is configured.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.TypedInjectionValue">
            <summary>
            A base class for implementing <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> classes
            that deal in explicit types.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.TypedInjectionValue.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.TypedInjectionValue"/> that exposes
            information about the given <paramref name="parameterType"/>.
            </summary>
            <param name="parameterType">Type of the parameter.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.TypedInjectionValue.MatchesType(System.Type)">
            <summary>
            Test to see if this parameter value has a matching type for the given type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if this parameter value is compatible with type <paramref name="t"/>,
            false if not.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.TypedInjectionValue.ParameterType">
            <summary>
            The type of parameter this object represents.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.TypedInjectionValue.ParameterTypeName">
            <summary>
            Name for the type represented by this <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/>.
            This may be an actual type name or a generic argument name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionParameter.#ctor(System.Object)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.InjectionParameter"/> that stores
            the given value, using the runtime type of that value as the
            type of the parameter.
            </summary>
            <param name="parameterValue">Value to be injected for this parameter.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionParameter.#ctor(System.Type,System.Object)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.InjectionParameter"/> that stores
            the given value, associated with the given type.
            </summary>
            <param name="parameterType">Type of the parameter.</param>
            <param name="parameterValue">Value of the parameter</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionParameter.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
            to resolve open generic parameters.</param>
            <returns>The <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.InjectionParameter`1">
            <summary>
            A generic version of <see cref="T:Microsoft.Practices.Unity.InjectionParameter"/> that makes it a
            little easier to specify the type of the parameter.
            </summary>
            <typeparam name="TParameter">Type of parameter.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionParameter`1.#ctor(`0)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.InjectionParameter`1"/>.
            </summary>
            <param name="parameterValue">Value for the parameter.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.InjectionProperty">
            <summary>
            This class stores information about which properties to inject,
            and will configure the container accordingly.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionProperty.#ctor(System.String)">
            <summary>
            Configure the container to inject the given property name,
            resolving the value via the container.
            </summary>
            <param name="propertyName">Name of the property to inject.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionProperty.#ctor(System.String,System.Object)">
            <summary>
            Configure the container to inject the given property name,
            using the value supplied. This value is converted to an
            <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> object using the
            rules defined by the <see cref="M:Microsoft.Practices.Unity.InjectionParameterValue.ToParameters(System.Object[])"/>
            method.
            </summary>
            <param name="propertyName">Name of property to inject.</param>
            <param name="propertyValue">Value for property.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.InjectionProperty.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
            container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="serviceType">Interface being registered, ignored in this implemenation.</param>
            <param name="implementationType">Type to register.</param>
            <param name="name">Name used to resolve the type object.</param>
            <param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.OptionalGenericParameter">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> that lets you specify that
            an instance of a generic type parameter should be resolved, providing the <see langword="null"/>
            value if resolving fails.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.OptionalGenericParameter.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.GenericParameter"/> instance that specifies
            that the given named generic parameter should be resolved.
            </summary>
            <param name="genericParameterName">The generic parameter name to resolve.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.OptionalGenericParameter.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.GenericParameter"/> instance that specifies
            that the given named generic parameter should be resolved.
            </summary>
            <param name="genericParameterName">The generic parameter name to resolve.</param>
            <param name="resolutionKey">name to use when looking up in the container.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.OptionalGenericParameter.DoGetResolverPolicy(System.Type,System.String)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToResolve">The actual type to resolve.</param>
            <param name="resolutionKey">The resolution key.</param>
            <returns>The <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.OptionalParameter">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> that can be passed to
            <see cref="M:Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])"/> to configure a
            parameter or property as an optional dependency.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.OptionalParameter.#ctor(System.Type)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.OptionalParameter"/> object that
            specifies the given <paramref name="type"/>.
            </summary>
            <param name="type">Type of the dependency.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.OptionalParameter.#ctor(System.Type,System.String)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.OptionalParameter"/> object that
            specifies the given <paramref name="type"/> and <paramref name="name"/>.
            </summary>
            <param name="type">Type of the dependency.</param>
            <param name="name">Name for the dependency.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.OptionalParameter.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
            to resolve open generic parameters.</param>
            <returns>The <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.OptionalParameter`1">
            <summary>
            A generic version of <see cref="T:Microsoft.Practices.Unity.OptionalParameter"></see> that lets you
            specify the type of the dependency using generics syntax.
            </summary>
            <typeparam name="T">Type of the dependency.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Unity.OptionalParameter`1.#ctor">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.OptionalParameter`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.OptionalParameter`1.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.OptionalParameter`1"/> with the given
            <paramref name="name"/>.
            </summary>
            <param name="name">Name of the dependency.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.ResolvedArrayParameter">
            <summary>
            A class that stores a type, and generates a 
            resolver object that resolves all the named instances or the
            type registered in a container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolvedArrayParameter.#ctor(System.Type,System.Object[])">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.ResolvedArrayParameter"/> that
            resolves to the given element type and collection of element values.
            </summary>
            <param name="elementType">The type of elements to resolve.</param>
            <param name="elementValues">The values for the elements, that will
            be converted to <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> objects.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolvedArrayParameter.#ctor(System.Type,System.Type,System.Object[])">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.ResolvedArrayParameter"/> that
            resolves to the given array and element types and collection of element values.
            </summary>
            <param name="arrayParameterType">The type for the array of elements to resolve.</param>
            <param name="elementType">The type of elements to resolve.</param>
            <param name="elementValues">The values for the elements, that will
            be converted to <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> objects.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolvedArrayParameter.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
            to resolve open generic parameters.</param>
            <returns>The <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.ResolvedArrayParameter`1">
            <summary>
            A generic version of <see cref="T:Microsoft.Practices.Unity.ResolvedArrayParameter"/> for convenience
            when creating them by hand.
            </summary>
            <typeparam name="TElement">Type of the elements for the array of the parameter.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolvedArrayParameter`1.#ctor(System.Object[])">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.ResolvedArrayParameter`1"/> that
            resolves to the given element generic type with the given element values.
            </summary>
            <param name="elementValues">The values for the elements, that will
            be converted to <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> objects.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.ResolvedParameter">
            <summary>
            A class that stores a name and type, and generates a 
            resolver object that resolves the parameter via the
            container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolvedParameter.#ctor(System.Type)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.ResolvedParameter"/> that
            resolves to the given type.
            </summary>
            <param name="parameterType">Type of this parameter.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolvedParameter.#ctor(System.Type,System.String)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.ResolvedParameter"/> that
            resolves the given type and name.
            </summary>
            <param name="parameterType">Type of this parameter.</param>
            <param name="name">Name to use when resolving parameter.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolvedParameter.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
            return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
            to resolve open generic parameters.</param>
            <returns>The <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.ResolvedParameter`1">
            <summary>
            A generic version of <see cref="T:Microsoft.Practices.Unity.ResolvedParameter"/> for convenience
            when creating them by hand.
            </summary>
            <typeparam name="TParameter">Type of the parameter</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolvedParameter`1.#ctor">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.ResolvedParameter`1"/> for the given
            generic type and the default name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolvedParameter`1.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.ResolvedParameter`1"/> for the given
            generic type and name.
            </summary>
            <param name="name">Name to use to resolve this parameter.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.IUnityContainer">
            <summary>
            Interface defining the behavior of the Unity dependency injection container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container, where the created instances will use
            the given <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="from"><see cref="T:System.Type"/> that will be requested.</param>
            <param name="to"><see cref="T:System.Type"/> that will actually be returned.</param>
            <param name="name">Name to use for registration, null if a default registration.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.IUnityContainer.RegisterInstance(System.Type,System.String,System.Object,Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            </remarks>
            <param name="t">Type of instance to register (may be an implemented interface instead of the full type).</param>
            <param name="instance">Object to returned.</param>
            <param name="name">Name for registration.</param>
            <param name="lifetime">
            <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> object that controls how this instance will be managed by the container.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.IUnityContainer.Resolve(System.Type,System.String,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Resolve an instance of the requested type with the given name from the container.
            </summary>
            <param name="t"><see cref="T:System.Type"/> of object to get from the container.</param>
            <param name="name">Name of the object to retrieve.</param>
            <param name="resolverOverrides">Any overrides for the resolve call.</param>
            <returns>The retrieved object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.IUnityContainer.ResolveAll(System.Type,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Return instances of all registered types requested.
            </summary>
            <remarks>
            <para>
            This method is useful if you've registered multiple types with the same
            <see cref="T:System.Type"/> but different names.
            </para>
            <para>
            Be aware that this method does NOT return an instance for the default (unnamed) registration.
            </para>
            </remarks>
            <param name="t">The type requested.</param>
            <param name="resolverOverrides">Any overrides for the resolve calls.</param>
            <returns>Set of objects of type <paramref name="t"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.IUnityContainer.BuildUp(System.Type,System.Object,System.String,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Run an existing object through the container and perform injection on it.
            </summary>
            <remarks>
            <para>
            This method is useful when you don't control the construction of an
            instance (ASP.NET pages or objects created via XAML, for instance)
            but you still want properties and other injection performed.
            </para></remarks>
            <param name="t"><see cref="T:System.Type"/> of object to perform injection on.</param>
            <param name="existing">Instance to build up.</param>
            <param name="name">name to use when looking up the typemappings and other configurations.</param>
            <param name="resolverOverrides">Any overrides for the resolve calls.</param>
            <returns>The resulting object. By default, this will be <paramref name="existing"/>, but
            container extensions may add things like automatic proxy creation which would
            cause this to return a different object (but still type compatible with <paramref name="t"/>).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.IUnityContainer.Teardown(System.Object)">
            <summary>
            Run an existing object through the container, and clean it up.
            </summary>
            <param name="o">The object to tear down.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.IUnityContainer.AddExtension(Microsoft.Practices.Unity.UnityContainerExtension)">
            <summary>
            Add an extension object to the container.
            </summary>
            <param name="extension"><see cref="T:Microsoft.Practices.Unity.UnityContainerExtension"/> to add.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.IUnityContainer.Configure(System.Type)">
            <summary>
            Resolve access to a configuration interface exposed by an extension.
            </summary>
            <remarks>Extensions can expose configuration interfaces as well as adding
            strategies and policies to the container. This method walks the list of
            added extensions and returns the first one that implements the requested type.
            </remarks>
            <param name="configurationInterface"><see cref="T:System.Type"/> of configuration interface required.</param>
            <returns>The requested extension's configuration interface, or null if not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.IUnityContainer.RemoveAllExtensions">
            <summary>
            Remove all installed extensions from this container.
            </summary>
            <remarks>
            <para>
            This method removes all extensions from the container, including the default ones
            that implement the out-of-the-box behavior. After this method, if you want to use
            the container again you will need to either readd the default extensions or replace
            them with your own.
            </para>
            <para>
            The registered instances and singletons that have already been set up in this container
            do not get removed.
            </para>
            </remarks>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.IUnityContainer.CreateChildContainer">
            <summary>
            Create a child container.
            </summary>
            <remarks>
            A child container shares the parent's configuration, but can be configured with different
            settings or lifetime.</remarks>
            <returns>The new child container.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.IUnityContainer.Parent">
            <summary>
            The parent of this container.
            </summary>
            <value>The parent container, or null if this container doesn't have one.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.IUnityContainer.Registrations">
            <summary>
            Get a sequence of <see cref="T:Microsoft.Practices.Unity.ContainerRegistration"/> that describe the current state
            of the container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.ContainerControlledLifetimeManager">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that holds onto the instance given to it.
            When the <see cref="T:Microsoft.Practices.Unity.ContainerControlledLifetimeManager"/> is disposed,
            the instance is disposed with it.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.SynchronizedLifetimeManager">
            <summary>
            Base class for Lifetime managers which need to synchronize calls to
            <see cref="M:Microsoft.Practices.Unity.SynchronizedLifetimeManager.GetValue"/>.
            </summary>
            <remarks>
            <para>
            The purpose of this class is to provide a basic implementation of the lifetime manager synchronization pattern.
            </para>
            <para>
            Calls to the <see cref="M:Microsoft.Practices.Unity.SynchronizedLifetimeManager.GetValue"/> method of a <see cref="T:Microsoft.Practices.Unity.SynchronizedLifetimeManager"/> 
            instance acquire a lock, and if the instance has not been initialized with a value yet the lock will only be released 
            when such an initialization takes place by calling the <see cref="M:Microsoft.Practices.Unity.SynchronizedLifetimeManager.SetValue(System.Object)"/> method or if 
            the build request which resulted in the call to the GetValue method fails.
            </para>
            </remarks>
            <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>
        </member>
        <member name="T:Microsoft.Practices.Unity.LifetimeManager">
            <summary>
            Base class for Lifetime managers - classes that control how
            and when instances are created by the Unity container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ILifetimePolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that controls how instances are
            persisted and recovered from an external store. Used to implement
            things like singletons and per-http-request lifetime.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ILifetimePolicy.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ILifetimePolicy.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object to store.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ILifetimePolicy.RemoveValue">
            <summary>
            Remove the value this lifetime policy is managing from backing store.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.LifetimeManager.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.LifetimeManager.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.LifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.SynchronizedLifetimeManager.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
            <remarks>Calls to this method acquire a lock which is released only if a non-null value
            has been set for the lifetime manager.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.SynchronizedLifetimeManager.SynchronizedGetValue">
            <summary>
            Performs the actual retrieval of a value from the backing store associated 
            with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
            <remarks>This method is invoked by <see cref="M:Microsoft.Practices.Unity.SynchronizedLifetimeManager.GetValue"/>
            after it has acquired its lock.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.SynchronizedLifetimeManager.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
            <remarks>Setting a value will attempt to release the lock acquired by 
            <see cref="M:Microsoft.Practices.Unity.SynchronizedLifetimeManager.GetValue"/>.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.SynchronizedLifetimeManager.SynchronizedSetValue(System.Object)">
            <summary>
            Performs the actual storage of the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
            <remarks>This method is invoked by <see cref="M:Microsoft.Practices.Unity.SynchronizedLifetimeManager.SetValue(System.Object)"/>
            before releasing its lock.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.SynchronizedLifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.SynchronizedLifetimeManager.Recover">
            <summary>
            A method that does whatever is needed to clean up
            as part of cleaning up after an exception.
            </summary>
            <remarks>
            Don't do anything that could throw in this method,
            it will cause later recover operations to get skipped
            and play real havoc with the stack trace.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.ContainerControlledLifetimeManager.SynchronizedGetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.ContainerControlledLifetimeManager.SynchronizedSetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ContainerControlledLifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ContainerControlledLifetimeManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Unity.ContainerControlledLifetimeManager.Dispose(System.Boolean)">
            <summary>
            Standard Dispose pattern implementation. Not needed, but it keeps FxCop happy.
            </summary>
            <param name="disposing">Always true, since we don't have a finalizer.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.ExternallyControlledLifetimeManager">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that holds a weak reference to
            it's managed instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ExternallyControlledLifetimeManager.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.ExternallyControlledLifetimeManager.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ExternallyControlledLifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.HierarchicalLifetimeManager">
            <summary>
            A special lifetime manager which works like <see cref="T:Microsoft.Practices.Unity.ContainerControlledLifetimeManager"/>,
            except that in the presence of child containers, each child gets it's own instance
            of the object, instead of sharing one in the common parent.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.LifetimeManagerFactory">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeFactoryPolicy"/> that
            creates instances of the type of the given Lifetime Manager
            by resolving them through the container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ILifetimeFactoryPolicy">
            <summary>
            A builder policy used to create lifetime policy instances.
            Used by the LifetimeStrategy when instantiating open
            generic types.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ILifetimeFactoryPolicy.CreateLifetimePolicy">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimePolicy"/>.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ILifetimeFactoryPolicy.LifetimeType">
            <summary>
            The type of Lifetime manager that will be created by this factory.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.LifetimeManagerFactory.#ctor(Microsoft.Practices.Unity.ExtensionContext,System.Type)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.LifetimeManagerFactory"/> that will
            return instances of the given type, creating them by
            resolving through the container.
            </summary>
            <param name="containerContext">Container to resolve with.</param>
            <param name="lifetimeType">Type of LifetimeManager to create.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.LifetimeManagerFactory.CreateLifetimePolicy">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimePolicy"/>.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.LifetimeManagerFactory.LifetimeType">
            <summary>
            The type of Lifetime manager that will be created by this factory.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.PerResolveLifetimeManager">
            <summary>
            This is a custom lifetime manager that acts like <see cref="T:Microsoft.Practices.Unity.TransientLifetimeManager"/>,
            but also provides a signal to the default build plan, marking the type so that
            instances are reused across the build up object graph.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.PerResolveLifetimeManager.#ctor">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.PerResolveLifetimeManager"/> object that does not
            itself manage an instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.PerResolveLifetimeManager.#ctor(System.Object)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.PerResolveLifetimeManager"/> object that stores the
            give value. This value will be returned by <see cref="M:Microsoft.Practices.Unity.LifetimeManager.GetValue"/>
            but is not stored in the lifetime manager, nor is the value disposed.
            This Lifetime manager is intended only for internal use, which is why the
            normal <see cref="M:Microsoft.Practices.Unity.LifetimeManager.SetValue(System.Object)"/> method is not used here.
            </summary>
            <param name="value">Value to store.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.PerResolveLifetimeManager.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.PerResolveLifetimeManager.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later. In this class,
            this is a noop, since it has special hooks down in the guts.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.PerResolveLifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store. Noop in this class.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.PerThreadLifetimeManager">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that holds the instances given to it, 
            keeping one instance per thread.
            </summary>
            <remarks>
            <para>
            This LifetimeManager does not dispose the instances it holds.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.PerThreadLifetimeManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.PerThreadLifetimeManager"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.PerThreadLifetimeManager.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy for the 
            current thread.
            </summary>
            <returns>the object desired, or <see langword="null"/> if no such object is currently 
            stored for the current thread.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.PerThreadLifetimeManager.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later when requested
            in the current thread.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.PerThreadLifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
            <remarks>Not implemented for this lifetime manager.</remarks>
        </member>
        <member name="T:Microsoft.Practices.Unity.TransientLifetimeManager">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> implementation that does nothing,
            thus ensuring that instances are created new every time.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.TransientLifetimeManager.GetValue">
            <summary>
            Retrieve a value from the backing store associated with this Lifetime policy.
            </summary>
            <returns>the object desired, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.TransientLifetimeManager.SetValue(System.Object)">
            <summary>
            Stores the given value into backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.TransientLifetimeManager.RemoveValue">
            <summary>
            Remove the given object from backing store.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.ArrayResolutionStrategy">
            <summary>
            This strategy implements the logic that will call container.ResolveAll
            when an array parameter is detected.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ArrayResolutionStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Do the PreBuildUp stage of construction. This is where the actual work is performed.
            </summary>
            <param name="context">Current build context.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.ObjectBuilder.DefaultUnityConstructorSelectorPolicy">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy"/> that is
            aware of the build keys used by the Unity container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicyBase`1">
            <summary>
            Base class that provides an implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy"/>
            which lets you override how the parameter resolvers are created.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicyBase`1.SelectConstructor(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Choose the constructor to call for the given type.
            </summary>
            <param name="context">Current build context</param>
            <param name="resolverPolicyDestination">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to add any
            generated resolver objects into.</param>
            <returns>The chosen constructor.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicyBase`1.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="parameter">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicyBase`1.ConstructorLengthComparer.Compare(System.Reflection.ConstructorInfo,System.Reflection.ConstructorInfo)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
            
            <param name="y">The second object to compare.</param>
            <param name="x">The first object to compare.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ObjectBuilder.DefaultUnityConstructorSelectorPolicy.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <remarks>
            This implementation looks for the Unity <see cref="T:Microsoft.Practices.Unity.DependencyAttribute"/> on the
            parameter and uses it to create an instance of <see cref="T:Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy"/>
            for this parameter.</remarks>
            <param name="parameter">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.ObjectBuilder.DefaultUnityMethodSelectorPolicy">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy"/> that is aware
            of the build keys used by the Unity container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicyBase`1">
            <summary>
            Base class that provides an implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy"/>
            which lets you override how the parameter resolvers are created.
            </summary>
            <typeparam name="TMarkerAttribute">Attribute that marks methods that should
            be called.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy">
            <summary>
            An <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that will examine the given
            types and return a sequence of <see cref="T:System.Reflection.MethodInfo"/> objects
            that should be called as part of building the object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy.SelectMethods(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Return the sequence of methods to call while building the target object.
            </summary>
            <param name="context">Current build context.</param>
            <param name="resolverPolicyDestination">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to add any
            generated resolver objects into.</param>
            <returns>Sequence of methods to call.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicyBase`1.SelectMethods(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Return the sequence of methods to call while building the target object.
            </summary>
            <param name="context">Current build context.</param>
            <param name="resolverPolicyDestination">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to add any
            generated resolver objects into.</param>
            <returns>Sequence of methods to call.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicyBase`1.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="parameter">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.ObjectBuilder.DefaultUnityMethodSelectorPolicy.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="parameter">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.ObjectBuilder.DefaultUnityPropertySelectorPolicy">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy"/> that is aware of
            the build keys used by the unity container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.PropertySelectorBase`1">
            <summary>
            Base class that provides an implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy"/>
            which lets you override how the parameter resolvers are created.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy">
            <summary>
            An <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that returns a sequence
            of properties that should be injected for the given type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy.SelectProperties(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Returns sequence of properties on the given type that
            should be set as part of building that object.
            </summary>
            <param name="context">Current build context.</param>
            <param name="resolverPolicyDestination">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to add any
            generated resolver objects into.</param>
            <returns>Sequence of <see cref="T:System.Reflection.PropertyInfo"/> objects
            that contain the properties to set.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertySelectorBase`1.SelectProperties(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Returns sequence of properties on the given type that
            should be set as part of building that object.
            </summary>
            <param name="context">Current build context.</param>
            <param name="resolverPolicyDestination">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to add any
            generated resolver objects into.</param>
            <returns>Sequence of <see cref="T:System.Reflection.PropertyInfo"/> objects
            that contain the properties to set.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertySelectorBase`1.CreateResolver(System.Reflection.PropertyInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> for the given
            property.
            </summary>
            <param name="property">Property to create resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.ObjectBuilder.DefaultUnityPropertySelectorPolicy.CreateResolver(System.Reflection.PropertyInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> for the given
            property.
            </summary>
            <param name="property">Property to create resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.HierarchicalLifetimeStrategy">
            <summary>
            A strategy that handles Hierarchical lifetimes across a set of parent/child
            containers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.HierarchicalLifetimeStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.ObjectBuilder.LiteralValueDependencyResolverPolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> implementation that returns
            the value set in the constructor.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that is used at build plan execution time
            to resolve a dependent value.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy.Resolve(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Get the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>The value for the dependency.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.ObjectBuilder.LiteralValueDependencyResolverPolicy.#ctor(System.Object)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.Unity.ObjectBuilder.LiteralValueDependencyResolverPolicy"/>
            which will return the given value when resolved.
            </summary>
            <param name="dependencyValue">The value to return.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ObjectBuilder.LiteralValueDependencyResolverPolicy.Resolve(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Get the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>The value for the dependency.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that stores a
            type and name, and at resolution time puts them together into a
            <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.#ctor(System.Type,System.String)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy"/>
            with the given type and name.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name (may be null).</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.Resolve(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Resolve the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>The value for the dependency.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.Type">
            <summary>
            The type that this resolver resolves.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.Name">
            <summary>
            The name that this resolver resolves.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.OptionalDependencyResolverPolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that will attempt to
            resolve a value, and return null if it cannot rather than throwing.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.OptionalDependencyResolverPolicy.#ctor(System.Type,System.String)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.OptionalDependencyResolverPolicy"/> object
            that will attempt to resolve the given name and type from the container.
            </summary>
            <param name="type">Type to resolve. Must be a reference type.</param>
            <param name="name">Name to resolve with.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.OptionalDependencyResolverPolicy.#ctor(System.Type)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.OptionalDependencyResolverPolicy"/> object
            that will attempt to resolve the given type from the container.
            </summary>
            <param name="type">Type to resolve. Must be a reference type.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.OptionalDependencyResolverPolicy.Resolve(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Get the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>The value for the dependency.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.OptionalDependencyResolverPolicy.DependencyType">
            <summary>
            Type this resolver will resolve.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.OptionalDependencyResolverPolicy.Name">
            <summary>
            Name this resolver will resolve.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.ResolvedArrayWithElementsResolverPolicy">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that resolves to
            to an array populated with the values that result from resolving other instances
            of <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolvedArrayWithElementsResolverPolicy.#ctor(System.Type,Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy[])">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.ResolvedArrayWithElementsResolverPolicy"/>
            with the given type and a collection of <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>
            instances to use when populating the result.
            </summary>
            <param name="elementType">The type.</param>
            <param name="elementPolicies">The resolver policies to use when populating an array.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolvedArrayWithElementsResolverPolicy.Resolve(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Resolve the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>An array pupulated with the results of resolving the resolver policies.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.ObjectBuilder.SpecifiedConstructorSelectorPolicy">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy"/> that selects
            the given constructor and creates the appropriate resolvers to call it with
            the specified parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ObjectBuilder.SpecifiedConstructorSelectorPolicy.#ctor(System.Reflection.ConstructorInfo,Microsoft.Practices.Unity.InjectionParameterValue[])">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.ObjectBuilder.SpecifiedConstructorSelectorPolicy"/> that
            will return the given constructor, being passed the given injection values
            as parameters.
            </summary>
            <param name="ctor">The constructor to call.</param>
            <param name="parameterValues">Set of <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> objects
            that describes how to obtain the values for the constructor parameters.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ObjectBuilder.SpecifiedConstructorSelectorPolicy.SelectConstructor(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Choose the constructor to call for the given type.
            </summary>
            <param name="context">Current build context</param>
            <param name="resolverPolicyDestination">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to add any
            generated resolver objects into.</param>
            <returns>The chosen constructor.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.ObjectBuilder.SpecifiedMemberSelectorHelper">
            <summary>
            Helper class for implementing selector policies that need to
            set up dependency resolver policies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ObjectBuilder.SpecifiedMemberSelectorHelper.AddParameterResolvers(System.Type,Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InjectionParameterValue},Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters)">
            <summary>
            Add dependency resolvers to the parameter set.
            </summary>
            <param name="typeToBuild">Type that's currently being built (used to resolve open generics).</param>
            <param name="policies">PolicyList to add the resolvers to.</param>
            <param name="parameterValues">Objects supplying the dependency resolvers.</param>
            <param name="result">Result object to store the keys in.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.ObjectBuilder.SpecifiedMethodsSelectorPolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy"/> implementation that calls the specific
            methods with the given parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ObjectBuilder.SpecifiedMethodsSelectorPolicy.AddMethodAndParameters(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InjectionParameterValue})">
            <summary>
            Add the given method and parameter collection to the list of methods
            that will be returned when the selector's <see cref="M:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy.SelectMethods(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)"/>
            method is called.
            </summary>
            <param name="method">Method to call.</param>
            <param name="parameters">sequence of <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> objects
            that describe how to create the method parameter values.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ObjectBuilder.SpecifiedMethodsSelectorPolicy.SelectMethods(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Return the sequence of methods to call while building the target object.
            </summary>
            <param name="context">Current build context.</param>
            <param name="resolverPolicyDestination">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to add any
            generated resolver objects into.</param>
            <returns>Sequence of methods to call.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.ObjectBuilder.SpecifiedPropertiesSelectorPolicy">
            <summary>
            An implemnetation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy"/> which returns
            the set of specific properties that the selector was configured with.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ObjectBuilder.SpecifiedPropertiesSelectorPolicy.AddPropertyAndValue(System.Reflection.PropertyInfo,Microsoft.Practices.Unity.InjectionParameterValue)">
            <summary>
            Add a property that will be par of the set returned when the 
            <see cref="M:Microsoft.Practices.Unity.ObjectBuilder.SpecifiedPropertiesSelectorPolicy.SelectProperties(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)"/> is called.
            </summary>
            <param name="property">The property to set.</param>
            <param name="value"><see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> object describing
            how to create the value to inject.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ObjectBuilder.SpecifiedPropertiesSelectorPolicy.SelectProperties(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Returns sequence of properties on the given type that
            should be set as part of building that object.
            </summary>
            <param name="context">Current build context.</param>
            <param name="resolverPolicyDestination">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to add any
            generated resolver objects into.</param>
            <returns>Sequence of <see cref="T:System.Reflection.PropertyInfo"/> objects
            that contain the properties to set.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage">
            <summary>
            The build stages we use in the Unity container
            strategy pipeline.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage.Setup">
            <summary>
            First stage. By default, nothing happens here.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage.TypeMapping">
            <summary>
            Second stage. Type mapping occurs here.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage.Lifetime">
            <summary>
            Third stage. lifetime managers are checked here,
            and if they're available the rest of the pipeline is skipped.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage.PreCreation">
            <summary>
            Fourth stage. Reflection over constructors, properties, etc. is
            performed here.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage.Creation">
            <summary>
            Fifth stage. Instance creation happens here.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage.Initialization">
            <summary>
            Sixth stage. Property sets and method injection happens here.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Unity.ObjectBuilder.UnityBuildStage.PostInitialization">
            <summary>
            Seventh and final stage. By default, nothing happens here.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuilderContext">
            <summary>
            Represents the context in which a build-up or tear-down operation runs.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext">
            <summary>
            Represents the context in which a build-up or tear-down operation runs.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderContext.AddResolverOverrides(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.ResolverOverride})">
            <summary>
            Add a new set of resolver override objects to the current build operation.
            </summary>
            <param name="newOverrides"><see cref="T:Microsoft.Practices.Unity.ResolverOverride"/> objects to add.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderContext.GetOverriddenResolver(System.Type)">
            <summary>
            Get a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object for the given <paramref name="dependencyType"/>
            or null if that dependency hasn't been overridden.
            </summary>
            <param name="dependencyType">Type of the dependency.</param>
            <returns>Resolver to use, or null if no override matches for the current operation.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderContext.NewBuildUp(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            A convenience method to do a new buildup operation on an existing context.
            </summary>
            <param name="newBuildKey">Key to use to build up.</param>
            <returns>Created object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderContext.NewBuildUp(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,System.Action{Microsoft.Practices.ObjectBuilder2.IBuilderContext})">
            <summary>
            A convenience method to do a new buildup operation on an existing context. This
            overload allows you to specify extra policies which will be in effect for the duration
            of the build.
            </summary>
            <param name="newBuildKey">Key defining what to build up.</param>
            <param name="childCustomizationBlock">A delegate that takes a <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/>. This
            is invoked with the new child context before the build up process starts. This gives callers
            the opportunity to customize the context for the build process.</param>
            <returns>Created object.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.Strategies">
            <summary>
            Gets the head of the strategy chain.
            </summary>
            <returns>
            The strategy that's first in the chain; returns null if there are no
            strategies in the chain.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.Lifetime">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> associated with the build.
            </summary>
            <value>
            The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> associated with the build.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.OriginalBuildKey">
            <summary>
            Gets the original build key for the build operation.
            </summary>
            <value>
            The original build key for the build operation.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.BuildKey">
            <summary>
            Get the current build key for the current build operation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.PersistentPolicies">
            <summary>
            The set of policies that were passed into this context.
            </summary>
            <remarks>This returns the policies passed into the context.
            Policies added here will remain after buildup completes.</remarks>
            <value>The persistent policies for the current context.</value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.Policies">
            <summary>
            Gets the policies for the current context. 
            </summary>
            <remarks>Any policies added to this object are transient
            and will be erased at the end of the buildup.</remarks>
            <value>
            The policies for the current context.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.RecoveryStack">
            <summary>
            Gets the collection of <see cref="T:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/> objects
            that need to execute in event of an exception.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.Existing">
            <summary>
            The current object being built up or torn down.
            </summary>
            <value>
            The current object being manipulated by the build operation. May
            be null if the object hasn't been created yet.</value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.BuildComplete">
            <summary>
            Flag indicating if the build operation should continue.
            </summary>
            <value>true means that building should not call any more
            strategies, false means continue to the next strategy.</value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.CurrentOperation">
            <summary>
            An object representing what is currently being done in the
            build chain. Used to report back errors if there's a failure.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.ChildContext">
            <summary>
            The build context used to resolve a dependency during the build operation represented by this context.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderContext.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderContext"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderContext.#ctor(Microsoft.Practices.ObjectBuilder2.IStrategyChain,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Microsoft.Practices.ObjectBuilder2.IPolicyList,Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderContext"/> class with a <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/>, 
            <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/>, <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> and the 
            build key used to start this build operation. 
            </summary>
            <param name="chain">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/> to use for this context.</param>
            <param name="lifetime">The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> to use for this context.</param>
            <param name="policies">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to use for this context.</param>
            <param name="originalBuildKey">Build key to start building.</param>
            <param name="existing">The existing object to build up.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderContext.#ctor(Microsoft.Practices.ObjectBuilder2.IStrategyChain,Microsoft.Practices.ObjectBuilder2.ILifetimeContainer,Microsoft.Practices.ObjectBuilder2.IPolicyList,Microsoft.Practices.ObjectBuilder2.IPolicyList,Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,System.Object)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderContext"/> using the explicitly provided
            values.
            </summary>
            <param name="chain">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/> to use for this context.</param>
            <param name="lifetime">The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> to use for this context.</param>
            <param name="persistentPolicies">The set of persistent policies to use for this context.</param>
            <param name="transientPolicies">The set of transient policies to use for this context. It is
            the caller's responsibility to ensure that the transient and persistent policies are properly
            combined.</param>
            <param name="buildKey">Build key for this context.</param>
            <param name="existing">Existing object to build up.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderContext.AddResolverOverrides(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.ResolverOverride})">
            <summary>
            Add a new set of resolver override objects to the current build operation.
            </summary>
            <param name="newOverrides"><see cref="T:Microsoft.Practices.Unity.ResolverOverride"/> objects to add.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderContext.GetOverriddenResolver(System.Type)">
            <summary>
            Get a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object for the given <paramref name="dependencyType"/>
            or null if that dependency hasn't been overridden.
            </summary>
            <param name="dependencyType">Type of the dependency.</param>
            <returns>Resolver to use, or null if no override matches for the current operation.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderContext.NewBuildUp(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            A convenience method to do a new buildup operation on an existing context.
            </summary>
            <param name="newBuildKey">Key to use to build up.</param>
            <returns>Created object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderContext.NewBuildUp(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,System.Action{Microsoft.Practices.ObjectBuilder2.IBuilderContext})">
            <summary>
            A convenience method to do a new buildup operation on an existing context. This
            overload allows you to specify extra policies which will be in effect for the duration
            of the build.
            </summary>
            <param name="newBuildKey">Key defining what to build up.</param>
            <param name="childCustomizationBlock">A delegate that takes a <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/>. This
            is invoked with the new child context before the build up process starts. This gives callers
            the opportunity to customize the context for the build process.</param>
            <returns>Created object.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.Strategies">
            <summary>
            Gets the head of the strategy chain.
            </summary>
            <returns>
            The strategy that's first in the chain; returns null if there are no
            strategies in the chain.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.BuildKey">
            <summary>
            Get the current build key for the current build operation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.Existing">
            <summary>
            The current object being built up or torn down.
            </summary>
            <value>
            The current object being manipulated by the build operation. May
            be null if the object hasn't been created yet.</value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.Lifetime">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> associated with the build.
            </summary>
            <value>
            The <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer"/> associated with the build.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.OriginalBuildKey">
            <summary>
            Gets the original build key for the build operation.
            </summary>
            <value>
            The original build key for the build operation.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.PersistentPolicies">
            <summary>
            The set of policies that were passed into this context.
            </summary>
            <remarks>This returns the policies passed into the context.
            Policies added here will remain after buildup completes.</remarks>
            <value>The persistent policies for the current context.</value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.Policies">
            <summary>
            Gets the policies for the current context. 
            </summary>
            <remarks>
            Any modifications will be transient (meaning, they will be forgotten when 
            the outer BuildUp for this context is finished executing).
            </remarks>
            <value>
            The policies for the current context.
            </value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.RecoveryStack">
            <summary>
            Gets the collection of <see cref="T:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/> objects
            that need to execute in event of an exception.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.BuildComplete">
            <summary>
            Flag indicating if the build operation should continue.
            </summary>
            <value>true means that building should not call any more
            strategies, false means continue to the next strategy.</value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.CurrentOperation">
            <summary>
            An object representing what is currently being done in the
            build chain. Used to report back errors if there's a failure.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuilderContext.ChildContext">
            <summary>
            The build context used to resolve a dependency during the build operation represented by this context.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DependencyMissingException">
            <summary>
            Represents that a dependency could not be resolved.
            </summary>
            <summary>
            Represents that a dependency could not be resolved.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with no extra information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with the given message.
            </summary>
            <param name="message">Some random message.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with the given
            message and inner exception.
            </summary>
            <param name="message">Some random message</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with the build key of the object begin built.
            </summary>
            <param name="buildKey">The build key of the object begin built.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.DependencyMissingException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException">
            <summary>
            The exception thrown when injection is attempted on a method
            that is an open generic or has out or ref params.
            </summary>
            <summary>
            The exception thrown when injection is attempted on a method
            that is an open generic or has out or ref params.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException.#ctor">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException"/> with no
            message.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException"/> with the given message
            </summary>
            <param name="message">Message to return.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a <see cref="T:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException"/> with the given message
            and inner exception.
            </summary>
            <param name="message">Message to return.</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IllegalInjectionMethodException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used for serialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuilderContextExtensions">
            <summary>
            Extension methods to provide convenience overloads over the
            <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderContextExtensions.NewBuildUp``1(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Start a recursive build up operation to retrieve the default
            value for the given <typeparamref name="TResult"/> type.
            </summary>
            <typeparam name="TResult">Type of object to build.</typeparam>
            <param name="context">Parent context.</param>
            <returns>Resulting object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderContextExtensions.NewBuildUp``1(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.String)">
            <summary>
            Start a recursive build up operation to retrieve the named
            implementation for the given <typeparamref name="TResult"/> type.
            </summary>
            <typeparam name="TResult">Type to resolve.</typeparam>
            <param name="context">Parent context.</param>
            <param name="name">Name to resolve with.</param>
            <returns>The resulting object.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderContextExtensions.AddResolverOverrides(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Add a set of <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/>s to the context, specified as a 
            variable argument list.
            </summary>
            <param name="context">Context to add overrides to.</param>
            <param name="overrides">The overrides.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IRecoveryStack">
            <summary>
            Data structure that stores the set of <see cref="T:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/>
            objects and executes them when requested.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IRecoveryStack.Add(Microsoft.Practices.ObjectBuilder2.IRequiresRecovery)">
            <summary>
            Add a new <see cref="T:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/> object to this
            list.
            </summary>
            <param name="recovery">Object to add.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IRecoveryStack.ExecuteRecovery">
            <summary>
            Execute the <see cref="M:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery.Recover"/> method
            of everything in the recovery list. Recoveries will execute
            in the opposite order of add - it's a stack.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.IRecoveryStack.Count">
            <summary>
            Return the number of recovery objects currently in the stack.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer">
            <summary>
            Represents a lifetime container.
            </summary>
            <remarks>
            A lifetime container tracks the lifetime of an object, and implements
            IDisposable. When the container is disposed, any objects in the
            container which implement IDisposable are also disposed.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer.Add(System.Object)">
            <summary>
            Adds an object to the lifetime container.
            </summary>
            <param name="item">The item to be added to the lifetime container.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer.Contains(System.Object)">
            <summary>
            Determine if a given object is in the lifetime container.
            </summary>
            <param name="item">
            The item to locate in the lifetime container.
            </param>
            <returns>
            Returns true if the object is contained in the lifetime
            container; returns false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer.Remove(System.Object)">
            <summary>
            Removes an item from the lifetime container. The item is
            not disposed.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ILifetimeContainer.Count">
            <summary>
            Gets the number of references in the lifetime container
            </summary>
            <value>
            The number of references in the lifetime container
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.LifetimeContainer">
            <summary>
            Represents a lifetime container.
            </summary>
            <remarks>
            A lifetime container tracks the lifetime of an object, and implements
            IDisposable. When the container is disposed, any objects in the
            container which implement IDisposable are also disposed.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Add(System.Object)">
            <summary>
            Adds an object to the lifetime container.
            </summary>
            <param name="item">The item to be added to the lifetime container.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Contains(System.Object)">
            <summary>
            Determine if a given object is in the lifetime container.
            </summary>
            <param name="item">
            The item to locate in the lifetime container.
            </param>
            <returns>
            Returns true if the object is contained in the lifetime
            container; returns false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Dispose">
            <summary>
            Releases the resources used by the <see cref="T:Microsoft.Practices.ObjectBuilder2.LifetimeContainer"/>. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Dispose(System.Boolean)">
            <summary>
            Releases the managed resources used by the DbDataReader and optionally releases the unmanaged resources. 
            </summary>
            <param name="disposing">
            true to release managed and unmanaged resources; false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the lifetime container.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the life time container. 
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the lifetime container.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the life time container. 
            </returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Remove(System.Object)">
            <summary>
            Removes an item from the lifetime container. The item is
            not disposed.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.LifetimeContainer.Count">
            <summary>
            Gets the number of references in the lifetime container
            </summary>
            <value>
            The number of references in the lifetime container
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IPolicyList">
            <summary>
            A custom collection over <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.Clear(System.Type,System.Object)">
            <summary>
            Removes an individual policy type for a build key.
            </summary>
            <param name="policyInterface">The type of policy to remove.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.ClearAll">
            <summary>
            Removes all policies from the list.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.ClearDefault(System.Type)">
            <summary>
            Removes a default policy.
            </summary>
            <param name="policyInterface">The type the policy was registered as.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.Get(System.Type,System.Object,System.Boolean,Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Gets an individual policy.
            </summary>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <param name="containingPolicyList">The policy list in the chain that the searched for policy was found in, null if the policy was
            not found.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.GetNoDefault(System.Type,System.Object,System.Boolean,Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Get the non default policy.
            </summary>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies to.</param>
            <param name="localOnly">True if the search should be in the local policy list only; otherwise false to search up the parent chain.</param>
            <param name="containingPolicyList">The policy list in the chain that the searched for policy was found in, null if the policy was
            not found.</param>
            <returns>The policy in the list if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.Set(System.Type,Microsoft.Practices.ObjectBuilder2.IBuilderPolicy,System.Object)">
            <summary>
            Sets an individual policy.
            </summary>
            <param name="policyInterface">The <see cref="T:System.Type"/> of the policy.</param>
            <param name="policy">The policy to be registered.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IPolicyList.SetDefault(System.Type,Microsoft.Practices.ObjectBuilder2.IBuilderPolicy)">
            <summary>
            Sets a default policy. When checking for a policy, if no specific individual policy
            is available, the default will be used.
            </summary>
            <param name="policyInterface">The interface to register the policy under.</param>
            <param name="policy">The default policy to be registered.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.PolicyList">
            <summary>
            A custom collection wrapper over <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.#ctor">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.ObjectBuilder2.PolicyList"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.#ctor(Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Initialize a new instance of a <see cref="T:Microsoft.Practices.ObjectBuilder2.PolicyList"/> class with another policy list.
            </summary>
            <param name="innerPolicyList">An inner policy list to search.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.Clear(System.Type,System.Object)">
            <summary>
            Removes an individual policy type for a build key.
            </summary>
            <param name="policyInterface">The type of policy to remove.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.ClearAll">
            <summary>
            Removes all policies from the list.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.ClearDefault(System.Type)">
            <summary>
            Removes a default policy.
            </summary>
            <param name="policyInterface">The type the policy was registered as.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.Get(System.Type,System.Object,System.Boolean,Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Gets an individual policy.
            </summary>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <param name="containingPolicyList">The policy list in the chain that the searched for policy was found in, null if the policy was
            not found.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.GetNoDefault(System.Type,System.Object,System.Boolean,Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Get the non default policy.
            </summary>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies to.</param>
            <param name="localOnly">True if the search should be in the local policy list only; otherwise false to search up the parent chain.</param>
            <param name="containingPolicyList">The policy list in the chain that the searched for policy was found in, null if the policy was
            not found.</param>
            <returns>The policy in the list if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.Set(System.Type,Microsoft.Practices.ObjectBuilder2.IBuilderPolicy,System.Object)">
            <summary>
            Sets an individual policy.
            </summary>
            <param name="policyInterface">The <see cref="T:System.Type"/> of the policy.</param>
            <param name="policy">The policy to be registered.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyList.SetDefault(System.Type,Microsoft.Practices.ObjectBuilder2.IBuilderPolicy)">
            <summary>
            Sets a default policy. When checking for a policy, if no specific individual policy
            is available, the default will be used.
            </summary>
            <param name="policyInterface">The interface to register the policy under.</param>
            <param name="policy">The default policy to be registered.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.PolicyList.Count">
            <summary>
            Gets the number of items in the locator.
            </summary>
            <value>
            The number of items in the locator.
            </value>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions">
            <summary>
            Extension methods on <see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to provide convenience
            overloads (generic versions, mostly).
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Clear``1(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object)">
            <summary>
            Removes an individual policy type for a build key.
            </summary>
            <typeparam name="TPolicyInterface">The type the policy was registered as.</typeparam>
            <param name="policies"><see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to remove the policy from.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.ClearDefault``1(Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Removes a default policy.
            </summary>
            <typeparam name="TPolicyInterface">The type the policy was registered as.</typeparam>
            <param name="policies"><see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to remove the policy from.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Get``1(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object)">
            <summary>
            Gets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policies"><see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="buildKey">The key the policy applies.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Get``1(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Gets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policies"><see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="containingPolicyList">The policy list that actually contains the returned policy.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Get(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.Object)">
            <summary>
            Gets an individual policy.
            </summary>
            <param name="policies"><see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Get(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.Object,Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Gets an individual policy.
            </summary>
            <param name="policies"><see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="containingPolicyList">The policy list that actually contains the returned policy.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Get``1(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,System.Boolean)">
            <summary>
            Gets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policies"><see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Get``1(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,System.Boolean,Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Gets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policies"><see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <param name="containingPolicyList">The policy list that actually contains the returned policy.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Get(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.Object,System.Boolean)">
            <summary>
            Gets an individual policy.
            </summary>
            <param name="policies"><see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.GetNoDefault``1(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,System.Boolean)">
            <summary>
            Get the non default policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policies"><see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.GetNoDefault``1(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,System.Boolean,Microsoft.Practices.ObjectBuilder2.IPolicyList@)">
            <summary>
            Get the non default policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policies"><see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <param name="containingPolicyList">The policy list that actually contains the returned policy.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.GetNoDefault(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Type,System.Object,System.Boolean)">
            <summary>
            Get the non default policy.
            </summary>
            <param name="policies"><see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to search.</param>
            <param name="policyInterface">The interface the policy is registered under.</param>
            <param name="buildKey">The key the policy applies.</param>
            <param name="localOnly">true if the policy searches local only; otherwise false to seach up the parent chain.</param>
            <returns>The policy in the list, if present; returns null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.Set``1(Microsoft.Practices.ObjectBuilder2.IPolicyList,``0,System.Object)">
            <summary>
            Sets an individual policy.
            </summary>
            <typeparam name="TPolicyInterface">The interface the policy is registered under.</typeparam>
            <param name="policies"><see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to add the policy to.</param>
            <param name="policy">The policy to be registered.</param>
            <param name="buildKey">The key the policy applies.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PolicyListExtensions.SetDefault``1(Microsoft.Practices.ObjectBuilder2.IPolicyList,``0)">
            <summary>
            Sets a default policy. When checking for a policy, if no specific individual policy
            is available, the default will be used.
            </summary>
            <typeparam name="TPolicyInterface">The interface to register the policy under.</typeparam>
            <param name="policies"><see cref="T:Microsoft.Practices.ObjectBuilder2.IPolicyList"/> to add the policy to.</param>
            <param name="policy">The default policy to be registered.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.RecoveryStack">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IRecoveryStack"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.RecoveryStack.Add(Microsoft.Practices.ObjectBuilder2.IRequiresRecovery)">
            <summary>
            Add a new <see cref="T:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery"/> object to this
            list.
            </summary>
            <param name="recovery">Object to add.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.RecoveryStack.ExecuteRecovery">
            <summary>
            Execute the <see cref="M:Microsoft.Practices.ObjectBuilder2.IRequiresRecovery.Recover"/> method
            of everything in the recovery list. Recoveries will execute
            in the opposite order of add - it's a stack.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.RecoveryStack.Count">
            <summary>
            Return the number of recovery objects currently in the stack.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> which will notify an object about
            the completion of a BuildUp operation, or start of a TearDown operation.
            </summary>
            <remarks>
            This strategy checks the object that is passing through the builder chain to see if it
            implements IBuilderAware and if it does, it will call <see cref="M:Microsoft.Practices.ObjectBuilder2.IBuilderAware.OnBuiltUp(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)"/>
            and <see cref="M:Microsoft.Practices.ObjectBuilder2.IBuilderAware.OnTearingDown"/>. This strategy is meant to be used from the
            <see cref="F:Microsoft.Practices.ObjectBuilder2.BuilderStage.PostInitialization"/> stage.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy.PreTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a teardown operation. The
            PreTearDown method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the teardown operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuilderAware">
            <summary>
            Implemented on a class when it wants to receive notifications
            about the build process.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderAware.OnBuiltUp(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Called by the <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy"/> when the object is being built up.
            </summary>
            <param name="buildKey">The key of the object that was just built up.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuilderAware.OnTearingDown">
            <summary>
            Called by the <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderAwareStrategy"/> when the object is being torn down.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuilderStage">
            <summary>
            Enumeration to represent the object builder stages.
            </summary>
            <remarks>
            The order of the values in the enumeration is the order in which the stages are run.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.ObjectBuilder2.BuilderStage.PreCreation">
            <summary>
            Strategies in this stage run before creation. Typical work done in this stage might
            include strategies that use reflection to set policies into the context that other
            strategies would later use.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.ObjectBuilder2.BuilderStage.Creation">
            <summary>
            Strategies in this stage create objects. Typically you will only have a single policy-driven
            creation strategy in this stage.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.ObjectBuilder2.BuilderStage.Initialization">
            <summary>
            Strategies in this stage work on created objects. Typical work done in this stage might
            include setter injection and method calls.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.ObjectBuilder2.BuilderStage.PostInitialization">
            <summary>
            Strategies in this stage work on objects that are already initialized. Typical work done in
            this stage might include looking to see if the object implements some notification interface
            to discover when its initialization stage has been completed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuildKeyMappingPolicy">
            <summary>
            Represents a builder policy for mapping build keys.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuildKeyMappingPolicy">
            <summary>
            Represents a builder policy for mapping build keys.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuildKeyMappingPolicy.Map(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Maps the build key.
            </summary>
            <param name="buildKey">The build key to map.</param>
            <param name="context">Current build context. Used for contextual information
            if writing a more sophisticated mapping. This parameter can be null
            (called when getting container registrations).</param>
            <returns>The new build key.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildKeyMappingPolicy.#ctor(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.BuildKeyMappingPolicy"/> with the new build key.
            </summary>
            <param name="newBuildKey">The new build key.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildKeyMappingPolicy.Map(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Maps the build key.
            </summary>
            <param name="buildKey">The build key to map.</param>
            <param name="context">Current build context. Used for contextual information
            if writing a more sophisticated mapping, unused in this implementation.</param>
            <returns>The new build key.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuildKeyMappingStrategy">
            <summary>
            Represents a strategy for mapping build keys in the build up operation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildKeyMappingStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation.  Looks for the <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuildKeyMappingPolicy"/>
            and if found maps the build key for the current operation.
            </summary>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.GenericTypeBuildKeyMappingPolicy">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuildKeyMappingPolicy"/> that can map
            generic types.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.GenericTypeBuildKeyMappingPolicy.#ctor(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.GenericTypeBuildKeyMappingPolicy"/> instance
            that will map generic types.
            </summary>
            <param name="destinationKey">Build key to map to. This must be or contain an open generic type.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.GenericTypeBuildKeyMappingPolicy.Map(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Maps the build key.
            </summary>
            <param name="buildKey">The build key to map.</param>
            <param name="context">Current build context. Used for contextual information
            if writing a more sophisticated mapping.</param>
            <returns>The new build key.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuildOperation">
            <summary>
            Base class for the current operation stored in the build context.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildOperation.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.BuildOperation"/>.
            </summary>
            <param name="typeBeingConstructed">Type currently being built.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.BuildOperation.TypeBeingConstructed">
            <summary>
             The type that's currently being built.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> that will look for a build plan
            in the current context. If it exists, it invokes it, otherwise
            it creates one and stores it for later, and invokes it.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation.
            </summary>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicy`1">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy"/> that chooses
            constructors based on these criteria: first, pick a constructor marked with the
            <typeparamref name="TInjectionConstructorMarkerAttribute"/> attribute. If there
            isn't one, then choose the constructor with the longest parameter list. If that is ambiguous,
            then throw.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the constructor to choose is ambiguous.</exception>
            <typeparam name="TInjectionConstructorMarkerAttribute">Attribute used to mark the constructor to call.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorSelectorPolicy`1.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="parameter">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.SelectedConstructor">
            <summary>
            Objects of this type are the return value from <see cref="M:Microsoft.Practices.ObjectBuilder2.IConstructorSelectorPolicy.SelectConstructor(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)"/>.
            It encapsulates the desired <see cref="T:System.Reflection.ConstructorInfo"/> with the string keys
            needed to look up the <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> for each
            parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters`1">
            <summary>
            Base class for return values from selector policies that
            return a memberinfo of some sort plus a list of parameter
            keys to look up the parameter resolvers.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters">
            <summary>
            Base class for return of selector policies that need
            to keep track of a set of parameter keys.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters.AddParameterKey(System.String)">
            <summary>
            Add a new parameter key to this object. Keys are assumed
            to be in the order of the parameters to the constructor.
            </summary>
            <param name="newKey">Key for the next parameter to look up.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters.GetParameterKeys">
            <summary>
            The set of keys for the constructor parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters`1.#ctor(`0)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters`1"/>, storing
            the given member info.
            </summary>
            <param name="memberInfo">Member info to store.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.SelectedMemberWithParameters`1.MemberInfo">
            <summary>
            The member info stored.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SelectedConstructor.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.SelectedConstructor"/> instance which
            contains the given constructor.
            </summary>
            <param name="constructor">The constructor to wrap.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.SelectedConstructor.Constructor">
            <summary>
            The constructor this object wraps.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ConstructorArgumentResolveOperation">
            <summary>
            This class records the information about which constructor argument is currently
            being resolved, and is responsible for generating the error string required when
            an error has occurred.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorArgumentResolveOperation.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ConstructorArgumentResolveOperation"/> class.
            </summary>
            <param name="typeBeingConstructed">The type that is being constructed.</param>
            <param name="constructorSignature">A string representing the constructor being called.</param>
            <param name="parameterName">Parameter being resolved.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ConstructorArgumentResolveOperation.ToString">
            <summary>
            Generate the string describing what parameter was being resolved.
            </summary>
            <returns>The description string.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ConstructorArgumentResolveOperation.ConstructorSignature">
            <summary>
            String describing the constructor being set up.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.ConstructorArgumentResolveOperation.ParameterName">
            <summary>
            Parameter that's being resolved.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> that emits IL to call constructors
            as part of creating a build plan.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation.
            </summary>
            <remarks>Existing object is an instance of <see cref="T:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext"/>.</remarks>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.ThrowForNullExistingObject(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to throw an exception if
            a dependency cannot be resolved.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> currently being
            used for the build of this object.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.ThrowForNullExistingObjectWithInvalidConstructor(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.String)">
            <summary>
            A helper method used by the generated IL to throw an exception if
            a dependency cannot be resolved because of an invalid constructor.
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> currently being
            used for the build of this object.</param>
            <param name="signature">The signature of the invalid constructor.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.ThrowForAttemptingToConstructInterface(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to throw an exception if
            no existing object is present, but the user is attempting to build
            an interface (usually due to the lack of a type mapping).
            </summary>
            <param name="context">The <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> currently being
            used for the build of this object.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.SetCurrentOperationToResolvingParameter(System.String,System.String,Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to store the current operation in the build context.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.SetCurrentOperationToInvokingConstructor(System.String,Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to store the current operation in the build context.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.SetPerBuildSingleton(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to set up a PerResolveLifetimeManager lifetime manager
            if the current object is such.
            </summary>
            <param name="context">Current build context.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.InvokingConstructorOperation">
            <summary>
            A class that records that a constructor is about to be call, and is 
            responsible for generating the error string required when
            an error has occurred.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.InvokingConstructorOperation.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.InvokingConstructorOperation"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.InvokingConstructorOperation.ToString">
            <summary>
            Generate the description string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.InvokingConstructorOperation.ConstructorSignature">
            <summary>
            Constructor we're trying to call.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DefaultDynamicBuilderMethodCreatorPolicy">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IDynamicBuilderMethodCreatorPolicy"/> that will
            check for full trust and if we're building a class or an interface. If in full
            trust, attach to the class or module of the interface respectively. If in partial
            trust, attach to the OB2 module instead.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IDynamicBuilderMethodCreatorPolicy">
            <summary>
            This interface defines a policy that manages creation of the dynamic methods
            used by the ObjectBuilder code generation. This way, we can replace the details
            of how the dynamic method is created to handle differences in CLR (like Silverlight
            vs desktop) or security policies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IDynamicBuilderMethodCreatorPolicy.CreateBuilderMethod(System.Type,System.String)">
            <summary>
            Create a builder method for the given type, using the given name.
            </summary>
            <param name="typeToBuild">Type that will be built by the generated method.</param>
            <param name="methodName">Name to give to the method.</param>
            <returns>A <see cref="T:System.Reflection.Emit.DynamicMethod"/> object with the proper signature to use
            as part of a build plan.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DefaultDynamicBuilderMethodCreatorPolicy.CreateBuilderMethod(System.Type,System.String)">
            <summary>
            Create a builder method for the given type, using the given name.
            </summary>
            <param name="typeToBuild">Type that will be built by the generated method.</param>
            <param name="methodName">Name to give to the method.</param>
            <returns>A <see cref="T:System.Reflection.Emit.DynamicMethod"/> object with the proper signature to use
            as part of a build plan.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext">
            <summary>
            This object tracks the current state of the build plan generation,
            accumulates the IL, provides the preamble &amp; postamble for the dynamic
            method, and tracks things like local variables in the generated IL
            so that they can be reused across IL generation strategies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.#ctor(System.Type,Microsoft.Practices.ObjectBuilder2.IDynamicBuilderMethodCreatorPolicy)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext"/> that is initialized
            to handle creation of a dynamic method to build the given type.
            </summary>
            <param name="typeToBuild">Type that we're trying to create a build plan for.</param>
            <param name="builderMethodCreator">An <see cref="T:Microsoft.Practices.ObjectBuilder2.IDynamicBuilderMethodCreatorPolicy"/> object that actually
            creates our <see cref="T:System.Reflection.Emit.DynamicMethod"/> object.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.GetBuildMethod">
            <summary>
            Completes generation of the dynamic method and returns the
            generated dynamic method delegate.
            </summary>
            <returns>The created <see cref="T:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanMethod"/></returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitLoadContext">
            <summary>
            Emit the IL to put the build context on top of the IL stack.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitLoadBuildKey">
            <summary>
            Emit the IL to put the current build key on top of the IL stack.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitLoadExisting">
            <summary>
            Emit the IL to put the current "existing" object on the top of the IL stack.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitStoreExisting">
            <summary>
            Emit the IL to make the top of the IL stack our current "existing" object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitLoadTypeOnStack(System.Type)">
            <summary>
            Emit the IL to load the given <see cref="T:System.Type"/> object onto the top of the IL stack.
            </summary>
            <param name="t">Type to load on the stack.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitResolveDependency(System.Type,System.String)">
            <summary>
            Emit the IL needed to look up an <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> and
            call it to get a value.
            </summary>
            <param name="dependencyType">Type of the dependency to resolve.</param>
            <param name="key">Key to look up the policy by.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitClearCurrentOperation">
            <summary>
            Emit the IL needed to clear the <see cref="P:Microsoft.Practices.ObjectBuilder2.IBuilderContext.CurrentOperation"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.EmitCastOrUnbox(System.Type)">
            <summary>
            Emit the IL needed to either cast the top of the stack to the target type
            or unbox it, if it's a value type.
            </summary>
            <param name="targetType">Type to convert the top of the stack to.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.DoClearCurrentOperation(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to clear the current operation in the build context.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.GetResolver(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type,System.String)">
            <summary>
            Helper method used by generated IL to look up a dependency resolver based on the given key.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of the dependency being resolved.</param>
            <param name="resolverKey">Key the resolver was stored under.</param>
            <returns>The found dependency resolver.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.GetPropertyGetter``2(System.String)">
            <summary>
            A reflection helper method to make it easier to grab a property getter
            <see cref="T:System.Reflection.MethodInfo"/> for the given property.
            </summary>
            <typeparam name="TImplementer">Type that implements the property we want.</typeparam>
            <typeparam name="TProperty">Type of the property.</typeparam>
            <param name="name">Name of the property.</param>
            <returns>The property getter's <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.GetMethodInfo``1(System.String,System.Type[])">
            <summary>
            A reflection helper method that makes it easier to grab a <see cref="T:System.Reflection.MethodInfo"/>
            for a method.
            </summary>
            <typeparam name="TImplementer">Type that implements the method we want.</typeparam>
            <param name="name">Name of the method.</param>
            <param name="argumentTypes">Types of arguments to the method.</param>
            <returns>The method's <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.IL">
            <summary>
            The underlying <see cref="T:System.Reflection.Emit.ILGenerator"/> that can be used to
            emit IL into the generated dynamic method.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.TypeToBuild">
            <summary>
            The type we're currently creating the method to build.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanMethod">
            <summary>
            A delegate type that defines the signature of the
            dynamic method created by the build plans.
            </summary>
            <param name="context"><see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderContext"/> used to build up the object.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuildPlanPolicy"/> that runs the
            given delegate to execute the plan.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuildPlanPolicy">
            <summary>
            A build plan is an object that, when invoked, will create a new object
            or fill in a given existing one. It encapsulates all the information
            gathered by the strategies to construct a particular object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuildPlanPolicy.BuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Creates an instance of this build plan's type, or fills
            in the existing type if passed in.
            </summary>
            <param name="context">Context used to build up the object.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlanCreatorPolicy">
            <summary>
            An <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuildPlanCreatorPolicy"/> implementation
            that constructs a build plan via dynamic IL emission.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IBuildPlanCreatorPolicy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderPolicy"/> that can create and return an <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuildPlanPolicy"/>
            for the given build key.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IBuildPlanCreatorPolicy.CreatePlan(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Create a build plan using the given context and build key.
            </summary>
            <param name="context">Current build context.</param>
            <param name="buildKey">Current build key.</param>
            <returns>The build plan.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlanCreatorPolicy.#ctor(Microsoft.Practices.ObjectBuilder2.IStagedStrategyChain)">
            <summary>
            Construct a <see cref="T:Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlanCreatorPolicy"/> that
            uses the given strategy chain to construct the build plan.
            </summary>
            <param name="strategies">The strategy chain.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlanCreatorPolicy.CreatePlan(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Construct a build plan.
            </summary>
            <param name="context">The current build context.</param>
            <param name="buildKey">The current build key.</param>
            <returns>The created build plan.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DynamicMethodCallStrategy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> that generates IL to call
            chosen methods (as specified by the current <see cref="T:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy"/>)
            as part of object build up.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodCallStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodCallStrategy.SetCurrentOperationToResolvingParameter(System.String,System.String,Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to store the current operation in the build context.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodCallStrategy.SetCurrentOperationToInvokingMethod(System.String,Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to store the current operation in the build context.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.InvokingMethodOperation">
            <summary>
            A class that records that a constructor is about to be call, and is 
            responsible for generating the error string required when
            an error has occurred.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.InvokingMethodOperation.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.InvokingMethodOperation"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.InvokingMethodOperation.ToString">
            <summary>
            Generate the description string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.InvokingMethodOperation.MethodSignature">
            <summary>
            Method we're trying to call.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.MethodArgumentResolveOperation">
            <summary>
            This class records the information about which constructor argument is currently
            being resolved, and is responsible for generating the error string required when
            an error has occurred.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodArgumentResolveOperation.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.ConstructorArgumentResolveOperation"/> class.
            </summary>
            <param name="typeBeingConstructed">The type that is being constructed.</param>
            <param name="methodSignature">A string representing the method being called.</param>
            <param name="parameterName">Parameter being resolved.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodArgumentResolveOperation.ToString">
            <summary>
            Generate the string describing what parameter was being resolved.
            </summary>
            <returns>The description string.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.MethodArgumentResolveOperation.MethodSignature">
            <summary>
            String describing the method being set up.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.MethodArgumentResolveOperation.ParameterName">
            <summary>
            Parameter that's being resolved.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DynamicMethodPropertySetterStrategy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> that generates IL to resolve properties
            on an object being built.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodPropertySetterStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation.
            </summary>
            <param name="context">The context for the operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodPropertySetterStrategy.SetCurrentOperationToResolvingPropertyValue(System.String,Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to store the current operation in the build context.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DynamicMethodPropertySetterStrategy.SetCurrentOperationToSettingProperty(System.String,Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            A helper method used by the generated IL to store the current operation in the build context.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.PropertyOperation">
            <summary>
            A base class that holds the information shared by all operations
            performed by the container while setting properties.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertyOperation.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertyOperation.ToString">
            <summary>
            Generate the description of this operation.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertyOperation.GetDescriptionFormat">
            <summary>
            Get a format string used to create the description. Called by
            the base <see cref="M:Microsoft.Practices.ObjectBuilder2.PropertyOperation.ToString"/> method.
            </summary>
            <returns>The format string.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.PropertyOperation.PropertyName">
            <summary>
            The property value currently being resolved.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.ResolvingPropertyValueOperation">
            <summary>
            This class records the information about which property value is currently
            being resolved, and is responsible for generating the error string required when
            an error has occurred.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ResolvingPropertyValueOperation.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.ResolvingPropertyValueOperation.GetDescriptionFormat">
            <summary>
            Get a format string used to create the description. Called by
            the base <see cref="M:Microsoft.Practices.ObjectBuilder2.PropertyOperation.ToString"/> method.
            </summary>
            <returns>The format string.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.SettingPropertyOperation">
            <summary>
            This class records the information about which property value is currently
            being set, and is responsible for generating the error string required when
            an error has occurred.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SettingPropertyOperation.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.SettingPropertyOperation"/> class.
            </summary>
            <param name="typeBeingConstructed">Type property is on.</param>
            <param name="propertyName">Name of property being set.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SettingPropertyOperation.GetDescriptionFormat">
            <summary>
            Get a format string used to create the description. Called by
            the base <see cref="M:Microsoft.Practices.ObjectBuilder2.PropertyOperation.ToString"/> method.
            </summary>
            <returns>The format string.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DeferredResolveBuildPlanPolicy">
            <summary>
            Build plan for <see cref="T:System.Func`1"/> that will
            return a func that will resolve the requested type
            through this container later.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.FactoryDelegateBuildPlanPolicy.BuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Creates an instance of this build plan's type, or fills
            in the existing type if passed in.
            </summary>
            <param name="context">Context used to build up the object.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicy`1">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy"/> that selects
            methods by looking for the given <typeparamref name="TMarkerAttribute"/>
            attribute on those methods.
            </summary>
            <typeparam name="TMarkerAttribute">Type of attribute used to mark methods
            to inject.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.MethodSelectorPolicy`1.CreateResolver(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance for the given
            <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="parameter">Parameter to create the resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.SelectedMethod">
            <summary>
            Objects of this type are the return value from <see cref="M:Microsoft.Practices.ObjectBuilder2.IMethodSelectorPolicy.SelectMethods(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)"/>.
            It encapsulates the desired <see cref="T:System.Reflection.MethodInfo"/> with the string keys
            needed to look up the <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> for each
            parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SelectedMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.SelectedMethod"/> instance which
            contains the given method.
            </summary>
            <param name="method">The method</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.SelectedMethod.Method">
            <summary>
            The constructor this object wraps.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.OverriddenBuildPlanMarkerPolicy.BuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Creates an instance of this build plan's type, or fills
            in the existing type if passed in.
            </summary>
            <param name="context">Context used to build up the object.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.PropertySelectorPolicy`1">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy"/> that looks
            for properties marked with the <typeparamref name="TResolutionAttribute"/>
            attribute that are also settable and not indexers.
            </summary>
            <typeparam name="TResolutionAttribute"></typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.PropertySelectorPolicy`1.CreateResolver(System.Reflection.PropertyInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> for the given
            property.
            </summary>
            <param name="property">Property to create resolver for.</param>
            <returns>The resolver object.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.SelectedProperty">
            <summary>
            Objects of this type are returned from
            <see cref="M:Microsoft.Practices.ObjectBuilder2.IPropertySelectorPolicy.SelectProperties(Microsoft.Practices.ObjectBuilder2.IBuilderContext,Microsoft.Practices.ObjectBuilder2.IPolicyList)"/>.
            This class combines the <see cref="T:System.Reflection.PropertyInfo"/> about
            the property with the string key used to look up the resolver
            for this property's value.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.SelectedProperty.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.ObjectBuilder2.SelectedProperty"/>
            with the given <see cref="T:System.Reflection.PropertyInfo"/> and key.
            </summary>
            <param name="property">The property.</param>
            <param name="key">Key to use to look up the resolver.</param>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.SelectedProperty.Property">
            <summary>
            PropertyInfo for this property.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.SelectedProperty.Key">
            <summary>
            Key to look up this property's resolver.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy">
            <summary>
            A builder policy that lets you keep track of the current
            resolvers and will remove them from the given policy set.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy.AddResolverKey(System.Object)">
            <summary>
            Add a new resolver to track by key.
            </summary>
            <param name="key">Key that was used to add the resolver to the policy set.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy.RemoveResolvers(Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Remove the currently tracked resolvers from the given policy list.
            </summary>
            <param name="policies">Policy list to remove the resolvers from.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.AddResolverKey(System.Object)">
            <summary>
            Add a new resolver to track by key.
            </summary>
            <param name="key">Key that was used to add the resolver to the policy set.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.RemoveResolvers(Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Remove the currently tracked resolvers from the given policy list.
            </summary>
            <param name="policies">Policy list to remove the resolvers from.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.GetTracker(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object)">
            <summary>
            Get an instance that implements <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverTrackerPolicy"/>,
            either the current one in the policy set or creating a new one if it doesn't
            exist.
            </summary>
            <param name="policies">Policy list to look up from.</param>
            <param name="buildKey">Build key to track.</param>
            <returns>The resolver tracker.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.TrackKey(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object,System.Object)">
            <summary>
            Add a key to be tracked to the current tracker.
            </summary>
            <param name="policies">Policy list containing the resolvers and trackers.</param>
            <param name="buildKey">Build key for the resolvers being tracked.</param>
            <param name="resolverKey">Key for the resolver.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.DependencyResolverTrackerPolicy.RemoveResolvers(Microsoft.Practices.ObjectBuilder2.IPolicyList,System.Object)">
            <summary>
            Remove the resolvers for the given build key.
            </summary>
            <param name="policies">Policy list containing the build key.</param>
            <param name="buildKey">Build key.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.FixedTypeResolverPolicy">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that
            calls back into the build chain to build up the dependency, passing
            a type given at compile time as its build key.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.FixedTypeResolverPolicy.#ctor(System.Type)">
            <summary>
            Create a new instance storing the given type.
            </summary>
            <param name="typeToBuild">Type to resolve.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.FixedTypeResolverPolicy.Resolve(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Get the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>The value for the dependency.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IStagedStrategyChain">
            <summary>
            This interface defines a standard method to convert any 
            <see cref="T:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> regardless
            of the stage enum into a regular, flat strategy chain.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IStagedStrategyChain.MakeStrategyChain">
            <summary>
            Convert this <see cref="T:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> into
            a flat <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/>.
            </summary>
            <returns>The flattened <see cref="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.IStrategyChain">
            <summary>
            Represents a chain of responsibility for builder strategies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IStrategyChain.Reverse">
            <summary>
            Reverse the order of the strategy chain.
            </summary>
            <returns>The reversed strategy chain.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IStrategyChain.ExecuteBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Execute this strategy chain against the given context,
            calling the Buildup methods on the strategies.
            </summary>
            <param name="context">Context for the build process.</param>
            <returns>The build up object</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.IStrategyChain.ExecuteTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Execute this strategy chain against the given context,
            calling the TearDown methods on the strategies.
            </summary>
            <param name="context">Context for the teardown process.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.LifetimeStrategy">
            <summary>
            An <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/> implementation that uses
            a <see cref="T:Microsoft.Practices.ObjectBuilder2.ILifetimePolicy"/> to figure out if an object
            has already been created and to update or remove that
            object from some backing store.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PreBuildUp method is called when the chain is being executed in the
            forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.LifetimeStrategy.PostBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
            PostBuildUp method is called when the chain has finished the PreBuildUp
            phase and executes in reverse order from the PreBuildUp calls.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1">
            <summary>
            Represents a chain of responsibility for builder strategies partitioned by stages.
            </summary>
            <typeparam name="TStageEnum">The stage enumeration to partition the strategies.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.#ctor(Microsoft.Practices.ObjectBuilder2.StagedStrategyChain{`0})">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1"/> class with an inner strategy chain to use when building.
            </summary>
            <param name="innerChain">The inner strategy chain to use first when finding strategies in the build operation.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.Add(Microsoft.Practices.ObjectBuilder2.IBuilderStrategy,`0)">
            <summary>
            Adds a strategy to the chain at a particular stage.
            </summary>
            <param name="strategy">The strategy to add to the chain.</param>
            <param name="stage">The stage to add the strategy.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.AddNew``1(`0)">
            <summary>
            Add a new strategy for the <paramref name="stage"/>.
            </summary>
            <typeparam name="TStrategy">The <see cref="T:System.Type"/> of <see cref="T:Microsoft.Practices.ObjectBuilder2.IBuilderStrategy"/></typeparam>
            <param name="stage">The stage to add the strategy.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.Clear">
            <summary>
            Clear the current strategy chain list.
            </summary>
            <remarks>
            This will not clear the inner strategy chain if this instane was created with one.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StagedStrategyChain`1.MakeStrategyChain">
            <summary>
            Makes a strategy chain based on this instance.
            </summary>
            <returns>A new <see cref="T:Microsoft.Practices.ObjectBuilder2.StrategyChain"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.StrategyChain">
            <summary>
            Represents a chain of responsibility for builder strategies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.#ctor">
            <summary>
            Initialzie a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.StrategyChain"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initialzie a new instance of the <see cref="T:Microsoft.Practices.ObjectBuilder2.StrategyChain"/> class with a colleciton of strategies.
            </summary>
            <param name="strategies">A collection of strategies to initialize the chain.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.Add(Microsoft.Practices.ObjectBuilder2.IBuilderStrategy)">
            <summary>
            Adds a strategy to the chain.
            </summary>
            <param name="strategy">The strategy to add to the chain.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds strategies to the chain.
            </summary>
            <param name="strategyEnumerable">The strategies to add to the chain.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.Reverse">
            <summary>
            Reverse the order of the strategy chain.
            </summary>
            <returns>The reversed strategy chain.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Execute this strategy chain against the given context to build up.
            </summary>
            <param name="context">Context for the build processes.</param>
            <returns>The build up object</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteTearDown(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Execute this strategy chain against the given context,
            calling the TearDown methods on the strategies.
            </summary>
            <param name="context">Context for the teardown process.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.System#Collections#Generic#IEnumerable{Microsoft#Practices#ObjectBuilder2#IBuilderStrategy}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.StrategyChain.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.EnumerableExtensions">
            <summary>
            The almost inevitable collection of extra helper methods on
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> to augment the rich set of what
            Linq already gives us.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Execute the provided <paramref name="action"/> on every item in <paramref name="sequence"/>.
            </summary>
            <typeparam name="TItem">Type of the items stored in <paramref name="sequence"/></typeparam>
            <param name="sequence">Sequence of items to process.</param>
            <param name="action">Code to run over each item.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.EnumerableExtensions.JoinStrings``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            Create a single string from a sequenc of items, separated by the provided <paramref name="separator"/>,
            and with the conversion to string done by the given <paramref name="converter"/>.
            </summary>
            <remarks>This method does basically the same thing as <see cref="M:System.String.Join(System.String,System.String[])"/>,
            but will work on any sequence of items, not just arrays.</remarks>
            <typeparam name="TItem">Type of items in the sequence.</typeparam>
            <param name="sequence">Sequence of items to convert.</param>
            <param name="separator">Separator to place between the items in the string.</param>
            <param name="converter">The conversion function to change TItem -&gt; string.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.EnumerableExtensions.JoinStrings``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Create a single string from a sequenc of items, separated by the provided <paramref name="separator"/>,
            and with the conversion to string done by the item's <see cref="M:System.Object.ToString"/> method.
            </summary>
            <remarks>This method does basically the same thing as <see cref="M:System.String.Join(System.String,System.String[])"/>,
            but will work on any sequence of items, not just arrays.</remarks>
            <typeparam name="TItem">Type of items in the sequence.</typeparam>
            <param name="sequence">Sequence of items to convert.</param>
            <param name="separator">Separator to place between the items in the string.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey">
            <summary>
            Build key used to combine a type object with a string name. Used by
            ObjectBuilder to indicate exactly what is being built.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.#ctor(System.Type,System.String)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance with the given
            type and name.
            </summary>
            <param name="type"><see cref="P:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Type"/> to build.</param>
            <param name="name">Key to use to look up type mappings and singletons.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance for the default
            buildup of the given type.
            </summary>
            <param name="type"><see cref="P:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Type"/> to build.</param>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Make``1">
            <summary>
            This helper method creates a new <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance. It is
            initialized for the default key for the given type.
            </summary>
            <typeparam name="T">Type to build.</typeparam>
            <returns>A new <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Make``1(System.String)">
            <summary>
            This helper method creates a new <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance for
            the given type and key.
            </summary>
            <typeparam name="T">Type to build</typeparam>
            <param name="name">Key to use to look up type mappings and singletons.</param>
            <returns>A new <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instance initialized with the given type and name.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Equals(System.Object)">
            <summary>
            Compare two <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances.
            </summary>
            <remarks>Two <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances compare equal
            if they contain the same name and the same type. Also, comparing
            against a different type will also return false.</remarks>
            <param name="obj">Object to compare to.</param>
            <returns>True if the two keys are equal, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.GetHashCode">
            <summary>
            Calculate a hash code for this instance.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.op_Equality(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Compare two <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances for equality.
            </summary>
            <remarks>Two <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances compare equal
            if they contain the same name and the same type.</remarks>
            <param name="left">First of the two keys to compare.</param>
            <param name="right">Second of the two keys to compare.</param>
            <returns>True if the values of the keys are the same, else false.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.op_Inequality(Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey,Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey)">
            <summary>
            Compare two <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances for inequality.
            </summary>
            <remarks>Two <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> instances compare equal
            if they contain the same name and the same type. If either field differs
            the keys are not equal.</remarks>
            <param name="left">First of the two keys to compare.</param>
            <param name="right">Second of the two keys to compare.</param>
            <returns>false if the values of the keys are the same, else true.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.ToString">
            <summary>
            Formats the build key as a string (primarily for debugging).
            </summary>
            <returns>A readable string representation of the build key.</returns>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Type">
            <summary>
            Return the <see cref="P:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Type"/> stored in this build key.
            </summary>
            <value>The type to build.</value>
        </member>
        <member name="P:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey.Name">
            <summary>
            Returns the name stored in this build key.
            </summary>
            <remarks>The name to use when building.</remarks>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey`1">
            <summary>
            A generic version of <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey"/> so that
            you can new up a key using generic syntax.
            </summary>
            <typeparam name="T">Type for the key.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey`1.#ctor">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey`1"/> that
            specifies the given type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey`1.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.ObjectBuilder2.NamedTypeBuildKey`1"/> that
            specifies the given type and name.
            </summary>
            <param name="name">Name for the key.</param>
        </member>
        <member name="T:Microsoft.Practices.ObjectBuilder2.Sequence">
            <summary>
            A series of helper methods to deal with sequences -
            objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.Sequence.Collect``1(``0[])">
            <summary>
            A function that turns an arbitrary parameter list into an
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">Type of arguments.</typeparam>
            <param name="arguments">The items to put into the collection.</param>
            <returns>An array that contains the values of the <paramref name="arguments"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.ObjectBuilder2.Sequence.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Given two sequences, return a new sequence containing the corresponding values
            from each one.
            </summary>
            <typeparam name="TFirstSequenceElement">Type of first sequence.</typeparam>
            <typeparam name="TSecondSequenceElement">Type of second sequence.</typeparam>
            <param name="sequence1">First sequence of items.</param>
            <param name="sequence2">Second sequence of items.</param>
            <returns>New sequence of pairs. This sequence ends when the shorter of sequence1 and sequence2 does.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.ParameterOverride">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/> class that lets you
            override a named parameter passed to a constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ParameterOverride.#ctor(System.String,System.Object)">
            <summary>
            Construct a new <see cref="T:Microsoft.Practices.Unity.ParameterOverride"/> object that will
            override the given named constructor parameter, and pass the given
            value.
            </summary>
            <param name="parameterName">Name of the constructor parameter.</param>
            <param name="parameterValue">Value to pass for the constructor.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ParameterOverride.GetResolver(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
            for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of dependency desired.</param>
            <returns>a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.ParameterOverrides">
            <summary>
            A convenience form of <see cref="T:Microsoft.Practices.Unity.ParameterOverride"/> that lets you
            specify multiple parameter overrides in one shot rather than having
            to construct multiple objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ParameterOverrides.MakeOverride(System.String,System.Object)">
            <summary>
            When implemented in derived classes, this method is called from the <see cref="M:Microsoft.Practices.Unity.OverrideCollection`3.Add(`1,`2)"/>
            method to create the actual <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/> objects.
            </summary>
            <param name="key">Key value to create the resolver.</param>
            <param name="value">Value to store in the resolver.</param>
            <returns>The created <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.PropertyOverride">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/> that lets you override
            the value for a specified property.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.PropertyOverride.#ctor(System.String,System.Object)">
            <summary>
             Create an instance of <see cref="T:Microsoft.Practices.Unity.PropertyOverride"/>.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="propertyValue">Value to use for the property.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.PropertyOverride.GetResolver(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
            for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of dependency desired.</param>
            <returns>a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.PropertyOverrides">
            <summary>
            A convenience form of <see cref="T:Microsoft.Practices.Unity.PropertyOverride"/> that lets you
            specify multiple property overrides in one shot rather than having
            to construct multiple objects.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.PropertyOverrides.MakeOverride(System.String,System.Object)">
            <summary>
            When implemented in derived classes, this method is called from the <see cref="M:Microsoft.Practices.Unity.OverrideCollection`3.Add(`1,`2)"/>
            method to create the actual <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/> objects.
            </summary>
            <param name="key">Key value to create the resolver.</param>
            <param name="value">Value to store in the resolver.</param>
            <returns>The created <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.ResolutionFailedException">
            <summary>
            The exception thrown by the Unity container when
            an attempt to resolve a dependency fails.
            </summary>
            <summary>
            The exception thrown by the Unity container when
            an attempt to resolve a dependency fails.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolutionFailedException.#ctor(System.Type,System.String,System.Exception,Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.ResolutionFailedException"/> that records
            the exception for the given type and name.
            </summary>
            <param name="typeRequested">Type requested from the container.</param>
            <param name="nameRequested">Name requested from the container.</param>
            <param name="innerException">The actual exception that caused the failure of the build.</param>
            <param name="context">The build context representing the failed operation.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolutionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor to create a <see cref="T:Microsoft.Practices.Unity.ResolutionFailedException"/> from serialized state.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.ResolutionFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize this object into the given context.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.ResolutionFailedException.TypeRequested">
            <summary>
            The type that was being requested from the container at the time of failure.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.ResolutionFailedException.NameRequested">
            <summary>
            The name that was being requested from the container at the time of failure.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.AmbiguousInjectionConstructor">
            <summary>
              查找类似 The type {0} has multiple constructors of length {1}. Unable to disambiguate. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.ArgumentMustNotBeEmpty">
            <summary>
              查找类似 The provided string argument must not be empty. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.BuildFailedException">
            <summary>
              查找类似 The current build operation (build key {2}) failed: {3} (Strategy type {0}, index {1}) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.CannotConstructInterface">
            <summary>
              查找类似 The current type, {0}, is an interface and cannot be constructed. Are you missing a type mapping? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.CannotExtractTypeFromBuildKey">
            <summary>
              查找类似 Cannot extract type from build key {0}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.CannotInjectGenericMethod">
            <summary>
              查找类似 The method {0}.{1}({2}) is an open generic method. Open generic methods cannot be injected. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.CannotInjectIndexer">
            <summary>
              查找类似 The property {0} on type {1} is an indexer. Indexed properties cannot be injected. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.CannotInjectMethodWithOutParam">
            <summary>
              查找类似 The method {1} on type {0} has an out parameter. Injection cannot be performed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.CannotInjectMethodWithOutParams">
            <summary>
              查找类似 The method {0}.{1}({2}) has at least one out parameter. Methods with out parameters cannot be injected. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.CannotInjectMethodWithRefParams">
            <summary>
              查找类似 The method {0}.{1}({2}) has at least one ref parameter.Methods with ref parameters cannot be injected. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.CannotInjectOpenGenericMethod">
            <summary>
              查找类似 The method {1} on type {0} is marked for injection, but it is an open generic method. Injection cannot be performed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.CannotInjectStaticMethod">
            <summary>
              查找类似 The method {0}.{1}({2}) is static. Static methods cannot be injected. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.CannotResolveOpenGenericType">
            <summary>
              查找类似 The type {0} is an open generic type. An open generic type cannot be resolved. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.ConstructorArgumentResolveOperation">
            <summary>
              查找类似 Resolving parameter &quot;{0}&quot; of constructor {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.ConstructorParameterResolutionFailed">
            <summary>
              查找类似 The parameter {0} could not be resolved when attempting to call constructor {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.ExceptionNullParameterValue">
            <summary>
              查找类似 Parameter type inference does not work for null values. Indicate the parameter type explicitly using a properly configured instance of the InjectionParameter or InjectionParameter&lt;T&gt; classes. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.InvokingConstructorOperation">
            <summary>
              查找类似 Calling constructor {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.InvokingMethodOperation">
            <summary>
              查找类似 Calling method {0}.{1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.KeyAlreadyPresent">
            <summary>
              查找类似 An item with the given key is already present in the dictionary. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.LifetimeManagerInUse">
            <summary>
              查找类似 The lifetime manager is already registered. Lifetime managers cannot be reused, please create a new one. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.MarkerBuildPlanInvoked">
            <summary>
              查找类似 The override marker build plan policy has been invoked. This should never happen, looks like a bug in the container. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.MethodArgumentResolveOperation">
            <summary>
              查找类似 Resolving parameter &quot;{0}&quot; of method {1}.{2} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.MethodParameterResolutionFailed">
            <summary>
              查找类似 The value for parameter &quot;{1}&quot; of method {0} could not be resolved.  的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.MissingDependency">
            <summary>
              查找类似 Could not resolve dependency for build key {0}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.MultipleInjectionConstructors">
            <summary>
              查找类似 The type {0} has multiple constructors marked with the InjectionConstructor attribute. Unable to disambiguate. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.MustHaveOpenGenericType">
            <summary>
              查找类似 The supplied type {0} must be an open generic type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.MustHaveSameNumberOfGenericArguments">
            <summary>
              查找类似 The supplied type {0} does not have the same number of generic arguments as the target type {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.NoConstructorFound">
            <summary>
              查找类似 The type {0} does not have an accessible constructor. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.NoMatchingGenericArgument">
            <summary>
              查找类似 The type {0} does not have a generic argument named &quot;{1}&quot; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.NoOperationExceptionReason">
            <summary>
              查找类似 while resolving 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.NoSuchConstructor">
            <summary>
              查找类似 The type {0} does not have a constructor that takes the parameters ({1}). 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.NoSuchMethod">
            <summary>
              查找类似 The type {0} does not have a public method named {1} that takes the parameters ({2}). 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.NoSuchProperty">
            <summary>
              查找类似 The type {0} does not contain an instance property named {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.NotAGenericType">
            <summary>
              查找类似 The type {0} is not a generic type, and you are attempting to inject a generic parameter named &quot;{1}&quot;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.NotAnArrayTypeWithRankOne">
            <summary>
              查找类似 The type {0} is not an array type with rank 1, and you are attempting to use a [DependencyArray] attribute on a parameter or property with this type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.OptionalDependenciesMustBeReferenceTypes">
            <summary>
              查找类似 Optional dependencies must be reference types. The type {0} is a value type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.PropertyNotSettable">
            <summary>
              查找类似 The property {0} on type {1} is not settable. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.PropertyTypeMismatch">
            <summary>
              查找类似 The property {0} on type {1} is of type {2}, and cannot be injected with a value of type {3}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.PropertyValueResolutionFailed">
            <summary>
              查找类似 The value for the property &quot;{0}&quot; could not be resolved. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.ProvidedStringArgMustNotBeEmpty">
            <summary>
              查找类似 The provided string argument must not be empty. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.ResolutionFailed">
             <summary>
               查找类似 Resolution of the dependency failed, type = &quot;{0}&quot;, name = &quot;{1}&quot;.
            Exception occurred while: {2}.
            Exception is: {3} - {4}
            -----------------------------------------------
            At the time of the exception, the container was:
             的本地化字符串。
             </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.ResolutionTraceDetail">
            <summary>
              查找类似 Resolving {0},{1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.ResolutionWithMappingTraceDetail">
            <summary>
              查找类似 Resolving {0},{1} (mapped from {2}, {3}) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.ResolvingPropertyValueOperation">
            <summary>
              查找类似 Resolving value for property {0}.{1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.SelectedConstructorHasRefParameters">
            <summary>
              查找类似 The constructor {1} selected for type {0} has ref or out parameters. Such parameters are not supported for constructor injection. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.SettingPropertyOperation">
            <summary>
              查找类似 Setting value for property {0}.{1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.TypeIsNotConstructable">
            <summary>
              查找类似 The type {0} cannot be constructed. You must configure the container to supply this value. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.TypesAreNotAssignable">
            <summary>
              查找类似 The type {1} cannot be assigned to variables of type {0}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Properties.Resources.UnknownType">
            <summary>
              查找类似 &lt;unknown&gt; 的本地化字符串。
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.StaticFactory.IStaticFactoryConfiguration">
            <summary>
            Interface defining the configuration interface exposed by the
            Static Factory extension.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.StaticFactory.IStaticFactoryConfiguration.RegisterFactory``1(System.Func{Microsoft.Practices.Unity.IUnityContainer,System.Object})">
            <summary>
            Register the given factory delegate to be called when the container is
            asked to resolve <typeparamref name="TTypeToBuild"/>.
            </summary>
            <typeparam name="TTypeToBuild">Type that will be requested from the container.</typeparam>
            <param name="factoryMethod">Delegate to invoke to create the instance.</param>
            <returns>The container extension object this method was invoked on.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.StaticFactory.IStaticFactoryConfiguration.RegisterFactory``1(System.String,System.Func{Microsoft.Practices.Unity.IUnityContainer,System.Object})">
            <summary>
            Register the given factory delegate to be called when the container is
            asked to resolve <typeparamref name="TTypeToBuild"/> and <paramref name="name"/>.
            </summary>
            <typeparam name="TTypeToBuild">Type that will be requested from the container.</typeparam>
            <param name="name">The name that will be used when requesting to resolve this type.</param>
            <param name="factoryMethod">Delegate to invoke to create the instance.</param>
            <returns>The container extension object this method was invoked on.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.StaticFactory.StaticFactoryExtension">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.UnityContainerExtension"/> that lets you register a
            delegate with the container to create an object, rather than calling
            the object's constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.StaticFactory.StaticFactoryExtension.Initialize">
            <summary>
            Initialize this extension. This particular extension requires no
            initialization work.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.StaticFactory.StaticFactoryExtension.RegisterFactory``1(System.String,System.Func{Microsoft.Practices.Unity.IUnityContainer,System.Object})">
            <summary>
            Register the given factory delegate to be called when the container is
            asked to resolve <typeparamref name="TTypeToBuild"/> and <paramref name="name"/>.
            </summary>
            <typeparam name="TTypeToBuild">Type that will be requested from the container.</typeparam>
            <param name="name">The name that will be used when requesting to resolve this type.</param>
            <param name="factoryMethod">Delegate to invoke to create the instance.</param>
            <returns>The container extension object this method was invoked on.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.StaticFactory.StaticFactoryExtension.RegisterFactory``1(System.Func{Microsoft.Practices.Unity.IUnityContainer,System.Object})">
            <summary>
            Register the given factory delegate to be called when the container is
            asked to resolve <typeparamref name="TTypeToBuild"/>.
            </summary>
            <typeparam name="TTypeToBuild">Type that will be requested from the container.</typeparam>
            <param name="factoryMethod">Delegate to invoke to create the instance.</param>
            <returns>The container extension object this method was invoked on.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.TypeBasedOverride">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/> that
            acts as a decorator over another <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/>.
            This checks to see if the current type being built is the
            right one before checking the inner <see cref="T:Microsoft.Practices.Unity.ResolverOverride"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.TypeBasedOverride.#ctor(System.Type,Microsoft.Practices.Unity.ResolverOverride)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.TypeBasedOverride"/>
            </summary>
            <param name="targetType">Type to check for.</param>
            <param name="innerOverride">Inner override to check after type matches.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.TypeBasedOverride.GetResolver(Microsoft.Practices.ObjectBuilder2.IBuilderContext,System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that can be used to give a value
            for the given desired dependency.
            </summary>
            <param name="context">Current build context.</param>
            <param name="dependencyType">Type of dependency desired.</param>
            <returns>a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object if this override applies, null if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.TypeBasedOverride`1">
            <summary>
            A convenience version of <see cref="T:Microsoft.Practices.Unity.TypeBasedOverride"/> that lets you
            specify the type to construct via generics syntax.
            </summary>
            <typeparam name="T">Type to check for.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Unity.TypeBasedOverride`1.#ctor(Microsoft.Practices.Unity.ResolverOverride)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.Unity.TypeBasedOverride`1"/>.
            </summary>
            <param name="innerOverride">Inner override to check after type matches.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.UnityContainer">
            <summary>
            A simple, extensible dependency injection container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.#ctor">
            <summary>
            Create a default <see cref="T:Microsoft.Practices.Unity.UnityContainer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.#ctor(Microsoft.Practices.Unity.UnityContainer)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> with the given parent container.
            </summary>
            <param name="parent">The parent <see cref="T:Microsoft.Practices.Unity.UnityContainer"/>. The current object
            will apply its own settings first, and then check the parent for additional ones.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.RegisterType(System.Type,System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            RegisterType a type mapping with the container, where the created instances will use
            the given <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="from"><see cref="T:System.Type"/> that will be requested.</param>
            <param name="to"><see cref="T:System.Type"/> that will actually be returned.</param>
            <param name="name">Name to use for registration, null if a default registration.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.RegisterInstance(System.Type,System.String,System.Object,Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            RegisterType an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            </remarks>
            <param name="t">Type of instance to register (may be an implemented interface instead of the full type).</param>
            <param name="instance">Object to returned.</param>
            <param name="name">Name for registration.</param>
            <param name="lifetime">
            <para>If true, the container will take over the lifetime of the instance,
            calling Dispose on it (if it's <see cref="T:System.IDisposable"/>) when the container is Disposed.</para>
            <para>
             If false, container will not maintain a strong reference to <paramref name="instance"/>. User is reponsible
            for disposing instance, and for keeping the instance from being garbage collected.</para></param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.Resolve(System.Type,System.String,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Get an instance of the requested type with the given name from the container.
            </summary>
            <param name="t"><see cref="T:System.Type"/> of object to get from the container.</param>
            <param name="name">Name of the object to retrieve.</param>
            <param name="resolverOverrides">Any overrides for the resolve call.</param>
            <returns>The retrieved object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.ResolveAll(System.Type,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Return instances of all registered types requested.
            </summary>
            <remarks>
            <para>
            This method is useful if you've registered multiple types with the same
            <see cref="T:System.Type"/> but different names.
            </para>
            <para>
            Be aware that this method does NOT return an instance for the default (unnamed) registration.
            </para>
            </remarks>
            <param name="t">The type requested.</param>
            <param name="resolverOverrides">Any overrides for the resolve calls.</param>
            <returns>Set of objects of type <paramref name="t"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.BuildUp(System.Type,System.Object,System.String,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Run an existing object through the container and perform injection on it.
            </summary>
            <remarks>
            <para>
            This method is useful when you don't control the construction of an
            instance (ASP.NET pages or objects created via XAML, for instance)
            but you still want properties and other injection performed.
            </para></remarks>
            <param name="t"><see cref="T:System.Type"/> of object to perform injection on.</param>
            <param name="existing">Instance to build up.</param>
            <param name="name">name to use when looking up the typemappings and other configurations.</param>
            <param name="resolverOverrides">Any overrides for the buildup.</param>
            <returns>The resulting object. By default, this will be <paramref name="existing"/>, but
            container extensions may add things like automatic proxy creation which would
            cause this to return a different object (but still type compatible with <paramref name="t"/>).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.Teardown(System.Object)">
            <summary>
            Run an existing object through the container, and clean it up.
            </summary>
            <param name="o">The object to tear down.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.AddExtension(Microsoft.Practices.Unity.UnityContainerExtension)">
            <summary>
            Add an extension object to the container.
            </summary>
            <param name="extension"><see cref="T:Microsoft.Practices.Unity.UnityContainerExtension"/> to add.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.Configure(System.Type)">
            <summary>
            Get access to a configuration interface exposed by an extension.
            </summary>
            <remarks>Extensions can expose configuration interfaces as well as adding
            strategies and policies to the container. This method walks the list of
            added extensions and returns the first one that implements the requested type.
            </remarks>
            <param name="configurationInterface"><see cref="T:System.Type"/> of configuration interface required.</param>
            <returns>The requested extension's configuration interface, or null if not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.RemoveAllExtensions">
            <summary>
            Remove all installed extensions from this container.
            </summary>
            <remarks>
            <para>
            This method removes all extensions from the container, including the default ones
            that implement the out-of-the-box behavior. After this method, if you want to use
            the container again you will need to either readd the default extensions or replace
            them with your own.
            </para>
            <para>
            The registered instances and singletons that have already been set up in this container
            do not get removed.
            </para>
            </remarks>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.CreateChildContainer">
            <summary>
            Create a child container.
            </summary>
            <remarks>
            A child container shares the parent's configuration, but can be configured with different
            settings or lifetime.</remarks>
            <returns>The new child container.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.Dispose">
            <summary>
            Dispose this container instance.
            </summary>
            <remarks>
            Disposing the container also disposes any child containers,
            and disposes any instances whose lifetimes are managed
            by the container.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.Dispose(System.Boolean)">
            <summary>
            Dispose this container instance.
            </summary>
            <remarks>
            This class doesn't have a finalizer, so <paramref name="disposing"/> will always be true.</remarks>
            <param name="disposing">True if being called from the IDisposable.Dispose
            method, false if being called from a finalizer.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainer.ClearExistingBuildPlan(System.Type,System.String)">
            <summary>
            Remove policies associated with building this type. This removes the
            compiled build plan so that it can be rebuilt with the new settings
            the next time this type is resolved.
            </summary>
            <param name="typeToInject">Type of object to clear the plan for.</param>
            <param name="name">Name the object is being registered with.</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.UnityContainer.Parent">
            <summary>
            The parent of this container.
            </summary>
            <value>The parent container, or null if this container doesn't have one.</value>
        </member>
        <member name="P:Microsoft.Practices.Unity.UnityContainer.Registrations">
            <summary>
            Get a sequence of <see cref="T:Microsoft.Practices.Unity.ContainerRegistration"/> that describe the current state
            of the container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.UnityContainer.ExtensionContextImpl">
            <summary>
            Implementation of the ExtensionContext that is actually used
            by the UnityContainer implementation.
            </summary>
            <remarks>
            This is a nested class so that it can access state in the
            container that would otherwise be inaccessible.
            </remarks>
        </member>
        <member name="E:Microsoft.Practices.Unity.UnityContainer.ExtensionContextImpl.RegisteringInstance">
            <summary>
            This event is raised when the <see cref="M:Microsoft.Practices.Unity.UnityContainer.RegisterInstance(System.Type,System.String,System.Object,Microsoft.Practices.Unity.LifetimeManager)"/> method,
            or one of its overloads, is called.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.UnityContainerExtensions">
            <summary>
            Extension class that adds a set of convenience overloads to the
            <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``1(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type with specific members to be injected.
            </summary>
            <typeparam name="T">Type this registration is for.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``2(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container.
            </summary>
            <remarks>
            <para>
            This method is used to tell the container that when asked for type <typeparamref name="TFrom"/>,
            actually return an instance of type <typeparamref name="TTo"/>. This is very useful for
            getting instances of interfaces.
            </para>
            <para>
            This overload registers a default mapping and transient lifetime.
            </para>
            </remarks>
            <typeparam name="TFrom"><see cref="T:System.Type"/> that will be requested.</typeparam>
            <typeparam name="TTo"><see cref="T:System.Type"/> that will actually be returned.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``2(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container, where the created instances will use
            the given <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <typeparam name="TFrom"><see cref="T:System.Type"/> that will be requested.</typeparam>
            <typeparam name="TTo"><see cref="T:System.Type"/> that will actually be returned.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``2(Microsoft.Practices.Unity.IUnityContainer,System.String,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container.
            </summary>
            <remarks>
            This method is used to tell the container that when asked for type <typeparamref name="TFrom"/>,
            actually return an instance of type <typeparamref name="TTo"/>. This is very useful for
            getting instances of interfaces.
            </remarks>
            <typeparam name="TFrom"><see cref="T:System.Type"/> that will be requested.</typeparam>
            <typeparam name="TTo"><see cref="T:System.Type"/> that will actually be returned.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="name">Name of this mapping.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``2(Microsoft.Practices.Unity.IUnityContainer,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container, where the created instances will use
            the given <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <typeparam name="TFrom"><see cref="T:System.Type"/> that will be requested.</typeparam>
            <typeparam name="TTo"><see cref="T:System.Type"/> that will actually be returned.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="name">Name to use for registration, null if a default registration.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``1(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> for the given type with the container.
            No type mapping is performed for this type.
            </summary>
            <typeparam name="T">The type to apply the <paramref name="lifetimeManager"/> to.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``1(Microsoft.Practices.Unity.IUnityContainer,System.String,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> for the given type with the container.
            No type mapping is performed for this type.
            </summary>
            <typeparam name="T">The type to configure injection on.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="name">Name that will be used to request the type.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType``1(Microsoft.Practices.Unity.IUnityContainer,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> for the given type and name with the container.
            No type mapping is performed for this type.
            </summary>
            <typeparam name="T">The type to apply the <paramref name="lifetimeManager"/> to.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="name">Name that will be used to request the type.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType(Microsoft.Practices.Unity.IUnityContainer,System.Type,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type with specific members to be injected.
            </summary>
            <param name="container">Container to configure.</param>
            <param name="t">Type this registration is for.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container.
            </summary>
            <remarks>
            <para>
            This method is used to tell the container that when asked for type <paramref name="from"/>,
            actually return an instance of type <paramref name="to"/>. This is very useful for
            getting instances of interfaces.
            </para>
            <para>
            This overload registers a default mapping.
            </para>
            </remarks>
            <param name="container">Container to configure.</param>
            <param name="from"><see cref="T:System.Type"/> that will be requested.</param>
            <param name="to"><see cref="T:System.Type"/> that will actually be returned.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,System.String,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container.
            </summary>
            <remarks>
            This method is used to tell the container that when asked for type <paramref name="from"/>,
            actually return an instance of type <paramref name="to"/>. This is very useful for
            getting instances of interfaces.
            </remarks>
            <param name="container">Container to configure.</param>
            <param name="from"><see cref="T:System.Type"/> that will be requested.</param>
            <param name="to"><see cref="T:System.Type"/> that will actually be returned.</param>
            <param name="name">Name to use for registration, null if a default registration.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Type,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a type mapping with the container, where the created instances will use
            the given <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <param name="container">Container to configure.</param>
            <param name="from"><see cref="T:System.Type"/> that will be requested.</param>
            <param name="to"><see cref="T:System.Type"/> that will actually be returned.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType(Microsoft.Practices.Unity.IUnityContainer,System.Type,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> for the given type and name with the container.
            No type mapping is performed for this type.
            </summary>
            <param name="container">Container to configure.</param>
            <param name="t">The <see cref="T:System.Type"/> to apply the <paramref name="lifetimeManager"/> to.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.String,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> for the given type and name with the container.
            No type mapping is performed for this type.
            </summary>
            <param name="container">Container to configure.</param>
            <param name="t">The <see cref="T:System.Type"/> to configure in the container.</param>
            <param name="name">Name to use for registration, null if a default registration.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterType(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])">
            <summary>
            Register a <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> for the given type and name with the container.
            No type mapping is performed for this type.
            </summary>
            <param name="container">Container to configure.</param>
            <param name="t">The <see cref="T:System.Type"/> to apply the <paramref name="lifetimeManager"/> to.</param>
            <param name="name">Name to use for registration, null if a default registration.</param>
            <param name="lifetimeManager">The <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> that controls the lifetime
            of the returned instance.</param>
            <param name="injectionMembers">Injection configuration objects.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstance``1(Microsoft.Practices.Unity.IUnityContainer,``0)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            <para>
            This overload does a default registration and has the container take over the lifetime of the instance.</para>
            </remarks>
            <typeparam name="TInterface">Type of instance to register (may be an implemented interface instead of the full type).</typeparam>
            <param name="container">Container to configure.</param>
            <param name="instance">Object to returned.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstance``1(Microsoft.Practices.Unity.IUnityContainer,``0,Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            <para>
            This overload does a default registration (name = null).
            </para>
            </remarks>
            <typeparam name="TInterface">Type of instance to register (may be an implemented interface instead of the full type).</typeparam>
            <param name="container">Container to configure.</param>
            <param name="instance">Object to returned.</param>
            <param name="lifetimeManager">
            <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> object that controls how this instance will be managed by the container.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstance``1(Microsoft.Practices.Unity.IUnityContainer,System.String,``0)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            <para>
            This overload automatically has the container take ownership of the <paramref name="instance"/>.</para>
            </remarks>
            <typeparam name="TInterface">Type of instance to register (may be an implemented interface instead of the full type).</typeparam>
            <param name="instance">Object to returned.</param>
            <param name="container">Container to configure.</param>
            <param name="name">Name for registration.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstance``1(Microsoft.Practices.Unity.IUnityContainer,System.String,``0,Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            </remarks>
            <typeparam name="TInterface">Type of instance to register (may be an implemented interface instead of the full type).</typeparam>
            <param name="instance">Object to returned.</param>
            <param name="container">Container to configure.</param>
            <param name="name">Name for registration.</param>
            <param name="lifetimeManager">
            <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> object that controls how this instance will be managed by the container.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstance(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Object)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            <para>
            This overload does a default registration and has the container take over the lifetime of the instance.</para>
            </remarks>
            <param name="container">Container to configure.</param>
            <param name="t">Type of instance to register (may be an implemented interface instead of the full type).</param>
            <param name="instance">Object to returned.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstance(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Object,Microsoft.Practices.Unity.LifetimeManager)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            <para>
            This overload does a default registration (name = null).
            </para>
            </remarks>
            <param name="container">Container to configure.</param>
            <param name="t">Type of instance to register (may be an implemented interface instead of the full type).</param>
            <param name="instance">Object to returned.</param>
            <param name="lifetimeManager">
            <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> object that controls how this instance will be managed by the container.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.RegisterInstance(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.String,System.Object)">
            <summary>
            Register an instance with the container.
            </summary>
            <remarks>
            <para>
            Instance registration is much like setting a type as a singleton, except that instead
            of the container creating the instance the first time it is requested, the user
            creates the instance ahead of type and adds that instance to the container.
            </para>
            <para>
            This overload automatically has the container take ownership of the <paramref name="instance"/>.</para>
            </remarks>
            <param name="container">Container to configure.</param>
            <param name="t">Type of instance to register (may be an implemented interface instead of the full type).</param>
            <param name="instance">Object to returned.</param>
            <param name="name">Name for registration.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.Resolve``1(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Resolve an instance of the default requested type from the container.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of object to get from the container.</typeparam>
            <param name="container">Container to resolve from.</param>
            <param name="overrides">Any overrides for the resolve call.</param>
            <returns>The retrieved object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.Resolve``1(Microsoft.Practices.Unity.IUnityContainer,System.String,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Resolve an instance of the requested type with the given name from the container.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of object to get from the container.</typeparam>
            <param name="container">Container to resolve from.</param>
            <param name="name">Name of the object to retrieve.</param>
            <param name="overrides">Any overrides for the resolve call.</param>
            <returns>The retrieved object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.Resolve(Microsoft.Practices.Unity.IUnityContainer,System.Type,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Resolve an instance of the default requested type from the container.
            </summary>
            <param name="container">Container to resolve from.</param>
            <param name="t"><see cref="T:System.Type"/> of object to get from the container.</param>
            <param name="overrides">Any overrides for the resolve call.</param>
            <returns>The retrieved object.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.ResolveAll``1(Microsoft.Practices.Unity.IUnityContainer,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Return instances of all registered types requested.
            </summary>
            <remarks>
            <para>
            This method is useful if you've registered multiple types with the same
            <see cref="T:System.Type"/> but different names.
            </para>
            <para>
            Be aware that this method does NOT return an instance for the default (unnamed) registration.
            </para>
            </remarks>
            <typeparam name="T">The type requested.</typeparam>
            <param name="container">Container to resolve from.</param>
            <param name="resolverOverrides">Any overrides for the resolve calls.</param>
            <returns>Set of objects of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.BuildUp``1(Microsoft.Practices.Unity.IUnityContainer,``0,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Run an existing object through the container and perform injection on it.
            </summary>
            <remarks>
            <para>
            This method is useful when you don't control the construction of an
            instance (ASP.NET pages or objects created via XAML, for instance)
            but you still want properties and other injection performed.
            </para>
            <para>
            This overload uses the default registrations.
            </para>
            </remarks>
            <typeparam name="T"><see cref="T:System.Type"/> of object to perform injection on.</typeparam>
            <param name="container">Container to resolve through.</param>
            <param name="existing">Instance to build up.</param>
            <param name="resolverOverrides">Any overrides for the buildup.</param>
            <returns>The resulting object. By default, this will be <paramref name="existing"/>, but
            container extensions may add things like automatic proxy creation which would
            cause this to return a different object (but still type compatible with <typeparamref name="T"/>).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.BuildUp``1(Microsoft.Practices.Unity.IUnityContainer,``0,System.String,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Run an existing object through the container and perform injection on it.
            </summary>
            <remarks>
            <para>
            This method is useful when you don't control the construction of an
            instance (ASP.NET pages or objects created via XAML, for instance)
            but you still want properties and other injection performed.
            </para></remarks>
            <typeparam name="T"><see cref="T:System.Type"/> of object to perform injection on.</typeparam>
            <param name="container">Conatiner to resolve through.</param>
            <param name="existing">Instance to build up.</param>
            <param name="name">name to use when looking up the typemappings and other configurations.</param>
            <param name="resolverOverrides">Any overrides for the Buildup.</param>
            <returns>The resulting object. By default, this will be <paramref name="existing"/>, but
            container extensions may add things like automatic proxy creation which would
            cause this to return a different object (but still type compatible with <typeparamref name="T"/>).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.BuildUp(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.Object,Microsoft.Practices.Unity.ResolverOverride[])">
            <summary>
            Run an existing object through the container and perform injection on it.
            </summary>
            <remarks>
            <para>
            This method is useful when you don't control the construction of an
            instance (ASP.NET pages or objects created via XAML, for instance)
            but you still want properties and other injection performed.
            </para>
            <para>
            This overload uses the default registrations.
            </para>
            </remarks>
            <param name="container">Container to resolve through.</param>
            <param name="t"><see cref="T:System.Type"/> of object to perform injection on.</param>
            <param name="existing">Instance to build up.</param>
            <param name="resolverOverrides">Any overrides for the Buildup.</param>
            <returns>The resulting object. By default, this will be <paramref name="existing"/>, but
            container extensions may add things like automatic proxy creation which would
            cause this to return a different object (but still type compatible with <paramref name="t"/>).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.AddNewExtension``1(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Creates a new extension object and adds it to the container.
            </summary>
            <typeparam name="TExtension">Type of <see cref="T:Microsoft.Practices.Unity.UnityContainerExtension"/> to add. The extension type
            will be resolved from within the supplied <paramref name="container"/>.</typeparam>
            <param name="container">Container to add the extension to.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer"/> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.Configure``1(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Resolve access to a configuration interface exposed by an extension.
            </summary>
            <remarks>Extensions can expose configuration interfaces as well as adding
            strategies and policies to the container. This method walks the list of
            added extensions and returns the first one that implements the requested type.
            </remarks>
            <typeparam name="TConfigurator">The configuration interface required.</typeparam>
            <param name="container">Container to configure.</param>
            <returns>The requested extension's configuration interface, or null if not found.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.IsRegistered(Microsoft.Practices.Unity.IUnityContainer,System.Type)">
            <summary>
             Check if a particular type has been registered with the container with
             the default name.
            </summary>
            <param name="container">Container to inspect.</param>
            <param name="typeToCheck">Type to check registration for.</param>
            <returns>True if this type has been registered, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.IsRegistered(Microsoft.Practices.Unity.IUnityContainer,System.Type,System.String)">
            <summary>
            Check if a particular type/name pair has been registered with the container.
            </summary>
            <param name="container">Container to inspect.</param>
            <param name="typeToCheck">Type to check registration for.</param>
            <param name="nameToCheck">Name to check registration for.</param>
            <returns>True if this type/name pair has been registered, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.IsRegistered``1(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Check if a particular type has been registered with the container with the default name.
            </summary>
            <typeparam name="T">Type to check registration for.</typeparam>
            <param name="container">Container to inspect.</param>
            <returns>True if this type has been registered, false if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityContainerExtensions.IsRegistered``1(Microsoft.Practices.Unity.IUnityContainer,System.String)">
            <summary>
            Check if a particular type/name pair has been registered with the container.
            </summary>
            <typeparam name="T">Type to check registration for.</typeparam>
            <param name="container">Container to inspect.</param>
            <param name="nameToCheck">Name to check registration for.</param>
            <returns>True if this type/name pair has been registered, false if not.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.UnityDefaultBehaviorExtension">
            <summary>
            This extension supplies the default behavior of the UnityContainer API
            by handling the context events and setting policies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityDefaultBehaviorExtension.Initialize">
            <summary>
            Install the default container behavior into the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityDefaultBehaviorExtension.Remove">
            <summary>
            Remove the default behavior from the container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.UnityDefaultStrategiesExtension">
            <summary>
            This extension installs the default strategies and policies into the container
            to implement the standard behavior of the Unity container.
            </summary>
            <summary>
            This extension installs the default strategies and policies into the container
            to implement the standard behavior of the Unity container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityDefaultStrategiesExtension.Initialize">
            <summary>
            Add the default ObjectBuilder strategies &amp; policies to the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityDefaultStrategiesExtension.SetDynamicBuilderMethodCreatorPolicy">
            <summary>
            Add the correct <see cref="T:Microsoft.Practices.ObjectBuilder2.IDynamicBuilderMethodCreatorPolicy"/> to the policy
            set. This version adds the appropriate policy for running on the desktop CLR.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.UnityServiceLocator">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> that wraps a Unity container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityServiceLocator.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Unity.UnityServiceLocator"/> class for a container.
            </summary>
            <param name="container">The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> to wrap with the <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>
            interface implementation.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityServiceLocator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityServiceLocator.DoGetInstance(System.Type,System.String)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
                        the requested service instance.
            </summary>
            <param name="serviceType">Type of instance requested.</param><param name="key">Name of registered service you want. May be null.</param>
            <returns>
            The requested service instance.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.UnityServiceLocator.DoGetAllInstances(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
                        resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Utility.Guard">
            <summary>
            A static helper class that includes various parameter checking routines.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the given argument is null.
            </summary>
            <exception cref="T:System.ArgumentNullException"> if tested value if null.</exception>
            <param name="argumentValue">Argument value to test.</param>
            <param name="argumentName">Name of the argument being tested.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.Guard.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if the tested string argument is null or the empty string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if string value is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the string is empty</exception>
            <param name="argumentValue">Argument value to check.</param>
            <param name="argumentName">Name of argument being checked.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.Guard.TypeIsAssignable(System.Type,System.Type,System.String)">
            <summary>
            Verifies that an argument type is assignable from the provided type (meaning
            interfaces are implemented, or classes exist in the base class hierarchy).
            </summary>
            <param name="assignmentTargetType">The argument type that will be assigned to.</param>
            <param name="assignmentValueType">The type of the value being assigned.</param>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.Guard.InstanceIsAssignable(System.Type,System.Object,System.String)">
            <summary>
            Verifies that an argument instance is assignable from the provided type (meaning
            interfaces are implemented, or classes exist in the base class hierarchy, or instance can be 
            assigned through a runtime wrapper, as is the case for COM Objects).
            </summary>
            <param name="assignmentTargetType">The argument type that will be assigned to.</param>
            <param name="assignmentInstance">The instance that will be assigned.</param>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Utility.MethodReflectionHelper">
            <summary>
            Helper class to wrap common reflection stuff dealing with
            methods.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.MethodReflectionHelper.#ctor(System.Reflection.MethodBase)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Utility.MethodReflectionHelper"/> instance that
            lets us do more reflection stuff on that method.
            </summary>
            <param name="method">The method to reflect on.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.MethodReflectionHelper.GetClosedParameterTypes(System.Type[])">
            <summary>
            Given our set of generic type arguments, 
            </summary>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <returns>An array with closed parameter types. </returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Utility.MethodReflectionHelper.MethodHasOpenGenericParameters">
            <summary>
            Returns true if any of the parameters of this method
            are open generics.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Utility.MethodReflectionHelper.ParameterTypes">
            <summary>
            Return the <see cref="T:System.Type"/> of each parameter for this
            method.
            </summary>
            <returns>Sequence of <see cref="T:System.Type"/> objects, one for
            each parameter in order.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Utility.Pair`2">
            <summary>
            A helper class that encapsulates two different
            data items together into a a single item.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.Pair`2.#ctor(`0,`1)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Utility.Pair`2"/> containing
            the two values give.
            </summary>
            <param name="first">First value</param>
            <param name="second">Second value</param>
        </member>
        <member name="P:Microsoft.Practices.Unity.Utility.Pair`2.First">
            <summary>
            The first value of the pair.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Utility.Pair`2.Second">
            <summary>
            The second value of the pair.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Utility.Pair">
            <summary>
            Container for a Pair helper method.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.Pair.Make``2(``0,``1)">
            <summary>
            A helper factory method that lets users take advantage of type inference.
            </summary>
            <typeparam name="TFirstParameter">Type of first value.</typeparam>
            <typeparam name="TSecondParameter">Type of second value.</typeparam>
            <param name="first">First value.</param>
            <param name="second">Second value.</param>
            <returns>A new <see cref="T:Microsoft.Practices.Unity.Utility.Pair`2"/> instance.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Utility.ParameterMatcher">
            <summary>
            A utility class that handles the logic of matching parameter
            lists, so we can find the right constructor and method overloads.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.ParameterMatcher.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Unity.InjectionParameterValue})">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Utility.ParameterMatcher"/> that will attempt to
            match the given parameter types.
            </summary>
            <param name="parametersToMatch">Target parameters to match against.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.ParameterMatcher.Matches(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Tests to see if the given set of types matches the ones
            we're looking for.
            </summary>
            <param name="candidate">parameter list to look for.</param>
            <returns>true if they match, false if they don't.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.ParameterMatcher.Matches(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>
            Tests to see if the given set of types matches the ones we're looking for.
            </summary>
            <param name="candidate">Candidate method signature to look for.</param>
            <returns>True if they match, false if they don't.</returns>
        </member>
        <member name="T:Microsoft.Practices.Unity.Utility.ParameterReflectionHelper">
            <summary>
            Another reflection helper class that has extra methods
            for dealing with ParameterInfos.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Unity.Utility.ReflectionHelper">
            <summary>
            A small helper class to encapsulate details of the
            reflection API, particularly around generics.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.ReflectionHelper.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.Unity.Utility.ReflectionHelper"/> instance that
            lets you look at information about the given type.
            </summary>
            <param name="typeToReflect">Type to do reflection on.</param>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.ReflectionHelper.MethodHasOpenGenericParameters(System.Reflection.MethodBase)">
            <summary>
            Test the given <see cref="T:System.Reflection.MethodBase"/> object, looking at
            the parameters. Determine if any of the parameters are
            open generic types that need type attributes filled in.
            </summary>
            <param name="method">The method to check.</param>
            <returns>True if any of the parameters are open generics. False if not.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.ReflectionHelper.GetClosedParameterType(System.Type[])">
            <summary>
            If this type is an open generic, use the
            given <paramref name="genericArguments"/> array to
            determine what the required closed type is and return that.
            </summary>
            <remarks>If the parameter is not an open type, just
            return this parameter's type.</remarks>
            <param name="genericArguments">Type arguments to substitute in for
            the open type parameters.</param>
            <returns>Corresponding closed type of this parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.ReflectionHelper.GetNamedGenericParameter(System.String)">
            <summary>
            Given a generic argument name, return the corresponding type for this
            closed type. For example, if the current type is SomeType&lt;User&gt;, and the
            corresponding definition was SomeType&lt;TSomething&gt;, calling this method
            and passing "TSomething" will return typeof(User).
            </summary>
            <param name="parameterName">Name of the generic parameter.</param>
            <returns>Type of the corresponding generic parameter, or null if there
            is no matching name.</returns>
        </member>
        <member name="P:Microsoft.Practices.Unity.Utility.ReflectionHelper.Type">
            <summary>
            The <see cref="P:Microsoft.Practices.Unity.Utility.ReflectionHelper.Type"/> object we're reflecting over.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Utility.ReflectionHelper.IsGenericType">
            <summary>
            Is this type generic?
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Utility.ReflectionHelper.IsOpenGeneric">
            <summary>
            Is this type an open generic (no type parameter specified)
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Utility.ReflectionHelper.IsArray">
            <summary>
            Is this type an array type?
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Utility.ReflectionHelper.IsGenericArray">
            <summary>
            Is this type an array of generic elements?
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Unity.Utility.ReflectionHelper.ArrayElementType">
            <summary>
            The type of the elements in this type (if it's an array).
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.ParameterReflectionHelper.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.Unity.Utility.ParameterReflectionHelper"/> that
            lets you query information about the given ParameterInfo object.
            </summary>
            <param name="parameter">Parameter to query.</param>
        </member>
        <member name="T:Microsoft.Practices.Unity.Utility.StaticReflection">
            <summary>
            A set of helper methods to pick through lambdas and pull out
            <see cref="T:System.Reflection.MethodInfo"/> from them.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.StaticReflection.GetMethodInfo(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Pull out a <see cref="T:System.Reflection.MethodInfo"/> object from an expression of the form
            () =&gt; SomeClass.SomeMethod()
            </summary>
            <param name="expression">Expression describing the method to call.</param>
            <returns>Corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.StaticReflection.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Pull out a <see cref="T:System.Reflection.MethodInfo"/> object from an expression of the form
            x =&gt; x.SomeMethod()
            </summary>
            <typeparam name="T">The type where the method is defined.</typeparam>
            <param name="expression">Expression describing the method to call.</param>
            <returns>Corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.StaticReflection.GetPropertyGetMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Pull out a <see cref="T:System.Reflection.MethodInfo"/> object for the get method from an expression of the form
            x =&gt; x.SomeProperty
            </summary>
            <typeparam name="T">The type where the method is defined.</typeparam>
            <typeparam name="TProperty">The type for the property.</typeparam>
            <param name="expression">Expression describing the property for which the get method is to be extracted.</param>
            <returns>Corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.StaticReflection.GetPropertySetMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Pull out a <see cref="T:System.Reflection.MethodInfo"/> object for the set method from an expression of the form
            x =&gt; x.SomeProperty
            </summary>
            <typeparam name="T">The type where the method is defined.</typeparam>
            <typeparam name="TProperty">The type for the property.</typeparam>
            <param name="expression">Expression describing the property for which the set method is to be extracted.</param>
            <returns>Corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Unity.Utility.StaticReflection.GetConstructorInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Pull out a <see cref="T:System.Reflection.ConstructorInfo"/> object from an expression of the form () =&gt; new SomeType()
            </summary>
            <typeparam name="T">The type where the constructor is defined.</typeparam>
            <param name="expression">Expression invoking the desired constructor.</param>
            <returns>Corresponding <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="T:Sobey.Core.IO.FileSystemWatcher">
            <summary>
            重新.NET自带的FileSystemWatcher
            修正在使用第三方存储系统时，返回路径可能不兼容的情况，如空字符结尾
            </summary>
        </member>
        <member name="M:Sobey.Core.IO.WatchFolder.scanFiles(System.Boolean)">
            <summary>
            全扫描
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sobey.Core.IO.FileWatcher">
            <summary>
            文件监视类
            </summary>
        </member>
        <member name="T:Sobey.Core.IO.FileWatcher.CreatingFileItem">
            <summary>
            创建中文件
            </summary>
        </member>
        <member name="P:Sobey.Core.IO.FileWatcher.CreatingFileItem.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Sobey.Core.IO.FileWatcher.CreatingFileItem.LastChangedTime">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="T:Sobey.Core.Log.CommonLogger">
            <summary>
            此类提供一些常用的日志记录器
            </summary>
        </member>
        <member name="P:Sobey.Core.Log.CommonLogger.TraceLogger">
            <summary>
            全局跟踪日志
            </summary>
        </member>
        <member name="P:Sobey.Core.Log.CommonLogger.DebugLogger">
            <summary>
            全局调试日志
            </summary>
        </member>
        <member name="P:Sobey.Core.Log.CommonLogger.UILogger">
            <summary>
            全局界面日志
            </summary>
        </member>
        <member name="P:Sobey.Core.Log.CommonLogger.EventLogger">
            <summary>
            全局事件日志，应用程序可开启日志事件，输出此日志器记录的内容
            </summary>
        </member>
        <member name="T:Sobey.Core.Log.ILogger">
            <summary>
            日志记录类
            </summary>
        </member>
        <member name="M:Sobey.Core.Log.ILogger.Trace(System.String)">
            <summary>
            写入跟踪信息
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:Sobey.Core.Log.ILogger.Trace(System.String,System.Object[])">
            <summary>
            写入跟踪信息
            </summary>
            <param name="formatString">格式化字符串</param>
            <param name="message">参数</param>
        </member>
        <member name="M:Sobey.Core.Log.ILogger.Debug(System.String)">
            <summary>
            写入调试信息
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:Sobey.Core.Log.ILogger.Debug(System.String,System.Object[])">
            <summary>
            写入调试信息
            </summary>
            <param name="formatString">格式化字符串</param>
            <param name="message">参数</param>
        </member>
        <member name="M:Sobey.Core.Log.ILogger.Info(System.String)">
            <summary>
            写入程序信息
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:Sobey.Core.Log.ILogger.Info(System.String,System.Object[])">
            <summary>
            写入程序信息
            </summary>
            <param name="formatString">格式化字符串</param>
            <param name="message">参数</param>
        </member>
        <member name="M:Sobey.Core.Log.ILogger.Warn(System.String)">
            <summary>
            写入警告信息
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:Sobey.Core.Log.ILogger.Warn(System.String,System.Object[])">
            <summary>
            写入警告信息
            </summary>
            <param name="formatString">格式化字符串</param>
            <param name="message">参数</param>
        </member>
        <member name="M:Sobey.Core.Log.ILogger.Error(System.String)">
            <summary>
            写入错误信息
            </summary>
            <param name="message">错误信息</param>
        </member>
        <member name="M:Sobey.Core.Log.ILogger.Error(System.String,System.Object[])">
            <summary>
            写入错误信息
            </summary>
            <param name="formatString">格式化字符串</param>
            <param name="message">参数</param>
        </member>
        <member name="M:Sobey.Core.Log.ILogger.Fatal(System.String)">
            <summary>
            写入失败信息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sobey.Core.Log.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            写入失败信息
            </summary>
            <param name="formatString">格式化字符串</param>
            <param name="message">参数</param>
        </member>
        <member name="M:Sobey.Core.Log.ILogger.Log(Sobey.Core.Log.LogLevels,System.String)">
            <summary>
            写入日志
            </summary>
            <param name="logLevel">日志级别</param>
            <param name="message">日志内容</param>
        </member>
        <member name="M:Sobey.Core.Log.ILogger.Log(Sobey.Core.Log.LogLevels,System.String,System.Object[])">
            <summary>
            写入日志
            </summary>
            <param name="logLevel">日志级别</param>
            <param name="formatString">格式化字符串</param>
            <param name="args">参数</param>
        </member>
        <member name="P:Sobey.Core.Log.ILogger.LoggerName">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="T:Sobey.Core.Log.Filters.ExceptLoggerNameFilter">
            <summary>
            排除指定日志名称
            </summary>
        </member>
        <member name="T:NLog.Filters.Filter">
            <summary>
            An abstract filter class. Provides a way to eliminate log messages
            based on properties other than logger name and log level.
            </summary>
        </member>
        <member name="M:NLog.Filters.Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.Filter"/> class.
            </summary>
        </member>
        <member name="M:NLog.Filters.Filter.GetFilterResult(NLog.LogEventInfo)">
            <summary>
            Gets the result of evaluating filter against given log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>Filter result.</returns>
        </member>
        <member name="M:NLog.Filters.Filter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="P:NLog.Filters.Filter.Action">
            <summary>
            Gets or sets the action to be taken when filter matches.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="T:Sobey.Core.Log.LogConfig">
            <summary>
            日志配置
            </summary>
        </member>
        <member name="P:Sobey.Core.Log.LogConfig.LogFileTemplate">
            <summary>
            日志文件名称模板
            </summary>
        </member>
        <member name="P:Sobey.Core.Log.LogConfig.LogContentTemplate">
            <summary>
            日志内容布局模板
            </summary>
        </member>
        <member name="P:Sobey.Core.Log.LogConfig.IsAsync">
            <summary>
            是否采用异步方式写入日志
            </summary>
        </member>
        <member name="P:Sobey.Core.Log.LogConfig.LogBaseDir">
            <summary>
            日志保存目录
            </summary>
        </member>
        <member name="P:Sobey.Core.Log.LogConfig.LogLevels">
            <summary>
            日志级别
            可通过并操作，传入多个日志层级
            </summary>
        </member>
        <member name="T:Sobey.Core.Log.LogEntity">
            <summary>
            日志实体
            </summary>
        </member>
        <member name="P:Sobey.Core.Log.LogEntity.Logger">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="P:Sobey.Core.Log.LogEntity.LogTime">
            <summary>
            日志时间
            </summary>
        </member>
        <member name="P:Sobey.Core.Log.LogEntity.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Sobey.Core.Log.LogEntity.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogFileTemplates.PerDay">
            <summary>
            按天组织日志
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogFileTemplates.PerDayAndLevel">
            <summary>
            按 天_级别 组织日志，如2012-05-11_Debug.log
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogFileTemplates.PerDayDir">
            <summary>
            按 天建立子文件夹，使用单个文件，如: 2012-05-11\log.log
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogFileTemplates.PerDayDirAndLoggerAndLevel">
            <summary>
            按 天建立子文件夹，然后按日志名称_级别组织日志，如: 2012-05-11\TestLogger_Debug.log
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogFileTemplates.PerDayDirAndLogger">
            <summary>
            按 天建立子文件夹，然后按日志名称组织日志，如: 2012-05-11\TestLogger.log
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogFileTemplates.LevelDirAndPerDay">
            <summary>
            按级别建立子文件夹，然后按日期组织日志文件
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogFileTemplates.LevelDirAndLogger">
            <summary>
            按级别\日志名称组织
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogFileTemplates.LevelAndDateDirAndLogger">
            <summary>
            按级别\日期\日志名称组织
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogFileTemplates.LevelAndLoggerDirAndDate">
            <summary>
            按级别\日志名称\日期组织
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogFileTemplates.LoggerDirAndDate">
            <summary>
            按日志名称\日期.log组织
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogFileTemplates.LoggerDirAndDateLevel">
            <summary>
            按日志名称\日期_级别.log组织
            </summary>
        </member>
        <member name="T:Sobey.Core.Log.LogLevelConverter">
            <summary>
            日志级别转换
            </summary>
        </member>
        <member name="M:Sobey.Core.Log.LogLevelConverter.ToLogLevels(NLog.LogLevel)">
            <summary>
            将NLog中的LogLevel转换为Sobey.Core中的LogLevels
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Sobey.Core.Log.LogLevelConverter.GetLogLevels(Sobey.Core.Log.LogLevels)">
            <summary>
            将LogLevels转换为NLog.LogLevel集合
            </summary>
            <param name="logLevel">日志级别</param>
            <returns>NLog日志级别集合</returns>
        </member>
        <member name="T:Sobey.Core.Log.LogLevels">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogLevels.Trace">
            <summary>
            跟踪信息
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogLevels.Debug">
            <summary>
            调试信息
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogLevels.Info">
            <summary>
            程序消息
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogLevels.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogLevels.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogLevels.Fatal">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:Sobey.Core.Log.LogLevels.All">
            <summary>
            全部
            </summary>
        </member>
        <member name="T:Sobey.Core.Log.LoggerManager">
            <summary>
            日志管理器
            </summary>
        </member>
        <member name="M:Sobey.Core.Log.LoggerManager.InitLogger(Sobey.Core.Log.LogConfig)">
            <summary>
            日志初始化
            </summary>
            <param name="config">日志配置</param>
        </member>
        <member name="M:Sobey.Core.Log.LoggerManager.SetLoggerLevel(Sobey.Core.Log.LogLevels)">
            <summary>
            设置日志的记录层级
            </summary>
            <param name="logLevels">日志层级</param>
        </member>
        <member name="M:Sobey.Core.Log.LoggerManager.SetLoggerAboveLevels(Sobey.Core.Log.LogLevels)">
            <summary>
            设置日志的记录层级，logLevel及以上的级别都将写入目标
            </summary>
            <param name="logLevel">日志级别, 只能传入单值，如果传入复合标志，将启用所有日志层级</param>
        </member>
        <member name="M:Sobey.Core.Log.LoggerManager.DisableLogger(System.String,Sobey.Core.Log.LogLevels)">
            <summary>
            禁止将某个日志写入日志文件
            </summary>
            <param name="loggerName">日志的名称，可使用通配符*</param>
            <param name="logLevel">禁止的日志层级</param>
        </member>
        <member name="M:Sobey.Core.Log.LoggerManager.EnableLogger(System.String,Sobey.Core.Log.LogLevels)">
            <summary>
            启用指定日志
            </summary>
            <param name="loggerName"></param>
            <param name="logLevel"></param>
            <remarks>只能启用由DisableLogger禁用的日志</remarks>
        </member>
        <member name="M:Sobey.Core.Log.LoggerManager.MapLogger(System.String,Sobey.Core.Log.LogLevels,System.String)">
            <summary>
            将指定日志映射到独立的日志文件
            </summary>
            <param name="loggerName">日志名称，可使用通配符</param>
            <param name="logLevel">日志级别</param>
            <param name="logFileName">日志文件的绝对路径</param>
        </member>
        <member name="M:Sobey.Core.Log.LoggerManager.OpenTcpLogger(System.String)">
            <summary>
            开启日志的Tcp广播
            </summary>
            <param name="tcpAddress">广播地址，可以使udp地址，也可以是tcp地址，如:udp://127.0.0.1:9999</param>
        </member>
        <member name="M:Sobey.Core.Log.LoggerManager.CloseTcpLogger">
            <summary>
            关闭日志广播
            </summary>
        </member>
        <member name="M:Sobey.Core.Log.LoggerManager.EnableLogEvent(System.String,Sobey.Core.Log.LogLevels)">
            <summary>
            触发日志事件
            </summary>
            <param name="loggerName">日志名称，可使用通配符</param>
            <param name="logLevel">日志级别</param>
        </member>
        <member name="M:Sobey.Core.Log.LoggerManager.DisableLogEvent(System.String,Sobey.Core.Log.LogLevels)">
            <summary>
            禁止触发事件
            </summary>
            <param name="loggerName">日志名称</param>
            <param name="logLevel">级别</param>
        </member>
        <member name="M:Sobey.Core.Log.LoggerManager.EnableLogging">
            <summary>
            允许日志
            </summary>
        </member>
        <member name="M:Sobey.Core.Log.LoggerManager.DisableLogging">
            <summary>
            禁止日志
            </summary>
        </member>
        <member name="M:Sobey.Core.Log.LoggerManager.GetLogger(System.String)">
            <summary>
            获取指定名称的日志记录器
            </summary>
            <param name="loggerName">日志名称</param>
            <returns></returns>
        </member>
        <member name="E:Sobey.Core.Log.LoggerManager.Logging">
            <summary>
            日志事件，需要通过EnableLogEvent方法开启某个日志的事件后，LogManager才对外公布日志事件
            </summary>
        </member>
        <member name="P:Sobey.Core.Log.LoggerManager.IsLoggingEnabled">
            <summary>
            返回当前日志状态
            </summary>
        </member>
        <member name="T:NLog.Targets.Target">
            <summary>
            Represents logging target.
            </summary>
        </member>
        <member name="T:NLog.Internal.ISupportsInitialize">
            <summary>
            Supports object initialization and termination.
            </summary>
        </member>
        <member name="M:NLog.Internal.ISupportsInitialize.Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Internal.ISupportsInitialize.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.NLog#Internal#ISupportsInitialize#Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Targets.Target.NLog#Internal#ISupportsInitialize#Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.Dispose">
            <summary>
            Closes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.Flush(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)">
            <summary>
            Calls the <see cref="M:NLog.Layouts.Layout.Precalculate(NLog.LogEventInfo)"/> on each volatile layout
            used by this target.
            </summary>
            <param name="logEvent">
            The log event.
            </param>
        </member>
        <member name="M:NLog.Targets.Target.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLog.Targets.Target.WriteAsyncLogEvent(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes the log to the target.
            </summary>
            <param name="logEvent">Log event to write.</param>
        </member>
        <member name="M:NLog.Targets.Target.WriteAsyncLogEvents(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes the array of log events.
            </summary>
            <param name="logEvents">The log events.</param>
        </member>
        <member name="M:NLog.Targets.Target.Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Targets.Target.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:NLog.Targets.Target.InitializeTarget">
            <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Target.Write(NLog.LogEventInfo)">
            <summary>
            Writes logging event to the log target.
            classes.
            </summary>
            <param name="logEvent">
            Logging event to be written out.
            </param>
        </member>
        <member name="M:NLog.Targets.Target.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes log event to the log target. Must be overridden in inheriting
            classes.
            </summary>
            <param name="logEvent">Log event to be written out.</param>
        </member>
        <member name="M:NLog.Targets.Target.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="P:NLog.Targets.Target.Name">
            <summary>
            Gets or sets the name of the target.
            </summary>
            <docgen category='General Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Target.SyncRoot">
            <summary>
            Gets the object which can be used to synchronize asynchronous operations that must rely on the .
            </summary>
        </member>
        <member name="P:NLog.Targets.Target.LoggingConfiguration">
            <summary>
            Gets the logging configuration this target is part of.
            </summary>
        </member>
        <member name="P:NLog.Targets.Target.IsInitialized">
            <summary>
            Gets a value indicating whether the target has been initialized.
            </summary>
        </member>
        <member name="T:NLog.ComInterop.ComLogger">
            <summary>
            NLog COM Interop logger implementation.
            </summary>
        </member>
        <member name="T:NLog.ComInterop.IComLogger">
            <summary>
            NLog COM Interop logger interface.
            </summary>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.Log(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.Trace(System.String)">
            <summary>
            Writes the diagnostic message at the Trace level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.Debug(System.String)">
            <summary>
            Writes the diagnostic message at the Debug level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.Info(System.String)">
            <summary>
            Writes the diagnostic message at the Info level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.Warn(System.String)">
            <summary>
            Writes the diagnostic message at the Warn level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.Error(System.String)">
            <summary>
            Writes the diagnostic message at the Error level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.Fatal(System.String)">
            <summary>
            Writes the diagnostic message at the Fatal level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.IsEnabled(System.String)">
            <summary>
            Checks if the specified log level is enabled.
            </summary>
            <param name="level">The log level.</param>
            <returns>A value indicating whether the specified log level is enabled.</returns>
        </member>
        <member name="P:NLog.ComInterop.IComLogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether the Trace level is enabled.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether the Debug level is enabled.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether the Info level is enabled.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether the Warn level is enabled.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether the Error level is enabled.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether the Fatal level is enabled.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogger.LoggerName">
            <summary>
            Gets or sets the logger name.
            </summary>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.Log(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string"/> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.Trace(System.String)">
            <summary>
            Writes the diagnostic message at the Trace level.
            </summary>
            <param name="message">A <see langword="string"/> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.Debug(System.String)">
            <summary>
            Writes the diagnostic message at the Debug level.
            </summary>
            <param name="message">A <see langword="string"/> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.Info(System.String)">
            <summary>
            Writes the diagnostic message at the Info level.
            </summary>
            <param name="message">A <see langword="string"/> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.Warn(System.String)">
            <summary>
            Writes the diagnostic message at the Warn level.
            </summary>
            <param name="message">A <see langword="string"/> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.Error(System.String)">
            <summary>
            Writes the diagnostic message at the Error level.
            </summary>
            <param name="message">A <see langword="string"/> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.Fatal(System.String)">
            <summary>
            Writes the diagnostic message at the Fatal level.
            </summary>
            <param name="message">A <see langword="string"/> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.IsEnabled(System.String)">
            <summary>
            Checks if the specified log level is enabled.
            </summary>
            <param name="level">The log level.</param>
            <returns>
            A value indicating whether the specified log level is enabled.
            </returns>
        </member>
        <member name="P:NLog.ComInterop.ComLogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether the Trace level is enabled.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.ComInterop.ComLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether the Debug level is enabled.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.ComInterop.ComLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether the Info level is enabled.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.ComInterop.ComLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether the Warn level is enabled.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.ComInterop.ComLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether the Error level is enabled.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.ComInterop.ComLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether the Fatal level is enabled.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.ComInterop.ComLogger.LoggerName">
            <summary>
            Gets or sets the logger name.
            </summary>
            <value></value>
        </member>
        <member name="T:NLog.ComInterop.ComLogManager">
            <summary>
            NLog COM Interop LogManager implementation.
            </summary>
        </member>
        <member name="T:NLog.ComInterop.IComLogManager">
            <summary>
            NLog COM Interop LogManager interface.
            </summary>
        </member>
        <member name="M:NLog.ComInterop.IComLogManager.LoadConfigFromFile(System.String)">
            <summary>
            Loads NLog configuration from the specified file.
            </summary>
            <param name="fileName">The name of the file to load NLog configuration from.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogManager.GetLogger(System.String)">
            <summary>
            Creates the specified logger object and assigns a LoggerName to it.
            </summary>
            <param name="loggerName">Logger name.</param>
            <returns>The new logger instance.</returns>
        </member>
        <member name="P:NLog.ComInterop.IComLogManager.InternalLogToConsole">
            <summary>
            Gets or sets a value indicating whether internal messages should be written to the console.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogManager.InternalLogFile">
            <summary>
            Gets or sets the name of the internal log file.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogManager.InternalLogLevel">
            <summary>
            Gets or sets the name of the internal log level.
            </summary>
        </member>
        <member name="M:NLog.ComInterop.ComLogManager.GetLogger(System.String)">
            <summary>
            Creates the specified logger object and assigns a LoggerName to it.
            </summary>
            <param name="loggerName">The name of the logger.</param>
            <returns>The new logger instance.</returns>
        </member>
        <member name="M:NLog.ComInterop.ComLogManager.LoadConfigFromFile(System.String)">
            <summary>
            Loads NLog configuration from the specified file.
            </summary>
            <param name="fileName">The name of the file to load NLog configuration from.</param>
        </member>
        <member name="P:NLog.ComInterop.ComLogManager.InternalLogToConsole">
            <summary>
            Gets or sets a value indicating whether to log internal messages to the console.
            </summary>
            <value>
            A value of <c>true</c> if internal messages should be logged to the console; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NLog.ComInterop.ComLogManager.InternalLogLevel">
            <summary>
            Gets or sets the name of the internal log level.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.ComInterop.ComLogManager.InternalLogFile">
            <summary>
            Gets or sets the name of the internal log file.
            </summary>
            <value></value>
        </member>
        <member name="T:NLog.Common.AsyncContinuation">
            <summary>
            Asynchronous continuation delegate - function invoked at the end of asynchronous
            processing.
            </summary>
            <param name="exception">Exception during asynchronous processing or null if no exception
            was thrown.</param>
        </member>
        <member name="T:NLog.Common.AsyncHelpers">
            <summary>
            Helpers for asynchronous operations.
            </summary>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.ForEachItemSequentially``1(System.Collections.Generic.IEnumerable{``0},NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction{``0})">
            <summary>
            Iterates over all items in the given collection and runs the specified action
            in sequence (each action executes only after the preceding one has completed without an error).
            </summary>
            <typeparam name="T">Type of each item.</typeparam>
            <param name="items">The items to iterate.</param>
            <param name="asyncContinuation">The asynchronous continuation to invoke once all items
            have been iterated.</param>
            <param name="action">The action to invoke for each item.</param>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.Repeat(System.Int32,NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction)">
            <summary>
            Repeats the specified asynchronous action multiple times and invokes asynchronous continuation at the end.
            </summary>
            <param name="repeatCount">The repeat count.</param>
            <param name="asyncContinuation">The asynchronous continuation to invoke at the end.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.PrecededBy(NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction)">
            <summary>
            Modifies the continuation by pre-pending given action to execute just before it.
            </summary>
            <param name="asyncContinuation">The async continuation.</param>
            <param name="action">The action to pre-pend.</param>
            <returns>Continuation which will execute the given action before forwarding to the actual continuation.</returns>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.WithTimeout(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Attaches a timeout to a continuation which will invoke the continuation when the specified
            timeout has elapsed.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">The timeout.</param>
            <returns>Wrapped continuation.</returns>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.ForEachItemInParallel``1(System.Collections.Generic.IEnumerable{``0},NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction{``0})">
            <summary>
            Iterates over all items in the given collection and runs the specified action
            in parallel (each action executes on a thread from thread pool).
            </summary>
            <typeparam name="T">Type of each item.</typeparam>
            <param name="values">The items to iterate.</param>
            <param name="asyncContinuation">The asynchronous continuation to invoke once all items
            have been iterated.</param>
            <param name="action">The action to invoke for each item.</param>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.RunSynchronously(NLog.Common.AsynchronousAction)">
            <summary>
            Runs the specified asynchronous action synchronously (blocks until the continuation has
            been invoked).
            </summary>
            <param name="action">The action.</param>
            <remarks>
            Using this method is not recommended because it will block the calling thread.
            </remarks>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.PreventMultipleCalls(NLog.Common.AsyncContinuation)">
            <summary>
            Wraps the continuation with a guard which will only make sure that the continuation function
            is invoked only once.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <returns>Wrapped asynchronous continuation.</returns>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.GetCombinedException(System.Collections.Generic.IList{System.Exception})">
            <summary>
            Gets the combined exception from all exceptions in the list.
            </summary>
            <param name="exceptions">The exceptions.</param>
            <returns>Combined exception or null if no exception was thrown.</returns>
        </member>
        <member name="T:NLog.Common.AsynchronousAction">
            <summary>
            Asynchronous action.
            </summary>
            <param name="asyncContinuation">Continuation to be invoked at the end of action.</param>
        </member>
        <member name="T:NLog.Common.AsynchronousAction`1">
            <summary>
            Asynchronous action with one argument.
            </summary>
            <typeparam name="T">Type of the argument.</typeparam>
            <param name="argument">Argument to the action.</param>
            <param name="asyncContinuation">Continuation to be invoked at the end of action.</param>
        </member>
        <member name="T:NLog.Common.AsyncLogEventInfo">
            <summary>
            Represents the logging event with asynchronous continuation.
            </summary>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.#ctor(NLog.LogEventInfo,NLog.Common.AsyncContinuation)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Common.AsyncLogEventInfo"/> struct.
            </summary>
            <param name="logEvent">The log event.</param>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.op_Equality(NLog.Common.AsyncLogEventInfo,NLog.Common.AsyncLogEventInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="eventInfo1">The event info1.</param>
            <param name="eventInfo2">The event info2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.op_Inequality(NLog.Common.AsyncLogEventInfo,NLog.Common.AsyncLogEventInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="eventInfo1">The event info1.</param>
            <param name="eventInfo2">The event info2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            A value of <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:NLog.Common.AsyncLogEventInfo.LogEvent">
            <summary>
            Gets the log event.
            </summary>
        </member>
        <member name="P:NLog.Common.AsyncLogEventInfo.Continuation">
            <summary>
            Gets the continuation.
            </summary>
        </member>
        <member name="T:NLog.Common.InternalLogger">
            <summary>
            NLog internal logger.
            </summary>
        </member>
        <member name="M:NLog.Common.InternalLogger.#cctor">
            <summary>
            Initializes static members of the InternalLogger class.
            </summary>
        </member>
        <member name="M:NLog.Common.InternalLogger.Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Logs the specified message at the specified level.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Log(NLog.LogLevel,System.String)">
            <summary>
            Logs the specified message at the specified level.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Trace(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Trace level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Trace(System.String)">
            <summary>
            Logs the specified message at the Trace level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Debug level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Debug(System.String)">
            <summary>
            Logs the specified message at the Debug level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Info(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Info level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Info(System.String)">
            <summary>
            Logs the specified message at the Info level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Warn(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Warn level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Warn(System.String)">
            <summary>
            Logs the specified message at the Warn level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Error(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Error level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Error(System.String)">
            <summary>
            Logs the specified message at the Error level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Fatal(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Fatal level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Fatal(System.String)">
            <summary>
            Logs the specified message at the Fatal level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogLevel">
            <summary>
            Gets or sets the internal log level.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogToConsole">
            <summary>
            Gets or sets a value indicating whether internal messages should be written to the console output stream.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogToConsoleError">
            <summary>
            Gets or sets a value indicating whether internal messages should be written to the console error stream.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogFile">
            <summary>
            Gets or sets the name of the internal log file.
            </summary>
            <remarks>A value of <see langword="null" /> value disables internal logging to a file.</remarks>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogWriter">
            <summary>
            Gets or sets the text writer that will receive internal logs.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IncludeTimestamp">
            <summary>
            Gets or sets a value indicating whether timestamp should be included in internal log output.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether internal log includes Trace messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether internal log includes Debug messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether internal log includes Info messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether internal log includes Warn messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether internal log includes Error messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether internal log includes Fatal messages.
            </summary>
        </member>
        <member name="T:NLog.Common.LogEventInfoBuffer">
            <summary>
            A cyclic buffer of <see cref="T:NLog.LogEventInfo"/> object.
            </summary>
        </member>
        <member name="M:NLog.Common.LogEventInfoBuffer.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Common.LogEventInfoBuffer"/> class.
            </summary>
            <param name="size">Buffer size.</param>
            <param name="growAsNeeded">Whether buffer should grow as it becomes full.</param>
            <param name="growLimit">The maximum number of items that the buffer can grow to.</param>
        </member>
        <member name="M:NLog.Common.LogEventInfoBuffer.Append(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the specified log event to the buffer.
            </summary>
            <param name="eventInfo">Log event.</param>
            <returns>The number of items in the buffer.</returns>
        </member>
        <member name="M:NLog.Common.LogEventInfoBuffer.GetEventsAndClear">
            <summary>
            Gets the array of events accumulated in the buffer and clears the buffer as one atomic operation.
            </summary>
            <returns>Events in the buffer.</returns>
        </member>
        <member name="P:NLog.Common.LogEventInfoBuffer.Size">
            <summary>
            Gets the number of items in the array.
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionAndExpression">
            <summary>
            Condition <b>and</b> expression.
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionExpression">
            <summary>
            Base class for representing nodes in condition expression trees.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.op_Implicit(System.String)~NLog.Conditions.ConditionExpression">
            <summary>
            Converts condition text to a condition expression tree.
            </summary>
            <param name="conditionExpressionText">Condition text to be converted.</param>
            <returns>Condition expression tree.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.Evaluate(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionAndExpression"/> class.
            </summary>
            <param name="left">Left hand side of the AND expression.</param>
            <param name="right">Right hand side of the AND expression.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>A concatenated '(Left) and (Right)' string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by evaluating <see cref="P:NLog.Conditions.ConditionAndExpression.Left"/> and <see cref="P:NLog.Conditions.ConditionAndExpression.Right"/> recursively.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The value of the conjunction operator.</returns>
        </member>
        <member name="P:NLog.Conditions.ConditionAndExpression.Left">
            <summary>
            Gets the left hand side of the AND expression.
            </summary>
        </member>
        <member name="P:NLog.Conditions.ConditionAndExpression.Right">
            <summary>
            Gets the right hand side of the AND expression.
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionEvaluationException">
            <summary>
            Exception during evaluation of condition expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException"/> class.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.Conditions.ConditionLayoutExpression">
            <summary>
            Condition layout expression (represented by a string literal
            with embedded ${}).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.#ctor(NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionLayoutExpression"/> class.
            </summary>
            <param name="layout">The layout.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>String literal in single quotes.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by calculating the value
            of the layout in the specified evaluation context.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The value of the layout.</returns>
        </member>
        <member name="P:NLog.Conditions.ConditionLayoutExpression.Layout">
            <summary>
            Gets the layout.
            </summary>
            <value>The layout.</value>
        </member>
        <member name="T:NLog.Conditions.ConditionLevelExpression">
            <summary>
            Condition level expression (represented by the <b>level</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLevelExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>The '<b>level</b>' string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLevelExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates to the current log level.
            </summary>
            <param name="context">Evaluation context. Ignored.</param>
            <returns>The <see cref="T:NLog.LogLevel"/> object representing current log level.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionLiteralExpression">
            <summary>
            Condition literal expression (numeric, <b>LogLevel.XXX</b>, <b>true</b> or <b>false</b>).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionLiteralExpression"/> class.
            </summary>
            <param name="literalValue">Literal value.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>The literal value.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The literal value as passed in the constructor.</returns>
        </member>
        <member name="P:NLog.Conditions.ConditionLiteralExpression.LiteralValue">
            <summary>
            Gets the literal value.
            </summary>
            <value>The literal value.</value>
        </member>
        <member name="T:NLog.Conditions.ConditionLoggerNameExpression">
            <summary>
            Condition logger name expression (represented by the <b>logger</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLoggerNameExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>A <b>logger</b> string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLoggerNameExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates to the logger name.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The logger name.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMessageExpression">
            <summary>
            Condition message expression (represented by the <b>message</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMessageExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>The '<b>message</b>' string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMessageExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates to the logger message.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The logger message.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMethodAttribute">
            <summary>
            Marks class as a log event Condition and assigns a name to it.
            </summary>
        </member>
        <member name="T:NLog.Config.NameBaseAttribute">
            <summary>
            Attaches a simple name to an item (such as <see cref="T:NLog.Targets.Target"/>, 
            <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/>, <see cref="T:NLog.Layouts.Layout"/>, etc.).
            </summary>
        </member>
        <member name="M:NLog.Config.NameBaseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NameBaseAttribute"/> class.
            </summary>
            <param name="name">The name of the item.</param>
        </member>
        <member name="P:NLog.Config.NameBaseAttribute.Name">
            <summary>
            Gets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionMethodAttribute"/> class.
            </summary>
            <param name="name">Condition method name.</param>
        </member>
        <member name="T:NLog.Conditions.ConditionMethodExpression">
            <summary>
            Condition method invocation expression (represented by <b>method(p1,p2,p3)</b> syntax).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodExpression.#ctor(System.String,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{NLog.Conditions.ConditionExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionMethodExpression"/> class.
            </summary>
            <param name="conditionMethodName">Name of the condition method.</param>
            <param name="methodInfo"><see cref="P:NLog.Conditions.ConditionMethodExpression.MethodInfo"/> of the condition method.</param>
            <param name="methodParameters">The method parameters.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="P:NLog.Conditions.ConditionMethodExpression.MethodInfo">
            <summary>
            Gets the method info.
            </summary>
        </member>
        <member name="P:NLog.Conditions.ConditionMethodExpression.MethodParameters">
            <summary>
            Gets the method parameters.
            </summary>
            <value>The method parameters.</value>
        </member>
        <member name="T:NLog.Conditions.ConditionMethods">
            <summary>
            A bunch of utility methods (mostly predicates) which can be used in
            condition expressions. Parially inspired by XPath 1.0.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Equals2(System.Object,System.Object)">
            <summary>
            Compares two values for equality.
            </summary>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns><b>true</b> when two objects are equal, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Contains(System.String,System.String)">
            <summary>
            Gets or sets a value indicating whether the second string is a substring of the first one.
            </summary>
            <param name="haystack">The first string.</param>
            <param name="needle">The second string.</param>
            <returns><b>true</b> when the second string is a substring of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.StartsWith(System.String,System.String)">
            <summary>
            Gets or sets a value indicating whether the second string is a prefix of the first one.
            </summary>
            <param name="haystack">The first string.</param>
            <param name="needle">The second string.</param>
            <returns><b>true</b> when the second string is a prefix of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.EndsWith(System.String,System.String)">
            <summary>
            Gets or sets a value indicating whether the second string is a suffix of the first one.
            </summary>
            <param name="haystack">The first string.</param>
            <param name="needle">The second string.</param>
            <returns><b>true</b> when the second string is a prefix of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Length(System.String)">
            <summary>
            Returns the length of a string.
            </summary>
            <param name="text">A string whose lengths is to be evaluated.</param>
            <returns>The length of the string.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMethodsAttribute">
            <summary>
            Marks the class as containing condition methods.
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionNotExpression">
            <summary>
            Condition <b>not</b> expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionNotExpression.#ctor(NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionNotExpression"/> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionNotExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionNotExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="P:NLog.Conditions.ConditionNotExpression.Expression">
            <summary>
            Gets the expression to be negated.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="T:NLog.Conditions.ConditionOrExpression">
            <summary>
            Condition <b>or</b> expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionOrExpression"/> class.
            </summary>
            <param name="left">Left hand side of the OR expression.</param>
            <param name="right">Right hand side of the OR expression.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by evaluating <see cref="P:NLog.Conditions.ConditionOrExpression.LeftExpression"/> and <see cref="P:NLog.Conditions.ConditionOrExpression.RightExpression"/> recursively.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The value of the alternative operator.</returns>
        </member>
        <member name="P:NLog.Conditions.ConditionOrExpression.LeftExpression">
            <summary>
            Gets the left expression.
            </summary>
            <value>The left expression.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionOrExpression.RightExpression">
            <summary>
            Gets the right expression.
            </summary>
            <value>The right expression.</value>
        </member>
        <member name="T:NLog.Conditions.ConditionParseException">
            <summary>
            Exception during parsing of condition expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException"/> class.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.Conditions.ConditionParser">
            <summary>
            Condition parser. Turns a string representation of condition expression
            into an expression tree.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.#ctor(NLog.Internal.SimpleStringReader,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParser"/> class.
            </summary>
            <param name="stringReader">The string reader.</param>
            <param name="configurationItemFactory">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory"/> used to resolve references to condition methods and layout renderers.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.ParseExpression(System.String)">
            <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression"/> tree.
            </summary>
            <param name="expressionText">The expression to be parsed.</param>
            <returns>The root of the expression syntax tree which can be used to get the value of the condition in a specified context.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.ParseExpression(System.String,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression"/> tree.
            </summary>
            <param name="expressionText">The expression to be parsed.</param>
            <param name="configurationItemFactories">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory"/> used to resolve references to condition methods and layout renderers.</param>
            <returns>The root of the expression syntax tree which can be used to get the value of the condition in a specified context.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.ParseExpression(NLog.Internal.SimpleStringReader,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression"/> tree.
            </summary>
            <param name="stringReader">The string reader.</param>
            <param name="configurationItemFactories">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory"/> used to resolve references to condition methods and layout renderers.</param>
            <returns>
            The root of the expression syntax tree which can be used to get the value of the condition in a specified context.
            </returns>
        </member>
        <member name="T:NLog.Conditions.ConditionRelationalExpression">
            <summary>
            Condition relational (<b>==</b>, <b>!=</b>, <b>&lt;</b>, <b>&lt;=</b>,
            <b>&gt;</b> or <b>&gt;=</b>) expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionRelationalOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionRelationalExpression"/> class.
            </summary>
            <param name="leftExpression">The left expression.</param>
            <param name="rightExpression">The right expression.</param>
            <param name="relationalOperator">The relational operator.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.Compare(System.Object,System.Object,NLog.Conditions.ConditionRelationalOperator)">
            <summary>
            Compares the specified values using specified relational operator.
            </summary>
            <param name="leftValue">The first value.</param>
            <param name="rightValue">The second value.</param>
            <param name="relationalOperator">The relational operator.</param>
            <returns>Result of the given relational operator.</returns>
        </member>
        <member name="P:NLog.Conditions.ConditionRelationalExpression.LeftExpression">
            <summary>
            Gets the left expression.
            </summary>
            <value>The left expression.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionRelationalExpression.RightExpression">
            <summary>
            Gets the right expression.
            </summary>
            <value>The right expression.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionRelationalExpression.RelationalOperator">
            <summary>
            Gets the relational operator.
            </summary>
            <value>The operator.</value>
        </member>
        <member name="T:NLog.Conditions.ConditionRelationalOperator">
            <summary>
            Relational operators used in conditions.
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Equal">
            <summary>
            Equality (==).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.NotEqual">
            <summary>
            Inequality (!=).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Less">
            <summary>
            Less than (&lt;).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Greater">
            <summary>
            Greater than (&gt;).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.LessOrEqual">
            <summary>
            Less than or equal (&lt;=).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.GreaterOrEqual">
            <summary>
            Greater than or equal (&gt;=).
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionTokenizer">
            <summary>
            Hand-written tokenizer for conditions.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.#ctor(NLog.Internal.SimpleStringReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionTokenizer"/> class.
            </summary>
            <param name="stringReader">The string reader.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.Expect(NLog.Conditions.ConditionTokenType)">
            <summary>
            Asserts current token type and advances to the next token.
            </summary>
            <param name="tokenType">Expected token type.</param>
            <remarks>If token type doesn't match, an exception is thrown.</remarks>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.EatKeyword">
            <summary>
            Asserts that current token is a keyword and returns its value and advances to the next token.
            </summary>
            <returns>Keyword value.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsKeyword(System.String)">
            <summary>
            Gets or sets a value indicating whether current keyword is equal to the specified value.
            </summary>
            <param name="keyword">The keyword.</param>
            <returns>
            A value of <c>true</c> if current keyword is equal to the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsEOF">
            <summary>
            Gets or sets a value indicating whether the tokenizer has reached the end of the token stream.
            </summary>
            <returns>
            A value of <c>true</c> if the tokenizer has reached the end of the token stream; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsNumber">
            <summary>
            Gets or sets a value indicating whether current token is a number.
            </summary>
            <returns>
            A value of <c>true</c> if current token is a number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsToken(NLog.Conditions.ConditionTokenType)">
            <summary>
            Gets or sets a value indicating whether the specified token is of specified type.
            </summary>
            <param name="tokenType">The token type.</param>
            <returns>
            A value of <c>true</c> if current token is of specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.GetNextToken">
            <summary>
            Gets the next token and sets <see cref="P:NLog.Conditions.ConditionTokenizer.TokenType"/> and <see cref="P:NLog.Conditions.ConditionTokenizer.TokenValue"/> properties.
            </summary>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.TokenPosition">
            <summary>
            Gets the token position.
            </summary>
            <value>The token position.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.TokenType">
            <summary>
            Gets the type of the token.
            </summary>
            <value>The type of the token.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.TokenValue">
            <summary>
            Gets the token value.
            </summary>
            <value>The token value.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.StringTokenValue">
            <summary>
            Gets the value of a string token.
            </summary>
            <value>The string token value.</value>
        </member>
        <member name="T:NLog.Conditions.ConditionTokenizer.CharToTokenType">
            <summary>
            Mapping between characters and token types for punctuations.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.CharToTokenType.#ctor(System.Char,NLog.Conditions.ConditionTokenType)">
            <summary>
            Initializes a new instance of the CharToTokenType struct.
            </summary>
            <param name="character">The character.</param>
            <param name="tokenType">Type of the token.</param>
        </member>
        <member name="T:NLog.Conditions.ConditionTokenType">
            <summary>
            Token types for condition expressions.
            </summary>
        </member>
        <member name="T:NLog.Config.AdvancedAttribute">
            <summary>
            Marks the class or a member as advanced. Advanced classes and members are hidden by 
            default in generated documentation.
            </summary>
        </member>
        <member name="M:NLog.Config.AdvancedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.AdvancedAttribute"/> class.
            </summary>
        </member>
        <member name="T:NLog.Config.AppDomainFixedOutputAttribute">
            <summary>
            Identifies that the output of layout or layout render does not change for the lifetime of the current appdomain.
            </summary>
        </member>
        <member name="T:NLog.Config.ArrayParameterAttribute">
            <summary>
            Used to mark configurable parameters which are arrays. 
            Specifies the mapping between XML elements and .NET types.
            </summary>
        </member>
        <member name="M:NLog.Config.ArrayParameterAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.ArrayParameterAttribute"/> class.
            </summary>
            <param name="itemType">The type of the array item.</param>
            <param name="elementName">The XML element name that represents the item.</param>
        </member>
        <member name="P:NLog.Config.ArrayParameterAttribute.ItemType">
            <summary>
            Gets the .NET type of the array item.
            </summary>
        </member>
        <member name="P:NLog.Config.ArrayParameterAttribute.ElementName">
            <summary>
            Gets the XML element name.
            </summary>
        </member>
        <member name="T:NLog.Config.ConfigSectionHandler">
            <summary>
            NLog configuration section handler class for configuring NLog from App.config.
            </summary>
        </member>
        <member name="M:NLog.Config.ConfigSectionHandler.System#Configuration#IConfigurationSectionHandler#Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:NLog.Config.ConfigurationItemCreator">
            <summary>
            Constructs a new instance the configuration item (target, layout, layout renderer, etc.) given its type.
            </summary>
            <param name="itemType">Type of the item.</param>
            <returns>Created object of the specified type.</returns>
        </member>
        <member name="T:NLog.Config.ConfigurationItemFactory">
            <summary>
            Provides registration information for named items (targets, layouts, layout renderers, etc.) managed by NLog.
            </summary>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.#cctor">
            <summary>
            Initializes static members of the <see cref="T:NLog.Config.ConfigurationItemFactory"/> class.
            </summary>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.#ctor(System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.ConfigurationItemFactory"/> class.
            </summary>
            <param name="assemblies">The assemblies to scan for named items.</param>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.RegisterItemsFromAssembly(System.Reflection.Assembly)">
            <summary>
            Registers named items from the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.RegisterItemsFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Registers named items from the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="itemNamePrefix">Item name prefix.</param>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.Clear">
            <summary>
            Clears the contents of all factories.
            </summary>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.RegisterType(System.Type,System.String)">
            <summary>
            Registers the type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="itemNamePrefix">The item name prefix.</param>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.BuildDefaultFactory">
            <summary>
            Builds the default configuration item factory.
            </summary>
            <returns>Default factory.</returns>
        </member>
        <member name="M:NLog.Config.ConfigurationItemFactory.RegisterExtendedItems">
            <summary>
            Registers items in NLog.Extended.dll using late-bound types, so that we don't need a reference to NLog.Extended.dll.
            </summary>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.Default">
            <summary>
            Gets or sets default singleton instance of <see cref="T:NLog.Config.ConfigurationItemFactory"/>.
            </summary>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.CreateInstance">
            <summary>
            Gets or sets the creator delegate used to instantiate configuration objects.
            </summary>
            <remarks>
            By overriding this property, one can enable dependency injection or interception for created objects.
            </remarks>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.Targets">
            <summary>
            Gets the <see cref="T:NLog.Targets.Target"/> factory.
            </summary>
            <value>The target factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.Filters">
            <summary>
            Gets the <see cref="T:NLog.Filters.Filter"/> factory.
            </summary>
            <value>The filter factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.LayoutRenderers">
            <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/> factory.
            </summary>
            <value>The layout renderer factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.Layouts">
            <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/> factory.
            </summary>
            <value>The layout factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.AmbientProperties">
            <summary>
            Gets the ambient property factory.
            </summary>
            <value>The ambient property factory.</value>
        </member>
        <member name="P:NLog.Config.ConfigurationItemFactory.ConditionMethods">
            <summary>
            Gets the condition method factory.
            </summary>
            <value>The condition method factory.</value>
        </member>
        <member name="T:NLog.Config.DefaultParameterAttribute">
            <summary>
            Attribute used to mark the default parameters for layout renderers.
            </summary>
        </member>
        <member name="M:NLog.Config.DefaultParameterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.DefaultParameterAttribute"/> class.
            </summary>
        </member>
        <member name="T:NLog.Config.Factory`2">
            <summary>
            Factory for class-based items.
            </summary>
            <typeparam name="TBaseType">The base type of each item.</typeparam>
            <typeparam name="TAttributeType">The type of the attribute used to annotate itemss.</typeparam>
        </member>
        <member name="T:NLog.Config.INamedItemFactory`2">
            <summary>
            Represents a factory of named items (such as targets, layouts, layout renderers, etc.).
            </summary>
            <typeparam name="TInstanceType">Base type for each item instance.</typeparam>
            <typeparam name="TDefinitionType">Item definition type (typically <see cref="T:System.Type"/> or <see cref="T:System.Reflection.MethodInfo"/>).</typeparam>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.RegisterDefinition(System.String,`1)">
            <summary>
            Registers new item definition.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="itemDefinition">Item definition.</param>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.TryGetDefinition(System.String,`1@)">
            <summary>
            Tries to get registed item definition.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">Reference to a variable which will store the item definition.</param>
            <returns>Item definition.</returns>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.CreateInstance(System.String)">
            <summary>
            Creates item instance.
            </summary>
            <param name="itemName">Name of the item.</param>
            <returns>Newly created item instance.</returns>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.TryCreateInstance(System.String,`0@)">
            <summary>
            Tries to create an item instance.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">The result.</param>
            <returns>True if instance was created successfully, false otherwise.</returns>
        </member>
        <member name="T:NLog.Config.IFactory">
            <summary>
            Provides means to populate factories of named items (such as targets, layouts, layout renderers, etc.).
            </summary>
        </member>
        <member name="M:NLog.Config.Factory`2.ScanAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Scans the assembly.
            </summary>
            <param name="theAssembly">The assembly.</param>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.RegisterType(System.Type,System.String)">
            <summary>
            Registers the type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="itemNamePrefix">The item name prefix.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.RegisterNamedType(System.String,System.String)">
            <summary>
            Registers the item based on a type name.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.Clear">
            <summary>
            Clears the contents of the factory.
            </summary>
        </member>
        <member name="M:NLog.Config.Factory`2.RegisterDefinition(System.String,System.Type)">
            <summary>
            Registers a single type definition.
            </summary>
            <param name="name">The item name.</param>
            <param name="type">The type of the item.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.TryGetDefinition(System.String,System.Type@)">
            <summary>
            Tries to get registed item definition.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">Reference to a variable which will store the item definition.</param>
            <returns>Item definition.</returns>
        </member>
        <member name="M:NLog.Config.Factory`2.TryCreateInstance(System.String,`0@)">
            <summary>
            Tries to create an item instance.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">The result.</param>
            <returns>True if instance was created successfully, false otherwise.</returns>
        </member>
        <member name="M:NLog.Config.Factory`2.CreateInstance(System.String)">
            <summary>
            Creates an item instance.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>Created item.</returns>
        </member>
        <member name="T:NLog.Config.IInstallable">
            <summary>
            Implemented by objects which support installation and uninstallation.
            </summary>
        </member>
        <member name="M:NLog.Config.IInstallable.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Config.IInstallable.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Config.IInstallable.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="T:NLog.Config.InstallationContext">
            <summary>
            Provides context for install/uninstall operations.
            </summary>
        </member>
        <member name="F:NLog.Config.InstallationContext.logLevel2ConsoleColor">
            <summary>
            Mapping between log levels and console output colors.
            </summary>
        </member>
        <member name="M:NLog.Config.InstallationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.InstallationContext"/> class.
            </summary>
        </member>
        <member name="M:NLog.Config.InstallationContext.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.InstallationContext"/> class.
            </summary>
            <param name="logOutput">The log output.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Trace(System.String,System.Object[])">
            <summary>
            Logs the specified trace message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified debug message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Info(System.String,System.Object[])">
            <summary>
            Logs the specified informational message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Warning(System.String,System.Object[])">
            <summary>
            Logs the specified warning message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Error(System.String,System.Object[])">
            <summary>
            Logs the specified error message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Config.InstallationContext.CreateLogEvent">
            <summary>
            Creates the log event which can be used to render layouts during installation/uninstallations.
            </summary>
            <returns>Log event info object.</returns>
        </member>
        <member name="P:NLog.Config.InstallationContext.LogLevel">
            <summary>
            Gets or sets the installation log level.
            </summary>
        </member>
        <member name="P:NLog.Config.InstallationContext.IgnoreFailures">
            <summary>
            Gets or sets a value indicating whether to ignore failures during installation.
            </summary>
        </member>
        <member name="P:NLog.Config.InstallationContext.Parameters">
            <summary>
            Gets the installation parameters.
            </summary>
        </member>
        <member name="P:NLog.Config.InstallationContext.LogOutput">
            <summary>
            Gets or sets the log output.
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingConfiguration">
            <summary>
            Keeps logging configuration and provides simple API
            to modify it.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfiguration"/> class.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddTarget(System.String,NLog.Targets.Target)">
            <summary>
            Registers the specified target object under a given name.
            </summary>
            <param name="name">
            Name of the target.
            </param>
            <param name="target">
            The target object.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.FindTargetByName(System.String)">
            <summary>
            Finds the target with the specified name.
            </summary>
            <param name="name">
            The name of the target to be found.
            </param>
            <returns>
            Found target or <see langword="null"/> when the target is not found.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Reload">
            <summary>
            Called by LogManager when one of the log configuration files changes.
            </summary>
            <returns>
            A new instance of <see cref="T:NLog.Config.LoggingConfiguration"/> that represents the updated configuration.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.RemoveTarget(System.String)">
            <summary>
            Removes the specified named target.
            </summary>
            <param name="name">
            Name of the target.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Install(NLog.Config.InstallationContext)">
            <summary>
            Installs target-specific objects on current system.
            </summary>
            <param name="installationContext">The installation context.</param>
            <remarks>
            Installation typically runs with administrative permissions.
            </remarks>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Uninstalls target-specific objects from current system.
            </summary>
            <param name="installationContext">The installation context.</param>
            <remarks>
            Uninstallation typically runs with administrative permissions.
            </remarks>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Close">
            <summary>
            Closes all targets and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.FlushAllTargets(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes any pending log messages on all appenders.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.ValidateConfig">
            <summary>
            Validates the configuration.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.ConfiguredNamedTargets">
            <summary>
            Gets a collection of named targets specified in the configuration.
            </summary>
            <returns>
            A list of named targets.
            </returns>
            <remarks>
            Unnamed targets (such as those wrapped by other targets) are not returned.
            </remarks>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.FileNamesToWatch">
            <summary>
            Gets the collection of file names which should be watched for changes by NLog.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.LoggingRules">
            <summary>
            Gets the collection of logging rules.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.AllTargets">
            <summary>
            Gets all targets.
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingConfigurationChangedEventArgs">
            <summary>
            Arguments for <see cref="E:NLog.LogFactory.ConfigurationChanged"/> events.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfigurationChangedEventArgs.#ctor(NLog.Config.LoggingConfiguration,NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfigurationChangedEventArgs"/> class.
            </summary>
            <param name="oldConfiguration">The old configuration.</param>
            <param name="newConfiguration">The new configuration.</param>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationChangedEventArgs.OldConfiguration">
            <summary>
            Gets the old configuration.
            </summary>
            <value>The old configuration.</value>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationChangedEventArgs.NewConfiguration">
            <summary>
            Gets the new configuration.
            </summary>
            <value>The new configuration.</value>
        </member>
        <member name="T:NLog.Config.LoggingConfigurationReloadedEventArgs">
            <summary>
            Arguments for <see cref="E:NLog.LogFactory.ConfigurationReloaded"/>.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfigurationReloadedEventArgs.#ctor(System.Boolean,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfigurationReloadedEventArgs"/> class.
            </summary>
            <param name="succeeded">Whether configuration reload has succeeded.</param>
            <param name="exception">The exception during configuration reload.</param>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationReloadedEventArgs.Succeeded">
            <summary>
            Gets a value indicating whether configuration reload has succeeded.
            </summary>
            <value>A value of <c>true</c> if succeeded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationReloadedEventArgs.Exception">
            <summary>
            Gets the exception which occurred during configuration reload.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:NLog.Config.LoggingRule">
            <summary>
            Represents a logging rule. An equivalent of &lt;logger /&gt; configuration element.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingRule"/> class.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.LogLevel,NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingRule"/> class.
            </summary>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="minLevel">Minimum log level needed to trigger this rule.</param>
            <param name="target">Target to be written to when the rule matches.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingRule"/> class.
            </summary>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="target">Target to be written to when the rule matches.</param>
            <remarks>By default no logging levels are defined. You should call <see cref="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)"/> and <see cref="M:NLog.Config.LoggingRule.DisableLoggingForLevel(NLog.LogLevel)"/> to set them.</remarks>
        </member>
        <member name="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)">
            <summary>
            Enables logging for a particular level.
            </summary>
            <param name="level">Level to be enabled.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.DisableLoggingForLevel(NLog.LogLevel)">
            <summary>
            Disables logging for a particular level.
            </summary>
            <param name="level">Level to be disabled.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.ToString">
            <summary>
            Returns a string representation of <see cref="T:NLog.Config.LoggingRule"/>. Used for debugging.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingRule.IsLoggingEnabledForLevel(NLog.LogLevel)">
            <summary>
            Checks whether te particular log level is enabled for this rule.
            </summary>
            <param name="level">Level to be checked.</param>
            <returns>A value of <see langword="true"/> when the log level is enabled, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:NLog.Config.LoggingRule.NameMatches(System.String)">
            <summary>
            Checks whether given name matches the logger name pattern.
            </summary>
            <param name="loggerName">String to be matched.</param>
            <returns>A value of <see langword="true"/> when the name matches, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="P:NLog.Config.LoggingRule.Targets">
            <summary>
            Gets a collection of targets that should be written to when this rule matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.ChildRules">
            <summary>
            Gets a collection of child rules to be evaluated when this rule matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.Filters">
            <summary>
            Gets a collection of filters to be checked before writing to targets.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.Final">
            <summary>
            Gets or sets a value indicating whether to quit processing any further rule when this one matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.LoggerNamePattern">
            <summary>
            Gets or sets logger name pattern.
            </summary>
            <remarks>
            Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends but not anywhere else.
            </remarks>
        </member>
        <member name="P:NLog.Config.LoggingRule.Levels">
            <summary>
            Gets the collection of log levels enabled by this rule.
            </summary>
        </member>
        <member name="T:NLog.Config.MethodFactory`2">
            <summary>
            Factory for locating methods.
            </summary>
            <typeparam name="TClassAttributeType">The type of the class marker attribute.</typeparam>
            <typeparam name="TMethodAttributeType">The type of the method marker attribute.</typeparam>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.ScanAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Scans the assembly for classes marked with <typeparamref name="TClassAttributeType"/>
            and methods marked with <typeparamref name="TMethodAttributeType"/> and adds them 
            to the factory.
            </summary>
            <param name="theAssembly">The assembly.</param>
            <param name="prefix">The prefix to use for names.</param>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.RegisterType(System.Type,System.String)">
            <summary>
            Registers the type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="itemNamePrefix">The item name prefix.</param>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.Clear">
            <summary>
            Clears contents of the factory.
            </summary>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.RegisterDefinition(System.String,System.Reflection.MethodInfo)">
            <summary>
            Registers the definition of a single method.
            </summary>
            <param name="name">The method name.</param>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.TryCreateInstance(System.String,System.Reflection.MethodInfo@)">
            <summary>
            Tries to retrieve method by name.
            </summary>
            <param name="name">The method name.</param>
            <param name="result">The result.</param>
            <returns>A value of <c>true</c> if the method was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.CreateInstance(System.String)">
            <summary>
            Retrieves method by name.
            </summary>
            <param name="name">Method name.</param>
            <returns>MethodInfo object.</returns>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.TryGetDefinition(System.String,System.Reflection.MethodInfo@)">
            <summary>
            Tries to get method definition.
            </summary>
            <param name="name">The method .</param>
            <param name="result">The result.</param>
            <returns>A value of <c>true</c> if the method was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:NLog.Config.MethodFactory`2.AllRegisteredItems">
            <summary>
            Gets a collection of all registered items in the factory.
            </summary>
            <returns>
            Sequence of key/value pairs where each key represents the name
            of the item and value is the <see cref="T:System.Reflection.MethodInfo"/> of
            the item.
            </returns>
        </member>
        <member name="T:NLog.Config.NLogConfigurationItemAttribute">
            <summary>
            Marks the object as configuration item for NLog.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogConfigurationItemAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogConfigurationItemAttribute"/> class.
            </summary>
        </member>
        <member name="T:NLog.Config.NLogXmlElement">
            <summary>
            Represents simple XML element with case-insensitive attribute semantics.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogXmlElement"/> class.
            </summary>
            <param name="inputUri">The input URI.</param>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogXmlElement"/> class.
            </summary>
            <param name="reader">The reader to initialize element from.</param>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NLog.Config.NLogXmlElement"/> class from being created.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.Elements(System.String)">
            <summary>
            Returns children elements with the specified element name.
            </summary>
            <param name="elementName">Name of the element.</param>
            <returns>Children elements with the specified element name.</returns>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.GetRequiredAttribute(System.String)">
            <summary>
            Gets the required attribute.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>Attribute value.</returns>
            <remarks>Throws if the attribute is not specified.</remarks>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.GetOptionalBooleanAttribute(System.String,System.Boolean)">
            <summary>
            Gets the optional boolean attribute value.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">Default value to return if the attribute is not found.</param>
            <returns>Boolean attribute value or default.</returns>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.GetOptionalAttribute(System.String,System.String)">
            <summary>
            Gets the optional attribute value.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Value of the attribute or default value.</returns>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.AssertName(System.String[])">
            <summary>
            Asserts that the name of the element is among specified element names.
            </summary>
            <param name="allowedNames">The allowed names.</param>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.LocalName">
            <summary>
            Gets the element name.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.AttributeValues">
            <summary>
            Gets the dictionary of attribute values.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.Children">
            <summary>
            Gets the collection of child elements.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.Value">
            <summary>
            Gets the value of the element.
            </summary>
        </member>
        <member name="T:NLog.Config.RequiredParameterAttribute">
            <summary>
            Attribute used to mark the required parameters for targets,
            layout targets and filters.
            </summary>
        </member>
        <member name="T:NLog.Config.SimpleConfigurator">
            <summary>
            Provides simple programmatic configuration API used for trivial logging cases.
            </summary>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging">
            <summary>
            Configures NLog for console logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info"/> level are output to the console.
            </summary>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging(NLog.LogLevel)">
            <summary>
            Configures NLog for console logging so that all messages above and including
            the specified level are output to the console.
            </summary>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(NLog.Targets.Target)">
            <summary>
            Configures NLog for to log to the specified target so that all messages 
            above and including the <see cref="F:NLog.LogLevel.Info"/> level are output.
            </summary>
            <param name="target">The target to log all messages to.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(NLog.Targets.Target,NLog.LogLevel)">
            <summary>
            Configures NLog for to log to the specified target so that all messages 
            above and including the specified level are output.
            </summary>
            <param name="target">The target to log all messages to.</param>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String)">
            <summary>
            Configures NLog for file logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info"/> level are written to the specified file.
            </summary>
            <param name="fileName">Log file name.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String,NLog.LogLevel)">
            <summary>
            Configures NLog for file logging so that all messages above and including
            the specified level are written to the specified file.
            </summary>
            <param name="fileName">Log file name.</param>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="T:NLog.Config.StackTraceUsage">
            <summary>
            Value indicating how stack trace should be captured when processing the log event.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.None">
            <summary>
            Stack trace should not be captured.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.WithoutSource">
            <summary>
            Stack trace should be captured without source-level information.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.WithSource">
            <summary>
            Stack trace should be captured including source-level information such as line numbers.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.Max">
            <summary>
            Capture maximum amount of the stack trace information supported on the plaform.
            </summary>
        </member>
        <member name="T:NLog.Config.ThreadAgnosticAttribute">
            <summary>
            Marks the layout or layout renderer as producing correct results regardless of the thread
            it's running on.
            </summary>
        </member>
        <member name="T:NLog.Config.XmlLoggingConfiguration">
            <summary>
            A class for configuring NLog through an XML configuration file 
            (App.config style or App.nlog style).
            </summary>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration"/> class.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration"/> class.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration"/> class.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration"/> class.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration"/> class.
            </summary>
            <param name="element">The XML element.</param>
            <param name="fileName">Name of the XML file.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration"/> class.
            </summary>
            <param name="element">The XML element.</param>
            <param name="fileName">Name of the XML file.</param>
            <param name="ignoreErrors">If set to <c>true</c> errors will be ignored during file processing.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.Reload">
            <summary>
            Re-reads the original configuration file and returns the new <see cref="T:NLog.Config.LoggingConfiguration"/> object.
            </summary>
            <returns>The new <see cref="T:NLog.Config.XmlLoggingConfiguration"/> object.</returns>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.Initialize(System.Xml.XmlReader,System.String,System.Boolean)">
            <summary>
            Initializes the configuration.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.AppConfig">
            <summary>
            Gets the default <see cref="T:NLog.Config.LoggingConfiguration"/> object by parsing 
            the application configuration file (<c>app.exe.config</c>).
            </summary>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.AutoReload">
            <summary>
            Gets or sets a value indicating whether the configuration files
            should be watched for changes and reloaded automatically when changed.
            </summary>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.FileNamesToWatch">
            <summary>
            Gets the collection of file names which should be watched for changes by NLog.
            This is the list of configuration files processed.
            If the <c>autoReload</c> attribute is not set it returns empty collection.
            </summary>
        </member>
        <member name="T:NLog.Filters.ConditionBasedFilter">
            <summary>
            Matches when the specified condition is met.
            </summary>
            <remarks>
            Conditions are expressed using a simple language 
            described <a href="conditions.html">here</a>.
            </remarks>
        </member>
        <member name="M:NLog.Filters.ConditionBasedFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="P:NLog.Filters.ConditionBasedFilter.Condition">
            <summary>
            Gets or sets the condition expression.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="T:NLog.Filters.FilterAttribute">
            <summary>
            Marks class as a layout renderer and assigns a name to it.
            </summary>
        </member>
        <member name="M:NLog.Filters.FilterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.FilterAttribute"/> class.
            </summary>
            <param name="name">Name of the filter.</param>
        </member>
        <member name="T:NLog.Filters.FilterResult">
            <summary>
            Filter result.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.Neutral">
            <summary>
            The filter doesn't want to decide whether to log or discard the message.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.Log">
            <summary>
            The message should be logged.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.Ignore">
            <summary>
            The message should not be logged.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.LogFinal">
            <summary>
            The message should be logged and processing should be finished.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.IgnoreFinal">
            <summary>
            The message should not be logged and processing should be finished.
            </summary>
        </member>
        <member name="T:NLog.Filters.LayoutBasedFilter">
            <summary>
            A base class for filters that are based on comparing a value to a layout.
            </summary>
        </member>
        <member name="M:NLog.Filters.LayoutBasedFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.LayoutBasedFilter"/> class.
            </summary>
        </member>
        <member name="P:NLog.Filters.LayoutBasedFilter.Layout">
            <summary>
            Gets or sets the layout to be used to filter log messages.
            </summary>
            <value>The layout.</value>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="T:NLog.Filters.WhenContainsFilter">
            <summary>
            Matches when the calculated layout contains the specified substring. 
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenContainsFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="P:NLog.Filters.WhenContainsFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Filters.WhenContainsFilter.Substring">
            <summary>
            Gets or sets the substring to be matched.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="T:NLog.Filters.WhenEqualFilter">
            <summary>
            Matches when the calculated layout is equal to the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenEqualFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="P:NLog.Filters.WhenEqualFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Filters.WhenEqualFilter.CompareTo">
            <summary>
            Gets or sets a string to compare the layout to.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="T:NLog.Filters.WhenNotContainsFilter">
            <summary>
            Matches when the calculated layout does NOT contain the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotContainsFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="P:NLog.Filters.WhenNotContainsFilter.Substring">
            <summary>
            Gets or sets the substring to be matched.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Filters.WhenNotContainsFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="T:NLog.Filters.WhenNotEqualFilter">
            <summary>
            Matches when the calculated layout is NOT equal to the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotEqualFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.WhenNotEqualFilter"/> class.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotEqualFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.Filters.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.Filters.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.Filters.FilterResult.Log"/> - if the log event should be logged<br/>
            .</returns>
        </member>
        <member name="P:NLog.Filters.WhenNotEqualFilter.CompareTo">
            <summary>
            Gets or sets a string to compare the layout to.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Filters.WhenNotEqualFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="T:NLog.GDC">
            <summary>
            Global Diagnostics Context - used for log4net compatibility.
            </summary>
        </member>
        <member name="M:NLog.GDC.Set(System.String,System.String)">
            <summary>
            Sets the Global Diagnostics Context item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.GDC.Get(System.String)">
            <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The item value of string.Empty if the value is not present.</returns>
        </member>
        <member name="M:NLog.GDC.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread GDC.</returns>
        </member>
        <member name="M:NLog.GDC.Remove(System.String)">
            <summary>
            Removes the specified item from the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.GDC.Clear">
            <summary>
            Clears the content of the GDC.
            </summary>
        </member>
        <member name="T:NLog.GlobalDiagnosticsContext">
            <summary>
            Global Diagnostics Context - a dictionary structure to hold per-application-instance values.
            </summary>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Set(System.String,System.String)">
            <summary>
            Sets the Global Diagnostics Context item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Get(System.String)">
            <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The item value of string.Empty if the value is not present.</returns>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread GDC.</returns>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Remove(System.String)">
            <summary>
            Removes the specified item from the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Clear">
            <summary>
            Clears the content of the GDC.
            </summary>
        </member>
        <member name="T:NLog.Internal.AspHelper">
            <summary>
            Various helper methods for accessing state of ASP application.
            </summary>
        </member>
        <member name="T:NLog.Internal.CurrentTimeGetter">
            <summary>
            Optimized methods to get current time.
            </summary>
        </member>
        <member name="P:NLog.Internal.CurrentTimeGetter.Now">
            <summary>
            Gets the current time in an optimized fashion.
            </summary>
            <value>Current time.</value>
        </member>
        <member name="T:NLog.Internal.DictionaryAdapter`2">
            <summary>
            Provides untyped IDictionary interface on top of generic IDictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the DictionaryAdapter class.
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"/> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"/> to use as the value of the element to add.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"/> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"/> object.</param>
            <returns>
            True if the <see cref="T:System.Collections.IDictionary"/> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"/> object has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"/> object is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <param name="key">Dictionary key.</param>
            <returns>Value corresponding to key or null if not found</returns>
        </member>
        <member name="T:NLog.Internal.DictionaryAdapter`2.MyEnumerator">
            <summary>
            Wrapper IDictionaryEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.DictionaryAdapter`2.MyEnumerator"/> class.
            </summary>
            <param name="wrapped">The wrapped.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            A <see cref="T:System.Collections.DictionaryEntry"/> containing both the key and the value of the current dictionary entry.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            The key of the current element of the enumeration.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            The value of the current element of the enumeration.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NLog.Internal.EnumerableHelpers">
            <summary>
            LINQ-like helpers (cannot use LINQ because we must work with .NET 2.0 profile).
            </summary>
        </member>
        <member name="M:NLog.Internal.EnumerableHelpers.OfType``1(System.Collections.IEnumerable)">
            <summary>
            Filters the given enumerable to return only items of the specified type.
            </summary>
            <typeparam name="T">
            Type of the item.
            </typeparam>
            <param name="enumerable">
            The enumerable.
            </param>
            <returns>
            Items of specified type.
            </returns>
        </member>
        <member name="M:NLog.Internal.EnumerableHelpers.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Reverses the specified enumerable.
            </summary>
            <typeparam name="T">
            Type of enumerable item.
            </typeparam>
            <param name="enumerable">
            The enumerable.
            </param>
            <returns>
            Reversed enumerable.
            </returns>
        </member>
        <member name="M:NLog.Internal.EnumerableHelpers.Any``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines is the given predicate is met by any element of the enumerable.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="predicate">The predicate.</param>
            <returns>True if predicate returns true for any element of the collection, false otherwise.</returns>
        </member>
        <member name="M:NLog.Internal.EnumerableHelpers.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the enumerable to list.
            </summary>
            <typeparam name="T">Type of the list element.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns>List of elements.</returns>
        </member>
        <member name="T:NLog.Internal.EnvironmentHelper">
            <summary>
            Safe way to get environment variables.
            </summary>
        </member>
        <member name="T:NLog.Internal.ExceptionHelper">
            <summary>
            Helper class for dealing with exceptions.
            </summary>
        </member>
        <member name="M:NLog.Internal.ExceptionHelper.MustBeRethrown(System.Exception)">
            <summary>
            Determines whether the exception must be rethrown.
            </summary>
            <param name="exception">The exception.</param>
            <returns>True if the exception must be rethrown, false otherwise.</returns>
        </member>
        <member name="T:NLog.Internal.FactoryHelper">
            <summary>
            Object construction helper.
            </summary>
        </member>
        <member name="T:NLog.Internal.FileAppenders.BaseFileAppender">
            <summary>
            Base class for optimized file appenders.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="createParameters">The create parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
            <summary>
            Gets the file info.
            </summary>
            <param name="lastWriteTime">The last write time.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.FileTouched">
            <summary>
            Records the last write time for a file.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.FileTouched(System.DateTime)">
            <summary>
            Records the last write time for a file to be specific date.
            </summary>
            <param name="dateTime">Date and time when the last write occurred.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.CreateFileStream(System.Boolean)">
            <summary>
            Creates the file stream.
            </summary>
            <param name="allowConcurrentWrite">If set to <c>true</c> allow concurrent writes.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> object which can be used to write to the file.</returns>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.LastWriteTime">
            <summary>
            Gets the last write time.
            </summary>
            <value>The last write time.</value>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.OpenTime">
            <summary>
            Gets the open time of the file.
            </summary>
            <value>The open time.</value>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.CreateFileParameters">
            <summary>
            Gets the file creation parameters.
            </summary>
            <value>The file creation parameters.</value>
        </member>
        <member name="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender">
            <summary>
            Implementation of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which caches 
            file information.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Close">
            <summary>
            Closes this instance of the appender.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Flush">
            <summary>
            Flushes this current appender.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
            <summary>
            Gets the file info.
            </summary>
            <param name="lastWriteTime">The last write time.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes to a file.
            </summary>
            <param name="bytes">The bytes to be written.</param>
        </member>
        <member name="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Factory">
            <summary>
            Factory class which creates <see cref="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender"/> objects.
            </summary>
        </member>
        <member name="T:NLog.Internal.FileAppenders.IFileAppenderFactory">
            <summary>
            Interface implemented by all factories capable of creating file appenders.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.IFileAppenderFactory.Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.</returns>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.ICreateFileParameters">
            <summary>
            Interface that provides parameters for create file function.
            </summary>
        </member>
        <member name="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender">
            <summary>
            Provides a multiprocess-safe atomic file appends while
            keeping the files open.
            </summary>
            <remarks>
            On Unix you can get all the appends to be atomic, even when multiple 
            processes are trying to write to the same file, because setting the file
            pointer to the end of the file and appending can be made one operation.
            On Win32 we need to maintain some synchronization between processes
            (global named mutex is used for this)
            </remarks>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes to be written.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
            <summary>
            Gets the file info.
            </summary>
            <param name="lastWriteTime">The last write time.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>
            True if the operation succeeded, false otherwise.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Factory">
            <summary>
            Factory class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender">
            <summary>
            Multi-process and multi-host file appender which attempts
            to get exclusive write access and retries if it's not available.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
            <summary>
            Gets the file info.
            </summary>
            <param name="lastWriteTime">The last write time.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>
            True if the operation succeeded, false otherwise.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Factory">
            <summary>
            Factory class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.SingleProcessFileAppender">
            <summary>
            Optimized single-process file appender which keeps the file open for exclusive write.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.SingleProcessFileAppender"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
            <summary>
            Gets the file info.
            </summary>
            <param name="lastWriteTime">The last write time.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>
            True if the operation succeeded, false otherwise.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.SingleProcessFileAppender.Factory">
            <summary>
            Factory class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender"/> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileInfoHelper">
            <summary>
            Optimized routines to get the size and last write time of the specified file.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileInfoHelper.#cctor">
            <summary>
            Initializes static members of the FileInfoHelper class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileInfoHelper.GetFileInfo(System.String,System.IntPtr,System.DateTime@,System.Int64@)">
            <summary>
            Gets the information about a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileHandle">The file handle.</param>
            <param name="lastWriteTime">The last write time of the file.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>A value of <c>true</c> if file information was retrieved successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:NLog.Internal.FormHelper">
            <summary>
            Form helper methods.
            </summary>
        </member>
        <member name="M:NLog.Internal.FormHelper.CreateRichTextBox(System.String,System.Windows.Forms.Form)">
            <summary>
            Creates RichTextBox and docks in parentForm.
            </summary>
            <param name="name">Name of RichTextBox.</param>
            <param name="parentForm">Form to dock RichTextBox.</param>
            <returns>Created RichTextBox.</returns>
        </member>
        <member name="M:NLog.Internal.FormHelper.FindControl(System.String,System.Windows.Forms.Control)">
            <summary>
            Finds control embedded on searchControl.
            </summary>
            <param name="name">Name of the control.</param>
            <param name="searchControl">Control in which we're searching for control.</param>
            <returns>A value of null if no control has been found.</returns>
        </member>
        <member name="M:NLog.Internal.FormHelper.FindControl``1(System.String,System.Windows.Forms.Control)">
            <summary>
            Finds control of specified type embended on searchControl.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="name">Name of the control.</param>
            <param name="searchControl">Control in which we're searching for control.</param>
            <returns>
            A value of null if no control has been found.
            </returns>
        </member>
        <member name="M:NLog.Internal.FormHelper.CreateForm(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a form.
            </summary>
            <param name="name">Name of form.</param>
            <param name="width">Width of form.</param>
            <param name="height">Height of form.</param>
            <param name="show">Auto show form.</param>
            <param name="showMinimized">If set to <c>true</c> the form will be minimized.</param>
            <param name="toolWindow">If set to <c>true</c> the form will be created as tool window.</param>
            <returns>Created form.</returns>
        </member>
        <member name="T:NLog.Internal.IRenderable">
            <summary>
            Interface implemented by layouts and layout renderers.
            </summary>
        </member>
        <member name="M:NLog.Internal.IRenderable.Render(NLog.LogEventInfo)">
            <summary>
            Renders the the value of layout or layout renderer in the context of the specified log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>String representation of a layout.</returns>
        </member>
        <member name="T:NLog.Internal.ISmtpClient">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="T:NLog.Internal.IUsesStackTrace">
            <summary>
            Allows components to request stack trace information to be provided in the <see cref="T:NLog.LogEventInfo"/>.
            </summary>
        </member>
        <member name="P:NLog.Internal.IUsesStackTrace.StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
        </member>
        <member name="T:NLog.Internal.LoggerConfiguration">
            <summary>
            Logger configuration.
            </summary>
        </member>
        <member name="M:NLog.Internal.LoggerConfiguration.#ctor(NLog.Internal.TargetWithFilterChain[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.LoggerConfiguration"/> class.
            </summary>
            <param name="targetsByLevel">The targets by level.</param>
        </member>
        <member name="M:NLog.Internal.LoggerConfiguration.GetTargetsForLevel(NLog.LogLevel)">
            <summary>
            Gets targets for the specified level.
            </summary>
            <param name="level">The level.</param>
            <returns>Chain of targets with attached filters.</returns>
        </member>
        <member name="M:NLog.Internal.LoggerConfiguration.IsEnabled(NLog.LogLevel)">
            <summary>
            Determines whether the specified level is enabled.
            </summary>
            <param name="level">The level.</param>
            <returns>
            A value of <c>true</c> if the specified level is enabled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NLog.Internal.MessageBoxHelper">
            <summary>
            Message Box helper.
            </summary>
        </member>
        <member name="M:NLog.Internal.MessageBoxHelper.Show(System.String,System.String)">
            <summary>
            Shows the specified message using platform-specific message box.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
        </member>
        <member name="T:NLog.Internal.MultiFileWatcher">
            <summary>
            Watches multiple files at the same time and raises an event whenever 
            a single change is detected in any of those files.
            </summary>
        </member>
        <member name="M:NLog.Internal.MultiFileWatcher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Internal.MultiFileWatcher.StopWatching">
            <summary>
            Stops the watching.
            </summary>
        </member>
        <member name="M:NLog.Internal.MultiFileWatcher.Watch(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Watches the specified files for changes.
            </summary>
            <param name="fileNames">The file names.</param>
        </member>
        <member name="E:NLog.Internal.MultiFileWatcher.OnChange">
            <summary>
            Occurs when a change is detected in one of the monitored files.
            </summary>
        </member>
        <member name="T:NLog.Internal.MySmtpClient">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="M:NLog.Internal.MySmtpClient.Dispose">
            <summary>
            Sends a QUIT message to the SMTP server, gracefully ends the TCP connection, and releases all resources used by the current instance of the <see cref="T:System.Net.Mail.SmtpClient"/> class.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.HttpNetworkSender">
            <summary>
            Network sender which uses HTTP or HTTPS POST.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.NetworkSender">
            <summary>
            A base class for all network senders. Supports one-way sending of messages
            over various protocols.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.NetworkSender"/> class.
            </summary>
            <param name="url">The network URL.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Finalize">
            <summary>
            Finalizes an instance of the NetworkSender class.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Initialize">
            <summary>
            Initializes this network sender.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Close(NLog.Common.AsyncContinuation)">
            <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes any pending messages and invokes a continuation.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Send(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Send the given text over the specified protocol.
            </summary>
            <param name="bytes">Bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Dispose">
            <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoInitialize">
            <summary>
            Performs sender-specific initialization.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoClose(NLog.Common.AsyncContinuation)">
            <summary>
            Performs sender-specific close operation.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoFlush(NLog.Common.AsyncContinuation)">
            <summary>
            Performs sender-specific flush.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Actually sends the given text over the specified protocol.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.ParseEndpointAddress(System.Uri,System.Net.Sockets.AddressFamily)">
            <summary>
            Parses the URI into an endpoint address.
            </summary>
            <param name="uri">The URI to parse.</param>
            <param name="addressFamily">The address family.</param>
            <returns>Parsed endpoint.</returns>
        </member>
        <member name="P:NLog.Internal.NetworkSenders.NetworkSender.Address">
            <summary>
            Gets the address of the network endpoint.
            </summary>
        </member>
        <member name="P:NLog.Internal.NetworkSenders.NetworkSender.LastSendTime">
            <summary>
            Gets the last send time.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.HttpNetworkSender.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.HttpNetworkSender"/> class.
            </summary>
            <param name="url">The network URL.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.HttpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Actually sends the given text over the specified protocol.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.INetworkSenderFactory">
            <summary>
            Creates instances of <see cref="T:NLog.Internal.NetworkSenders.NetworkSender"/> objects for given URLs.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.INetworkSenderFactory.Create(System.String)">
            <summary>
            Creates a new instance of the network sender based on a network URL.
            </summary>
            <param name="url">
            URL that determines the network sender to be created.
            </param>
            <returns>
            A newly created network sender.
            </returns>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.ISocket">
            <summary>
            Interface for mocking socket calls.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.NetworkSenderFactory">
            <summary>
            Default implementation of <see cref="T:NLog.Internal.NetworkSenders.INetworkSenderFactory"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSenderFactory.Create(System.String)">
            <summary>
            Creates a new instance of the network sender based on a network URL:.
            </summary>
            <param name="url">
            URL that determines the network sender to be created.
            </param>
            <returns>
            A newly created network sender.
            </returns>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.SocketProxy">
            <summary>
            Socket proxy for mocking Socket code.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.SocketProxy"/> class.
            </summary>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.Close">
            <summary>
            Closes the wrapped socket.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Invokes ConnectAsync method on the wrapped socket.
            </summary>
            <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instance containing the event data.</param>
            <returns>Result of original method.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Invokes SendAsync method on the wrapped socket.
            </summary>
            <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instance containing the event data.</param>
            <returns>Result of original method.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Invokes SendToAsync method on the wrapped socket.
            </summary>
            <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instance containing the event data.</param>
            <returns>Result of original method.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.TcpNetworkSender">
            <summary>
            Sends messages over a TCP network connection.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.#ctor(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.TcpNetworkSender"/> class.
            </summary>
            <param name="url">URL. Must start with tcp://.</param>
            <param name="addressFamily">The address family.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.CreateSocket(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates the socket with given parameters. 
            </summary>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
            <returns>Instance of <see cref="T:NLog.Internal.NetworkSenders.ISocket"/> which represents the socket.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoInitialize">
            <summary>
            Performs sender-specific initialization.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoClose(NLog.Common.AsyncContinuation)">
            <summary>
            Closes the socket.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoFlush(NLog.Common.AsyncContinuation)">
            <summary>
            Performs sender-specific flush.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Sends the specified text over the connected socket.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.TcpNetworkSender.MySocketAsyncEventArgs">
            <summary>
            Facilitates mocking of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> class.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.MySocketAsyncEventArgs.RaiseCompleted">
            <summary>
            Raises the Completed event.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.UdpNetworkSender">
            <summary>
            Sends messages over the network as UDP datagrams.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.#ctor(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.UdpNetworkSender"/> class.
            </summary>
            <param name="url">URL. Must start with udp://.</param>
            <param name="addressFamily">The address family.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.CreateSocket(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates the socket.
            </summary>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
            <returns>Implementation of <see cref="T:NLog.Internal.NetworkSenders.ISocket"/> to use.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoInitialize">
            <summary>
            Performs sender-specific initialization.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoClose(NLog.Common.AsyncContinuation)">
            <summary>
            Closes the socket.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Sends the specified text as a UDP datagram.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="T:NLog.Internal.ObjectGraphScanner">
            <summary>
            Scans (breadth-first) the object graph following all the edges whose are 
            instances have <see cref="T:NLog.Config.NLogConfigurationItemAttribute"/> attached and returns 
            all objects implementing a specified interfaces.
            </summary>
        </member>
        <member name="M:NLog.Internal.ObjectGraphScanner.FindReachableObjects``1(System.Object[])">
            <summary>
            Finds the objects which have attached <see cref="T:NLog.Config.NLogConfigurationItemAttribute"/> which are reachable
            from any of the given root objects when traversing the object graph over public properties.
            </summary>
            <typeparam name="T">Type of the objects to return.</typeparam>
            <param name="rootObjects">The root objects.</param>
            <returns>Ordered list of objects implementing T.</returns>
        </member>
        <member name="T:NLog.Internal.ParameterUtils">
            <summary>
            Parameter validation utilities.
            </summary>
        </member>
        <member name="M:NLog.Internal.ParameterUtils.AssertNotNull(System.Object,System.String)">
            <summary>
            Asserts that the value is not null and throws <see cref="T:System.ArgumentNullException"/> otherwise.
            </summary>
            <param name="value">The value to check.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="T:NLog.Internal.PlatformDetector">
            <summary>
            Detects the platform the NLog is running on.
            </summary>
        </member>
        <member name="P:NLog.Internal.PlatformDetector.CurrentOS">
            <summary>
            Gets the current runtime OS.
            </summary>
        </member>
        <member name="P:NLog.Internal.PlatformDetector.IsDesktopWin32">
            <summary>
            Gets a value indicating whether current OS is a desktop version of Windows.
            </summary>
        </member>
        <member name="P:NLog.Internal.PlatformDetector.IsWin32">
            <summary>
            Gets a value indicating whether current OS is Win32-based (desktop or mobile).
            </summary>
        </member>
        <member name="P:NLog.Internal.PlatformDetector.IsUnix">
            <summary>
            Gets a value indicating whether current OS is Unix-based.
            </summary>
        </member>
        <member name="T:NLog.Internal.PortableFileInfoHelper">
            <summary>
            Portable implementation of <see cref="T:NLog.Internal.FileInfoHelper"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.PortableFileInfoHelper.GetFileInfo(System.String,System.IntPtr,System.DateTime@,System.Int64@)">
            <summary>
            Gets the information about a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileHandle">The file handle.</param>
            <param name="lastWriteTime">The last write time of the file.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>
            A value of <c>true</c> if file information was retrieved successfully, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:NLog.Internal.PortableThreadIDHelper">
            <summary>
            Portable implementation of <see cref="T:NLog.Internal.ThreadIDHelper"/>.
            </summary>
        </member>
        <member name="T:NLog.Internal.ThreadIDHelper">
            <summary>
            Returns details about current process and thread in a portable manner.
            </summary>
        </member>
        <member name="M:NLog.Internal.ThreadIDHelper.#cctor">
            <summary>
            Initializes static members of the ThreadIDHelper class.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.Instance">
            <summary>
            Gets the singleton instance of PortableThreadIDHelper or
            Win32ThreadIDHelper depending on runtime environment.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentThreadID">
            <summary>
            Gets current thread ID.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessID">
            <summary>
            Gets current process ID.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessName">
            <summary>
            Gets current process name.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessBaseName">
            <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
        </member>
        <member name="M:NLog.Internal.PortableThreadIDHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.PortableThreadIDHelper"/> class.
            </summary>
        </member>
        <member name="M:NLog.Internal.PortableThreadIDHelper.GetProcessName">
            <summary>
            Gets the name of the process.
            </summary>
        </member>
        <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentThreadID">
            <summary>
            Gets current thread ID.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessID">
            <summary>
            Gets current process ID.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessName">
            <summary>
            Gets current process name.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessBaseName">
            <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
            <value></value>
        </member>
        <member name="T:NLog.Internal.PropertyHelper">
            <summary>
            Reflection helpers for accessing properties.
            </summary>
        </member>
        <member name="T:NLog.Internal.ReflectionHelpers">
            <summary>
            Reflection helpers.
            </summary>
        </member>
        <member name="M:NLog.Internal.ReflectionHelpers.SafeGetTypes(System.Reflection.Assembly)">
            <summary>
            Gets all usable exported types from the given assembly.
            </summary>
            <param name="assembly">Assembly to scan.</param>
            <returns>Usable types from the given assembly.</returns>
            <remarks>Types which cannot be loaded are skipped.</remarks>
        </member>
        <member name="T:NLog.Internal.RuntimeOS">
            <summary>
            Supported operating systems.
            </summary>
            <remarks>
            If you add anything here, make sure to add the appropriate detection
            code to <see cref="T:NLog.Internal.PlatformDetector"/>
            </remarks>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.Any">
            <summary>
            Any operating system.
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.Unix">
            <summary>
            Unix/Linux operating systems.
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.WindowsCE">
            <summary>
            Windows CE.
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.Windows">
            <summary>
            Desktop versions of Windows (95,98,ME).
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.WindowsNT">
            <summary>
            Windows NT, 2000, 2003 and future versions based on NT technology.
            </summary>
        </member>
        <member name="F:NLog.Internal.RuntimeOS.Unknown">
            <summary>
            Unknown operating system.
            </summary>
        </member>
        <member name="T:NLog.Internal.SimpleStringReader">
            <summary>
            Simple character tokenizer.
            </summary>
        </member>
        <member name="M:NLog.Internal.SimpleStringReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.SimpleStringReader"/> class.
            </summary>
            <param name="text">The text to be tokenized.</param>
        </member>
        <member name="T:NLog.Internal.SingleCallContinuation">
            <summary>
            Implements a single-call guard around given continuation function.
            </summary>
        </member>
        <member name="M:NLog.Internal.SingleCallContinuation.#ctor(NLog.Common.AsyncContinuation)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.SingleCallContinuation"/> class.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Internal.SingleCallContinuation.Function(System.Exception)">
            <summary>
            Continuation function which implements the single-call guard.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:NLog.Internal.SortHelpers">
            <summary>
            Provides helpers to sort log events and associated continuations.
            </summary>
        </member>
        <member name="M:NLog.Internal.SortHelpers.BucketSort``2(System.Collections.Generic.IEnumerable{``0},NLog.Internal.SortHelpers.KeySelector{``0,``1})">
            <summary>
            Performs bucket sort (group by) on an array of items and returns a dictionary for easy traversal of the result set.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="inputs">The inputs.</param>
            <param name="keySelector">The key selector function.</param>
            <returns>
            Dictonary where keys are unique input keys, and values are lists of <see cref="T:NLog.Common.AsyncLogEventInfo"/>.
            </returns>
        </member>
        <member name="T:NLog.Internal.SortHelpers.KeySelector`2">
            <summary>
            Key selector delegate.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="value">Value to extract key information from.</param>
            <returns>Key selected from log event.</returns>
        </member>
        <member name="T:NLog.Internal.StackTraceUsageUtils">
            <summary>
            Utilities for dealing with <see cref="T:NLog.Config.StackTraceUsage"/> values.
            </summary>
        </member>
        <member name="T:NLog.Internal.TargetWithFilterChain">
            <summary>
            Represents target with a chain of filters which determine
            whether logging should happen.
            </summary>
        </member>
        <member name="M:NLog.Internal.TargetWithFilterChain.#ctor(NLog.Targets.Target,System.Collections.Generic.IList{NLog.Filters.Filter})">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.TargetWithFilterChain"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="filterChain">The filter chain.</param>
        </member>
        <member name="M:NLog.Internal.TargetWithFilterChain.GetStackTraceUsage">
            <summary>
            Gets the stack trace usage.
            </summary>
            <returns>A <see cref="T:NLog.Config.StackTraceUsage"/> value that determines stack trace handling.</returns>
        </member>
        <member name="P:NLog.Internal.TargetWithFilterChain.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:NLog.Internal.TargetWithFilterChain.FilterChain">
            <summary>
            Gets the filter chain.
            </summary>
            <value>The filter chain.</value>
        </member>
        <member name="P:NLog.Internal.TargetWithFilterChain.NextInChain">
            <summary>
            Gets or sets the next <see cref="T:NLog.Internal.TargetWithFilterChain"/> item in the chain.
            </summary>
            <value>The next item in the chain.</value>
        </member>
        <member name="T:NLog.Internal.ThreadLocalStorageHelper">
            <summary>
            Helper for dealing with thread-local storage.
            </summary>
        </member>
        <member name="M:NLog.Internal.ThreadLocalStorageHelper.AllocateDataSlot">
            <summary>
            Allocates the data slot for storing thread-local information.
            </summary>
            <returns>Allocated slot key.</returns>
        </member>
        <member name="M:NLog.Internal.ThreadLocalStorageHelper.GetDataForSlot``1(System.Object)">
            <summary>
            Gets the data for a slot in thread-local storage.
            </summary>
            <typeparam name="T">Type of the data.</typeparam>
            <param name="slot">The slot to get data for.</param>
            <returns>
            Slot data (will create T if null).
            </returns>
        </member>
        <member name="T:NLog.Internal.TimeoutContinuation">
            <summary>
            Wraps <see cref="T:NLog.Common.AsyncContinuation"/> with a timeout.
            </summary>
        </member>
        <member name="M:NLog.Internal.TimeoutContinuation.#ctor(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.TimeoutContinuation"/> class.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:NLog.Internal.TimeoutContinuation.Function(System.Exception)">
            <summary>
            Continuation function which implements the timeout logic.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:NLog.Internal.TimeoutContinuation.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:NLog.Internal.UrlHelper">
            <summary>
            URL Encoding helper.
            </summary>
        </member>
        <member name="T:NLog.Internal.Win32FileInfoHelper">
            <summary>
            Win32-optimized implementation of <see cref="T:NLog.Internal.FileInfoHelper"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.Win32FileInfoHelper.GetFileInfo(System.String,System.IntPtr,System.DateTime@,System.Int64@)">
            <summary>
            Gets the information about a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileHandle">The file handle.</param>
            <param name="lastWriteTime">The last write time of the file.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>
            A value of <c>true</c> if file information was retrieved successfully, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:NLog.Internal.Win32ThreadIDHelper">
            <summary>
            Win32-optimized implementation of <see cref="T:NLog.Internal.ThreadIDHelper"/>.
            </summary>
        </member>
        <member name="M:NLog.Internal.Win32ThreadIDHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.Win32ThreadIDHelper"/> class.
            </summary>
        </member>
        <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentThreadID">
            <summary>
            Gets current thread ID.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessID">
            <summary>
            Gets current process ID.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessName">
            <summary>
            Gets current process name.
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessBaseName">
            <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
            <value></value>
        </member>
        <member name="T:NLog.LayoutRenderers.AmbientPropertyAttribute">
            <summary>
            Designates a property of the class as an ambient property.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AmbientPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.AmbientPropertyAttribute"/> class.
            </summary>
            <param name="name">Ambient property name.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer">
            <summary>
            ASP Application variable.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.LayoutRenderer">
            <summary>
            Render environmental information related to logging events.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Render(NLog.LogEventInfo)">
            <summary>
            Renders the the value of layout renderer in the context of the specified log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>String representation of a layout renderer.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.NLog#Internal#ISupportsInitialize#Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.NLog#Internal#ISupportsInitialize#Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environmental information and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.CloseLayoutRenderer">
            <summary>
            Closes the layout renderer.
            </summary>      
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.LayoutRenderer.LoggingConfiguration">
            <summary>
            Gets the logging configuration this target is part of.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the ASP Application variable name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.AspRequestValueLayoutRenderer">
            <summary>
            ASP Request variable.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Request variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Item">
            <summary>
            Gets or sets the item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.QueryString">
            <summary>
            Gets or sets the QueryString variable to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Form">
            <summary>
            Gets or sets the form variable to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Cookie">
            <summary>
            Gets or sets the cookie to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.ServerVariable">
            <summary>
            Gets or sets the ServerVariables item to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.AspSessionValueLayoutRenderer">
            <summary>
            ASP Session variable.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AspSessionValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Session variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.AspSessionValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the session variable name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.BaseDirLayoutRenderer">
            <summary>
            The current application domain's base directory.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.BaseDirLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the application base directory and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with with the base directory.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with with the base directory.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.CallSiteLayoutRenderer">
            <summary>
            The call site (class name, method name and source information).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.CallSiteLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.ClassName">
            <summary>
            Gets or sets a value indicating whether to render the class name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.MethodName">
            <summary>
            Gets or sets a value indicating whether to render the method name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.FileName">
            <summary>
            Gets or sets a value indicating whether to render the source file name and line number.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.IncludeSourcePath">
            <summary>
            Gets or sets a value indicating whether to include source file path.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.CounterLayoutRenderer">
            <summary>
            A counter value (increases on each layout rendering).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.CounterLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified counter value and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Value">
            <summary>
            Gets or sets the initial value of the counter.
            </summary>
            <docgen category='Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Increment">
            <summary>
            Gets or sets the value to be added to the counter after each layout rendering.
            </summary>
            <docgen category='Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Sequence">
            <summary>
            Gets or sets the name of the sequence. Different named sequences can have individual values.
            </summary>
            <docgen category='Counter Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.DateLayoutRenderer">
            <summary>
            Current date and time.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.DateLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current date and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.Format">
            <summary>
            Gets or sets the date format. Can be any argument accepted by DateTime.ToString(format).
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.UniversalTime">
            <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.EnvironmentLayoutRenderer">
            <summary>
            The environment variable.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Variable">
            <summary>
            Gets or sets the name of the environment variable.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.EventContextLayoutRenderer">
            <summary>
            Log event context data.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.EventContextLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified log event context item and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.EventContextLayoutRenderer.Item">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.ExceptionLayoutRenderer">
            <summary>
            Exception information provided through 
            a call to one of the Logger.*Exception() methods.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.ExceptionLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified exception information and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Format">
            <summary>
            Gets or sets the format of the output. Must be a comma-separated list of exception
            properties: Message, Type, ShortType, ToString, Method, StackTrace.
            This parameter value is case-insensitive.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.InnerFormat">
            <summary>
            Gets or sets the format of the output of inner exceptions. Must be a comma-separated list of exception
            properties: Message, Type, ShortType, ToString, Method, StackTrace.
            This parameter value is case-insensitive.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Separator">
            <summary>
            Gets or sets the separator used to concatenate parts specified in the Format.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.MaxInnerExceptionLevel">
            <summary>
            Gets or sets the maximum number of inner exceptions to include in the output.
            By default inner exceptions are not enabled for compatibility with NLog 1.0.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.InnerExceptionSeparator">
            <summary>
            Gets or sets the separator between inner exceptions.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.FileContentsLayoutRenderer">
            <summary>
            Renders contents of the specified file.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.FileContentsLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.FileContentsLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.FileContentsLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the contents of the specified file and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.FileContentsLayoutRenderer.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <docgen category='File Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.FileContentsLayoutRenderer.Encoding">
            <summary>
            Gets or sets the encoding used in the file.
            </summary>
            <value>The encoding.</value>
            <docgen category='File Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer">
            <summary>
            The information about the garbage collector.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the selected process information.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.Property">
            <summary>
            Gets or sets the property to retrieve.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.GarbageCollectorProperty">
            <summary>
            Gets or sets the property of System.GC to retrieve.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.TotalMemory">
            <summary>
            Total memory allocated.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.TotalMemoryForceCollection">
            <summary>
            Total memory allocated (perform full garbage collection first).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount0">
            <summary>
            Gets the number of Gen0 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount1">
            <summary>
            Gets the number of Gen1 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount2">
            <summary>
            Gets the number of Gen2 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.MaxGeneration">
            <summary>
            Maximum generation number supported by GC.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.GdcLayoutRenderer">
            <summary>
            Global Diagnostics Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified Global Diagnostics Context item and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.GdcLayoutRenderer.Item">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.GuidLayoutRenderer">
            <summary>
            Globally-unique identifier (GUID).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.GuidLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders a newly generated GUID string and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.GuidLayoutRenderer.Format">
            <summary>
            Gets or sets the GUID format as accepted by Guid.ToString() method.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.IdentityLayoutRenderer">
            <summary>
            Thread identity information (name and authentication information).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.IdentityLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified identity information and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Separator">
            <summary>
            Gets or sets the separator to be used when concatenating 
            parts of identity information.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Name">
            <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.Name.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.AuthType">
            <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.AuthenticationType.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.IsAuthenticated">
            <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.IsAuthenticated.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.InstallContextLayoutRenderer">
            <summary>
            Installation parameter (passed to InstallNLogConfig).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.InstallContextLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified installation parameter and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.InstallContextLayoutRenderer.Parameter">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.LayoutRendererAttribute">
            <summary>
            Marks class as a layout renderer and assigns a format string to it.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRendererAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LayoutRendererAttribute"/> class.
            </summary>
            <param name="name">Name of the layout renderer.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LevelLayoutRenderer">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LevelLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current log level and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LiteralLayoutRenderer">
            <summary>
            A string literal.
            </summary>
            <remarks>
            This is used to escape '${' sequence 
            as ;${literal:text=${}'
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer"/> class.
            </summary>
            <param name="text">The literal text value.</param>
            <remarks>This is used by the layout compiler.</remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.LiteralLayoutRenderer.Text">
            <summary>
            Gets or sets the literal text.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer">
            <summary>
            XML event description compatible with log4j, Chainsaw and NLogViewer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the XML logging event and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeNLogData">
            <summary>
            Gets or sets a value indicating whether to include NLog-specific extensions to log4j schema.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IndentXml">
            <summary>
            Gets or sets a value indicating whether the XML should use spaces for indentation.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.AppInfo">
            <summary>
            Gets or sets the AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeCallSite">
            <summary>
            Gets or sets a value indicating whether to include call site (class and method name) in the information sent over the network.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeSourceInfo">
            <summary>
            Gets or sets a value indicating whether to include source info (file name and line number) in the information sent over the network.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeMdc">
            <summary>
            Gets or sets a value indicating whether to include contents of the <see cref="T:NLog.MappedDiagnosticsContext"/> dictionary.
            </summary>
            <docgen category="Payload Options" order="10"/>
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeNdc">
            <summary>
            Gets or sets a value indicating whether to include contents of the <see cref="T:NLog.NestedDiagnosticsContext"/> stack.
            </summary>
            <docgen category="Payload Options" order="10"/>
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.NdcItemSeparator">
            <summary>
            Gets or sets the NDC item separator.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.LoggerNameLayoutRenderer">
            <summary>
            The logger name.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LoggerNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the logger name and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.LoggerNameLayoutRenderer.ShortName">
            <summary>
            Gets or sets a value indicating whether to render short logger name (the part after the trailing dot character).
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.LongDateLayoutRenderer">
            <summary>
            The date and time in a long, sortable format yyyy-MM-dd HH:mm:ss.mmm.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LongDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the date in the long format (yyyy-MM-dd HH:mm:ss.mmm) and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.LongDateLayoutRenderer.UniversalTime">
            <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.MachineNameLayoutRenderer">
            <summary>
            The machine name that the process is running on.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the machine name and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.MdcLayoutRenderer">
            <summary>
            Mapped Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified MDC item and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.MdcLayoutRenderer.Item">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.MessageLayoutRenderer">
            <summary>
            The formatted log message.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.MessageLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the log message including any positional parameters and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.MessageLayoutRenderer.WithException">
            <summary>
            Gets or sets a value indicating whether to log exception along with message.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.MessageLayoutRenderer.ExceptionSeparator">
            <summary>
            Gets or sets the string that separates message from the exception.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.NdcLayoutRenderer">
            <summary>
            Nested Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NdcLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.NdcLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified Nested Diagnostics Context item and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.TopFrames">
            <summary>
            Gets or sets the number of top stack frames to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.BottomFrames">
            <summary>
            Gets or sets the number of bottom stack frames to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.Separator">
            <summary>
            Gets or sets the separator to be used for concatenating nested diagnostics context output.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.NewLineLayoutRenderer">
            <summary>
            A newline literal.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NewLineLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.NLogDirLayoutRenderer">
            <summary>
            The directory where NLog.dll is located.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.#cctor">
            <summary>
            Initializes static members of the NLogDirLayoutRenderer class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer">
            <summary>
            The performance counter.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.CloseLayoutRenderer">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Category">
            <summary>
            Gets or sets the name of the counter category.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Counter">
            <summary>
            Gets or sets the name of the performance counter.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Instance">
            <summary>
            Gets or sets the name of the performance counter instance (e.g. this.Global_).
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.MachineName">
            <summary>
            Gets or sets the name of the machine to read the performance counter from.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessIdLayoutRenderer">
            <summary>
            The identifier of the current process.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process ID.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer">
            <summary>
            The information about the running process.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.CloseLayoutRenderer">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the selected process information.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Property">
            <summary>
            Gets or sets the property to retrieve.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessInfoProperty">
            <summary>
            Property of System.Diagnostics.Process to retrieve.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.BasePriority">
            <summary>
            Base Priority.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ExitCode">
            <summary>
            Exit Code.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ExitTime">
            <summary>
            Exit Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Handle">
            <summary>
            Process Handle.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.HandleCount">
            <summary>
            Handle Count.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.HasExited">
            <summary>
            Whether process has exited.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Id">
            <summary>
            Process ID.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MachineName">
            <summary>
            Machine name.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MainWindowHandle">
            <summary>
            Handle of the main window.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MainWindowTitle">
            <summary>
            Title of the main window.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MaxWorkingSet">
            <summary>
            Maximum Working Set.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MinWorkingSet">
            <summary>
            Minimum Working Set.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.NonPagedSystemMemorySize">
            <summary>
            Non-paged System Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.NonPagedSystemMemorySize64">
            <summary>
            Non-paged System Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedMemorySize">
            <summary>
            Paged Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedMemorySize64">
            <summary>
            Paged Memory Size (64-bit)..
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedSystemMemorySize">
            <summary>
            Paged System Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedSystemMemorySize64">
            <summary>
            Paged System Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakPagedMemorySize">
            <summary>
            Peak Paged Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakPagedMemorySize64">
            <summary>
            Peak Paged Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakVirtualMemorySize">
            <summary>
            Peak Vitual Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakVirtualMemorySize64">
            <summary>
            Peak Virtual Memory Size (64-bit)..
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakWorkingSet">
            <summary>
            Peak Working Set Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakWorkingSet64">
            <summary>
            Peak Working Set Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PriorityBoostEnabled">
            <summary>
            Whether priority boost is enabled.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PriorityClass">
            <summary>
            Priority Class.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivateMemorySize">
            <summary>
            Private Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivateMemorySize64">
            <summary>
            Private Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivilegedProcessorTime">
            <summary>
            Privileged Processor Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ProcessName">
            <summary>
            Process Name.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Responding">
            <summary>
            Whether process is responding.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.SessionId">
            <summary>
            Session ID.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.StartTime">
            <summary>
            Process Start Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.TotalProcessorTime">
            <summary>
            Total Processor Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.UserProcessorTime">
            <summary>
            User Processor Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.VirtualMemorySize">
            <summary>
            Virtual Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.VirtualMemorySize64">
            <summary>
            Virtual Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.WorkingSet">
            <summary>
            Working Set Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.WorkingSet64">
            <summary>
            Working Set Size (64-bit).
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessNameLayoutRenderer">
            <summary>
            The name of the current process.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process name (optionally with a full path).
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ProcessNameLayoutRenderer.FullName">
            <summary>
            Gets or sets a value indicating whether to write the full path to the process executable.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessTimeLayoutRenderer">
            <summary>
            The process time in format HH:mm:ss.mmm.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessTimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process running time and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer">
            <summary>
            High precision timer, based on the value returned from QueryPerformanceCounter() optionally converted to seconds.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Normalize">
            <summary>
            Gets or sets a value indicating whether to normalize the result by subtracting 
            it from the result of the first call (so that it's effectively zero-based).
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Difference">
            <summary>
            Gets or sets a value indicating whether to output the difference between the result 
            of QueryPerformanceCounter and the previous one.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Seconds">
            <summary>
            Gets or sets a value indicating whether to convert the result to seconds by dividing 
            by the result of QueryPerformanceFrequency().
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Precision">
            <summary>
            Gets or sets the number of decimal digits to be included in output.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.AlignDecimalPoint">
            <summary>
            Gets or sets a value indicating whether to align decimal point (emit non-significant zeros).
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.RegistryLayoutRenderer">
            <summary>
            A value from the Registry.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.RegistryLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Reads the specified registry key and value and appends it to
            the passed <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event. Ignored.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.Value">
            <summary>
            Gets or sets the registry value name.
            </summary>
            <docgen category='Registry Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.DefaultValue">
            <summary>
            Gets or sets the value to be output when the specified registry key or value is not found.
            </summary>
            <docgen category='Registry Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.Key">
            <summary>
            Gets or sets the registry key.
            </summary>
            <remarks>
            Must have one of the forms:
            <ul>
            <li>HKLM\Key\Full\Name</li>
            <li>HKEY_LOCAL_MACHINE\Key\Full\Name</li>
            <li>HKCU\Key\Full\Name</li>
            <li>HKEY_CURRENT_USER\Key\Full\Name</li>
            </ul>
            </remarks>
            <docgen category='Registry Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.ShortDateLayoutRenderer">
            <summary>
            The short date in a sortable format yyyy-MM-dd.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ShortDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current short date string (yyyy-MM-dd) and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ShortDateLayoutRenderer.UniversalTime">
            <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.SpecialFolderLayoutRenderer">
            <summary>
            System special folder path (includes My Documents, My Music, Program Files, Desktop, and more).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Folder">
            <summary>
            Gets or sets the system special folder to use.
            </summary>
            <remarks>
            Full list of options is available at <a href="http://msdn2.microsoft.com/en-us/system.environment.specialfolder.aspx">MSDN</a>.
            The most common ones are:
            <ul>
            <li><b>ApplicationData</b> - roaming application data for current user.</li>
            <li><b>CommonApplicationData</b> - application data for all users.</li>
            <li><b>MyDocuments</b> - My Documents</li>
            <li><b>DesktopDirectory</b> - Desktop directory</li>
            <li><b>LocalApplicationData</b> - non roaming application data</li>
            <li><b>Personal</b> - user profile directory</li>
            <li><b>System</b> - System directory</li>
            </ul>
            </remarks>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.StackTraceFormat">
            <summary>
            Format of the ${stacktrace} layout renderer output.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.Raw">
            <summary>
            Raw format (multiline - as returned by StackFrame.ToString() method).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.Flat">
            <summary>
            Flat format (class and method names displayed in a single line).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.DetailedFlat">
            <summary>
            Detailed flat format (method signatures displayed in a single line).
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.StackTraceLayoutRenderer">
            <summary>
            Stack trace renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.StackTraceLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.Format">
            <summary>
            Gets or sets the output format of the stack trace.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.TopFrames">
            <summary>
            Gets or sets the number of top stack frames to be rendered.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.Separator">
            <summary>
            Gets or sets the stack frame separator string.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
            <value></value>
        </member>
        <member name="T:NLog.LayoutRenderers.TempDirLayoutRenderer">
            <summary>
            A temporary directory.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.TempDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.TempDirLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.TempDirLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.ThreadIdLayoutRenderer">
            <summary>
            The identifier of the current thread.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread identifier and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ThreadNameLayoutRenderer">
            <summary>
            The name of the current thread.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread name and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.TicksLayoutRenderer">
            <summary>
            The Ticks value of current date and time.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.TicksLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.TimeLayoutRenderer">
            <summary>
            The time in a 24-hour, sortable format HH:mm:ss.mmm.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.TimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders time in the 24-h format (HH:mm:ss.mmm) and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.TimeLayoutRenderer.UniversalTime">
            <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer">
            <summary>
            Thread Windows identity information (username).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread windows identity information and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.Domain">
            <summary>
            Gets or sets a value indicating whether domain name should be included.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.UserName">
            <summary>
            Gets or sets a value indicating whether username should be included.
            </summary>
            <docgen category='Rendering Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper">
            <summary>
            Applies caching to another layout output.
            </summary>
            <remarks>
            The value of the inner layout will be rendered only once and reused subsequently.
            </remarks>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase">
            <summary>
            Decodes text "encrypted" with ROT-13.
            </summary>
            <remarks>
            See <a href="http://en.wikipedia.org/wiki/ROT13">http://en.wikipedia.org/wiki/ROT13</a>.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the inner message, processes it and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>Contents of inner layout.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Inner">
            <summary>
            Gets or sets the wrapped layout.
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.CloseLayoutRenderer">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>Contents of inner layout.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.Cached">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper"/> is enabled.
            </summary>
            <docgen category="Caching Options" order="10"/>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper">
            <summary>
            Filters characters not allowed in the file names by replacing them with safe character.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Padded and trimmed string.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.FSNormalize">
            <summary>
            Gets or sets a value indicating whether to modify the output of this renderer so it can be used as a part of file path
            (illegal characters are replaced with '_').
            </summary>
            <docgen category='Advanced Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper">
            <summary>
            Escapes output of another layout using JSON rules.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>JSON-encoded string.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.JsonEncode">
            <summary>
            Gets or sets a value indicating whether to apply JSON encoding.
            </summary>
            <docgen category="Transformation Options" order="10"/>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper">
            <summary>
            Converts the result of another layout output to lower case.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Padded and trimmed string.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Lowercase">
            <summary>
            Gets or sets a value indicating whether lower case conversion should be applied.
            </summary>
            <value>A value of <c>true</c> if lower case conversion should be applied; otherwise, <c>false</c>.</value>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper">
            <summary>
            Only outputs the inner layout when exception has been defined for log message.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>
            Contents of inner layout.
            </returns>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper">
            <summary>
            Applies padding to another layout output.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.Padding">
            <summary>
            Gets or sets the number of characters to pad the output to. 
            </summary>
            <remarks>
            Positive padding values cause left padding, negative values 
            cause right padding to the desired width.
            </remarks>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.PadCharacter">
            <summary>
            Gets or sets the padding character.
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.FixedLength">
            <summary>
            Gets or sets a value indicating whether to trim the 
            rendered text to the absolute value of the padding length.
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper">
            <summary>
            Replaces a string in the output of another layout with another string.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.InitializeLayoutRenderer">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Post-processed text.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.SearchFor">
            <summary>
            Gets or sets the text to search for.
            </summary>
            <value>The text search for.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Regex">
            <summary>
            Gets or sets a value indicating whether regular expressions should be used.
            </summary>
            <value>A value of <c>true</c> if regular expressions should be used otherwise, <c>false</c>.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.ReplaceWith">
            <summary>
            Gets or sets the replacement string.
            </summary>
            <value>The replacement string.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case.
            </summary>
            <value>A value of <c>true</c> if case should be ignored when searching; otherwise, <c>false</c>.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.WholeWords">
            <summary>
            Gets or sets a value indicating whether to search for whole words.
            </summary>
            <value>A value of <c>true</c> if whole words should be searched for; otherwise, <c>false</c>.</value>
            <docgen category='Search/Replace Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper">
            <summary>
            Decodes text "encrypted" with ROT-13.
            </summary>
            <remarks>
            See <a href="http://en.wikipedia.org/wiki/ROT13">http://en.wikipedia.org/wiki/ROT13</a>.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.DecodeRot13(System.String)">
            <summary>
            Encodes/Decodes ROT-13-encoded string.
            </summary>
            <param name="encodedValue">The string to be encoded/decoded.</param>
            <returns>Encoded/Decoded text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.Text">
            <summary>
            Gets or sets the layout to be wrapped.
            </summary>
            <value>The layout to be wrapped.</value>
            <remarks>This variable is for backwards compatibility</remarks>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper">
            <summary>
            Trims the whitespace from the result of another layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Trimmed string.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.TrimWhiteSpace">
            <summary>
            Gets or sets a value indicating whether lower case conversion should be applied.
            </summary>
            <value>A value of <c>true</c> if lower case conversion should be applied; otherwise, <c>false</c>.</value>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper">
            <summary>
            Converts the result of another layout output to upper case.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Padded and trimmed string.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Uppercase">
            <summary>
            Gets or sets a value indicating whether upper case conversion should be applied.
            </summary>
            <value>A value of <c>true</c> if upper case conversion should be applied otherwise, <c>false</c>.</value>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper">
            <summary>
            Encodes the result of another layout output for use with URLs.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.SpaceAsPlus">
            <summary>
            Gets or sets a value indicating whether spaces should be translated to '+' or '%20'.
            </summary>
            <value>A value of <c>true</c> if space should be translated to '+'; otherwise, <c>false</c>.</value>
            <docgen category='Transformation Options' order='10' />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper">
            <summary>
            Outputs alternative layout when the inner layout produces empty result.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>
            Contents of inner layout.
            </returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.WhenEmpty">
            <summary>
            Gets or sets the layout to be rendered when original layout produced empty result.
            </summary>
            <docgen category="Transformation Options" order="10"/>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper">
            <summary>
            Only outputs the inner layout when the specified condition has been met.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>
            Contents of inner layout.
            </returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.When">
            <summary>
            Gets or sets the condition that must be met for the inner layout to be printed.
            </summary>
            <docgen category="Transformation Options" order="10"/>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper">
            <summary>
            Converts the result of another layout output to be XML-compliant.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Padded and trimmed string.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.XmlEncode">
            <summary>
            Gets or sets a value indicating whether to apply XML encoding.
            </summary>
            <docgen category="Transformation Options" order="10"/>
        </member>
        <member name="T:NLog.Layouts.CsvColumn">
            <summary>
            A column in the CSV.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvColumn"/> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvColumn.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvColumn"/> class.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="layout">The layout of the column.</param>
        </member>
        <member name="P:NLog.Layouts.CsvColumn.Name">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <docgen category='CSV Column Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvColumn.Layout">
            <summary>
            Gets or sets the layout of the column.
            </summary>
            <docgen category='CSV Column Options' order='10' />
        </member>
        <member name="T:NLog.Layouts.CsvColumnDelimiterMode">
            <summary>
            Specifies allowed column delimiters.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Auto">
            <summary>
            Automatically detect from regional settings.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Comma">
            <summary>
            Comma (ASCII 44).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Semicolon">
            <summary>
            Semicolon (ASCII 59).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Tab">
            <summary>
            Tab character (ASCII 9).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Pipe">
            <summary>
            Pipe character (ASCII 124).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Space">
            <summary>
            Space character (ASCII 32).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Custom">
            <summary>
            Custom string, specified by the CustomDelimiter.
            </summary>
        </member>
        <member name="T:NLog.Layouts.CsvLayout">
            <summary>
            A specialized layout that renders CSV-formatted events.
            </summary>
        </member>
        <member name="T:NLog.Layouts.LayoutWithHeaderAndFooter">
            <summary>
            A specialized layout that supports header and footer.
            </summary>
        </member>
        <member name="T:NLog.Layouts.Layout">
            <summary>
            Abstract interface that layouts must implement.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.op_Implicit(System.String)~NLog.Layouts.Layout">
            <summary>
            Converts a given text to a <see cref="T:NLog.Layouts.Layout"/>.
            </summary>
            <param name="text">Text to be converted.</param>
            <returns><see cref="T:NLog.Layouts.SimpleLayout"/> object represented by the text.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.FromString(System.String)">
            <summary>
            Implicitly converts the specified string to a <see cref="T:NLog.Layouts.SimpleLayout"/>.
            </summary>
            <param name="layoutText">The layout string.</param>
            <returns>Instance of <see cref="T:NLog.Layouts.SimpleLayout"/>.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.FromString(System.String,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Implicitly converts the specified string to a <see cref="T:NLog.Layouts.SimpleLayout"/>.
            </summary>
            <param name="layoutText">The layout string.</param>
            <param name="configurationItemFactory">The NLog factories to use when resolving layout renderers.</param>
            <returns>Instance of <see cref="T:NLog.Layouts.SimpleLayout"/>.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.Precalculate(NLog.LogEventInfo)">
            <summary>
            Precalculates the layout for the specified log event and stores the result
            in per-log event cache.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            Calling this method enables you to store the log event in a buffer
            and/or potentially evaluate it in another thread even though the 
            layout may contain thread-dependent renderer.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.Layout.Render(NLog.LogEventInfo)">
            <summary>
            Renders the event info in layout.
            </summary>
            <param name="logEvent">The event info.</param>
            <returns>String representing log event.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.NLog#Internal#ISupportsInitialize#Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Layouts.Layout.NLog#Internal#ISupportsInitialize#Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.Initialize(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:NLog.Layouts.Layout.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.InitializeLayout">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.CloseLayout">
            <summary>
            Closes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="P:NLog.Layouts.Layout.IsThreadAgnostic">
            <summary>
            Gets a value indicating whether this layout is thread-agnostic (can be rendered on any thread).
            </summary>
            <remarks>
            Layout is thread-agnostic if it has been marked with [ThreadAgnostic] attribute and all its children are
            like that as well.
            Thread-agnostic layouts only use contents of <see cref="T:NLog.LogEventInfo"/> for its output.
            </remarks>
        </member>
        <member name="P:NLog.Layouts.Layout.LoggingConfiguration">
            <summary>
            Gets the logging configuration this target is part of.
            </summary>
        </member>
        <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Layout">
            <summary>
            Gets or sets the body layout (can be repeated multiple times).
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Header">
            <summary>
            Gets or sets the header layout.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Footer">
            <summary>
            Gets or sets the footer layout.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="M:NLog.Layouts.CsvLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvLayout"/> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.InitializeLayout">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Formats the log event for write.
            </summary>
            <param name="logEvent">The log event to be formatted.</param>
            <returns>A string representation of the log event.</returns>
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Columns">
            <summary>
            Gets the array of parameters to be passed.
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.WithHeader">
            <summary>
            Gets or sets a value indicating whether CVS should include header.
            </summary>
            <value>A value of <c>true</c> if CVS should include header; otherwise, <c>false</c>.</value>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Delimiter">
            <summary>
            Gets or sets the column delimiter.
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Quoting">
            <summary>
            Gets or sets the quoting mode.
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.QuoteChar">
            <summary>
            Gets or sets the quote Character.
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.CustomColumnDelimiter">
            <summary>
            Gets or sets the custom column delimiter value (valid when ColumnDelimiter is set to 'Custom').
            </summary>
            <docgen category='CSV Options' order='10' />
        </member>
        <member name="T:NLog.Layouts.CsvLayout.CsvHeaderLayout">
            <summary>
            Header for CSV layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.#ctor(NLog.Layouts.CsvLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvLayout.CsvHeaderLayout"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="T:NLog.Layouts.CsvQuotingMode">
            <summary>
            Specifies allowes CSV quoting modes.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.All">
            <summary>
            Quote all column.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.Nothing">
            <summary>
            Quote nothing.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.Auto">
            <summary>
            Quote only whose values contain the quote symbol or
            the separator.
            </summary>
        </member>
        <member name="T:NLog.Layouts.LayoutAttribute">
            <summary>
            Marks class as a layout renderer and assigns a format string to it.
            </summary>
        </member>
        <member name="M:NLog.Layouts.LayoutAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.LayoutAttribute"/> class.
            </summary>
            <param name="name">Layout name.</param>
        </member>
        <member name="T:NLog.Layouts.LayoutParser">
            <summary>
            Parses layout strings.
            </summary>
        </member>
        <member name="T:NLog.Layouts.Log4JXmlEventLayout">
            <summary>
            A specialized layout that renders Log4j-compatible XML events.
            </summary>
            <remarks>
            This layout is not meant to be used explicitly. Instead you can use ${log4jxmlevent} layout renderer.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.Log4JXmlEventLayout"/> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="P:NLog.Layouts.Log4JXmlEventLayout.Renderer">
            <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer"/> instance that renders log events.
            </summary>
        </member>
        <member name="T:NLog.Layouts.SimpleLayout">
            <summary>
            Represents a string with embedded placeholders that can render contextual information.
            </summary>
            <remarks>
            This layout is not meant to be used explicitly. Instead you can just use a string containing layout 
            renderers everywhere the layout is required.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout"/> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout"/> class.
            </summary>
            <param name="txt">The layout string to parse.</param>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.#ctor(System.String,NLog.Config.ConfigurationItemFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout"/> class.
            </summary>
            <param name="txt">The layout string to parse.</param>
            <param name="configurationItemFactory">The NLog factories to use when creating references to layout renderers.</param>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.op_Implicit(System.String)~NLog.Layouts.SimpleLayout">
            <summary>
            Converts a text to a simple layout.
            </summary>
            <param name="text">Text to be converted.</param>
            <returns>A <see cref="T:NLog.Layouts.SimpleLayout"/> object.</returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.Escape(System.String)">
            <summary>
            Escapes the passed text so that it can
            be used literally in all places where
            layout is normally expected without being
            treated as layout.
            </summary>
            <param name="text">The text to be escaped.</param>
            <returns>The escaped text.</returns>
            <remarks>
            Escaping is done by replacing all occurences of
            '${' with '${literal:text=${}'
            </remarks>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.Evaluate(System.String,NLog.LogEventInfo)">
            <summary>
            Evaluates the specified text by expadinging all layout renderers.
            </summary>
            <param name="text">The text to be evaluated.</param>
            <param name="logEvent">Log event to be used for evaluation.</param>
            <returns>The input text with all occurences of ${} replaced with
            values provided by the appropriate layout renderers.</returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.Evaluate(System.String)">
            <summary>
            Evaluates the specified text by expadinging all layout renderers
            in new <see cref="T:NLog.LogEventInfo"/> context.
            </summary>
            <param name="text">The text to be evaluated.</param>
            <returns>The input text with all occurences of ${} replaced with
            values provided by the appropriate layout renderers.</returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current object.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current object.
            </returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers
            that make up the event.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.Text">
            <summary>
            Gets or sets the layout text.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.Renderers">
            <summary>
            Gets a collection of <see cref="T:NLog.LayoutRenderers.LayoutRenderer"/> objects that make up this layout.
            </summary>
        </member>
        <member name="T:NLog.LogEventInfo">
            <summary>
            Represents the logging event.
            </summary>
        </member>
        <member name="F:NLog.LogEventInfo.ZeroDate">
            <summary>
            Gets the date of the first log event created.
            </summary>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo"/> class.
            </summary>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo"/> class.
            </summary>
            <param name="level">Log level.</param>
            <param name="loggerName">Logger name.</param>
            <param name="message">Log message including parameter placeholders.</param>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo"/> class.
            </summary>
            <param name="level">Log level.</param>
            <param name="loggerName">Logger name.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">Log message including parameter placeholders.</param>
            <param name="parameters">Parameter array.</param>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[],System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo"/> class.
            </summary>
            <param name="level">Log level.</param>
            <param name="loggerName">Logger name.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">Log message including parameter placeholders.</param>
            <param name="parameters">Parameter array.</param>
            <param name="exception">Exception information.</param>
        </member>
        <member name="M:NLog.LogEventInfo.CreateNullEvent">
            <summary>
            Creates the null event.
            </summary>
            <returns>Null log event.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.String)">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="message">The message.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.IFormatProvider,System.Object)">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.String,System.Exception)">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.WithContinuation(NLog.Common.AsyncContinuation)">
            <summary>
            Creates <see cref="T:NLog.Common.AsyncLogEventInfo"/> from this <see cref="T:NLog.LogEventInfo"/> by attaching the specified asynchronous continuation.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <returns>Instance of <see cref="T:NLog.Common.AsyncLogEventInfo"/> with attached continuation.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.ToString">
            <summary>
            Returns a string representation of this log event.
            </summary>
            <returns>String representation of the log event.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.SetStackTrace(System.Diagnostics.StackTrace,System.Int32)">
            <summary>
            Sets the stack trace for the event info.
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <param name="userStackFrame">Index of the first user stack frame within the stack trace.</param>
        </member>
        <member name="P:NLog.LogEventInfo.SequenceID">
            <summary>
            Gets the unique identifier of log event which is automatically generated
            and monotonously increasing.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.TimeStamp">
            <summary>
            Gets or sets the timestamp of the logging event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Level">
            <summary>
            Gets or sets the level of the logging event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.HasStackTrace">
            <summary>
            Gets a value indicating whether stack trace has been set for this event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.UserStackFrame">
            <summary>
            Gets the stack frame of the method that did the logging.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.UserStackFrameNumber">
            <summary>
            Gets the number index of the stack frame that represents the user
            code (not the NLog code).
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.StackTrace">
            <summary>
            Gets the entire stack trace.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Exception">
            <summary>
            Gets or sets the exception information.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.LoggerName">
            <summary>
            Gets or sets the logger name.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.LoggerShortName">
            <summary>
            Gets the logger short name.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Message">
            <summary>
            Gets or sets the log message including any parameter placeholders.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Parameters">
            <summary>
            Gets or sets the parameter values or null if no parameters have been specified.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.FormatProvider">
            <summary>
            Gets or sets the format provider that was provided while logging or <see langword="null" />
            when no formatProvider was specified.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.FormattedMessage">
            <summary>
            Gets the formatted message.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Properties">
            <summary>
            Gets the dictionary of per-event context properties.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Context">
            <summary>
            Gets the dictionary of per-event context properties.
            </summary>
        </member>
        <member name="T:NLog.LogFactory`1">
            <summary>
            Specialized LogFactory that can return instances of custom logger types.
            </summary>
            <typeparam name="T">The type of the logger to be returned. Must inherit from <see cref="T:NLog.Logger"/>.</typeparam>
        </member>
        <member name="T:NLog.LogFactory">
            <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory"/> class.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.#ctor(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory"/> class.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="M:NLog.LogFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.CreateNullLogger">
            <summary>
            Creates a logger that discards all log messages.
            </summary>
            <returns>Null logger instance.</returns>
        </member>
        <member name="M:NLog.LogFactory.GetCurrentClassLogger">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogFactory.GetCurrentClassLogger(System.Type)">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <param name="loggerType">The type of the logger to create. The type must inherit from NLog.Logger.</param>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogFactory.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogFactory.GetLogger(System.String,System.Type)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <param name="loggerType">The type of the logger to create. The type must inherit from NLog.Logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the 
            same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogFactory.ReconfigExistingLoggers">
            <summary>
            Loops through all loggers previously returned by GetLogger
            and recalculates their target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.Flush">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
        </member>
        <member name="M:NLog.LogFactory.Flush(System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation,System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.DisableLogging">
            <summary>Decreases the log enable counter and if it reaches -1 
            the logs are disabled.</summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging"/> calls.</remarks>
            <returns>An object that iplements IDisposable whose Dispose() method
            reenables logging. To be used with C# <c>using ()</c> statement.</returns>
        </member>
        <member name="M:NLog.LogFactory.EnableLogging">
            <summary>Increases the log enable counter and if it reaches 0 the logs are disabled.</summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogFactory.IsLoggingEnabled">
            <summary>
            Returns <see langword="true"/> if logging is currently enabled.
            </summary>
            <returns>A value of <see langword="true"/> if logging is currently enabled, 
            <see langword="false"/> otherwise.</returns>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogFactory.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="E:NLog.LogFactory.ConfigurationChanged">
            <summary>
            Occurs when logging <see cref="P:NLog.LogFactory.Configuration"/> changes.
            </summary>
        </member>
        <member name="E:NLog.LogFactory.ConfigurationReloaded">
            <summary>
            Occurs when logging <see cref="P:NLog.LogFactory.Configuration"/> gets reloaded.
            </summary>
        </member>
        <member name="P:NLog.LogFactory.ThrowExceptions">
            <summary>
            Gets or sets a value indicating whether exceptions should be thrown.
            </summary>
            <value>A value of <c>true</c> if exceptiosn should be thrown; otherwise, <c>false</c>.</value>
            <remarks>By default exceptions
            are not thrown under any circumstances.
            </remarks>
        </member>
        <member name="P:NLog.LogFactory.Configuration">
            <summary>
            Gets or sets the current logging configuration.
            </summary>
        </member>
        <member name="P:NLog.LogFactory.GlobalThreshold">
            <summary>
            Gets or sets the global log threshold. Log events below this threshold are not logged.
            </summary>
        </member>
        <member name="T:NLog.LogFactory.LoggerCacheKey">
            <summary>
            Logger cache key.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.LoggerCacheKey.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NLog.LogFactory.LoggerCacheKey.Equals(System.Object)">
            <summary>
            Determines if two objects are equal in value.
            </summary>
            <param name="o">Other object to compare to.</param>
            <returns>True if objects are equal, false otherwise.</returns>
        </member>
        <member name="T:NLog.LogFactory.LogEnabler">
            <summary>
            Enables logging in <see cref="M:System.IDisposable.Dispose"/> implementation.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.LogEnabler.#ctor(NLog.LogFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory.LogEnabler"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:NLog.LogFactory.LogEnabler.System#IDisposable#Dispose">
            <summary>
            Enables logging.
            </summary>
        </member>
        <member name="M:NLog.LogFactory`1.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
            <param name="name">The logger name.</param>
            <returns>An instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NLog.LogFactory`1.GetCurrentClassLogger">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="T:NLog.Logger">
            <content>
            Auto-generated Logger members for binary compatibility with NLog 1.0.
            </content>
            <summary>
            Provides logging interface and utility functions.
            </summary>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Logger"/> class.
            </summary>
        </member>
        <member name="M:NLog.Logger.IsEnabled(NLog.LogLevel)">
            <summary>
            Gets a value indicating whether logging is enabled for the specified level.
            </summary>
            <param name="level">Log level to be checked.</param>
            <returns>A value of <see langword="true" /> if logging is enabled for the specified level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogEventInfo)">
            <summary>
            Writes the specified diagnostic message.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Logger.Log(System.Type,NLog.LogEventInfo)">
            <summary>
            Writes the specified diagnostic message.
            </summary>
            <param name="wrapperType">The name of the type that wraps Logger.</param>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,``0)">
            <overloads>
            Writes the diagnostic message at the specified level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="level">The log level.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.LogException(NLog.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.String,``0)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``2(NLog.LogLevel,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``3(NLog.LogLevel,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Trace</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.TraceException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Debug</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.DebugException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Info</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.InfoException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Warn</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.WarnException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Error</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.ErrorException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.FatalException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="E:NLog.Logger.LoggerReconfigured">
            <summary>
            Occurs when logger configuration changes.
            </summary>
        </member>
        <member name="P:NLog.Logger.Name">
            <summary>
            Gets the name of the logger.
            </summary>
        </member>
        <member name="P:NLog.Logger.Factory">
            <summary>
            Gets the factory that created this logger.
            </summary>
        </member>
        <member name="P:NLog.Logger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Trace</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Trace</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Debug</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Debug</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Info</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Info</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Warn</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Warn</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Error</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Error</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Fatal</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Fatal</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="T:NLog.LoggerImpl">
            <summary>
            Implementation of logging engine.
            </summary>
        </member>
        <member name="M:NLog.LoggerImpl.GetFilterResult(System.Collections.Generic.IEnumerable{NLog.Filters.Filter},NLog.LogEventInfo)">
            <summary>
            Gets the filter result.
            </summary>
            <param name="filterChain">The filter chain.</param>
            <param name="logEvent">The log event.</param>
            <returns>The result of the filter.</returns>
        </member>
        <member name="T:NLog.LogLevel">
            <summary>
            Defines available log levels.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Trace">
            <summary>
            Trace log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Debug">
            <summary>
            Debug log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Info">
            <summary>
            Info log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Warn">
            <summary>
            Warn log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Error">
            <summary>
            Error log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Fatal">
            <summary>
            Fatal log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Off">
            <summary>
            Off log level.
            </summary>
        </member>
        <member name="M:NLog.LogLevel.op_Equality(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal == level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_Inequality(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is not equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal != level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_GreaterThan(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is greater than the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &gt; level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_GreaterThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is greater than or equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &gt;= level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_LessThan(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is less than the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &lt; level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_LessThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is less than or equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &lt;= level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.FromOrdinal(System.Int32)">
            <summary>
            Gets the <see cref="T:NLog.LogLevel"/> that corresponds to the specified ordinal.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns>The <see cref="T:NLog.LogLevel"/> instance. For 0 it returns <see cref="F:NLog.LogLevel.Debug"/>, 1 gives <see cref="F:NLog.LogLevel.Info"/> and so on.</returns>
        </member>
        <member name="M:NLog.LogLevel.FromString(System.String)">
            <summary>
            Returns the <see cref="T:NLog.LogLevel"/> that corresponds to the supplied <see langword="string" />.
            </summary>
            <param name="levelName">The texual representation of the log level.</param>
            <returns>The enumeration value.</returns>
        </member>
        <member name="M:NLog.LogLevel.ToString">
            <summary>
            Returns a string representation of the log level.
            </summary>
            <returns>Log level name.</returns>
        </member>
        <member name="M:NLog.LogLevel.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NLog.LogLevel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            Value of <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:NLog.LogLevel.CompareTo(System.Object)">
            <summary>
            Compares the level to the other <see cref="T:NLog.LogLevel"/> object.
            </summary>
            <param name="obj">
            The object object.
            </param>
            <returns>
            A value less than zero when this logger's <see cref="P:NLog.LogLevel.Ordinal"/> is 
            less than the other logger's ordinal, 0 when they are equal and 
            greater than zero when this ordinal is greater than the
            other ordinal.
            </returns>
        </member>
        <member name="P:NLog.LogLevel.Name">
            <summary>
            Gets the name of the log level.
            </summary>
        </member>
        <member name="P:NLog.LogLevel.Ordinal">
            <summary>
            Gets the ordinal of the log level.
            </summary>
        </member>
        <member name="T:NLog.LogManager">
            <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
        </member>
        <member name="M:NLog.LogManager.#cctor">
            <summary>
            Initializes static members of the LogManager class.
            </summary>
        </member>
        <member name="M:NLog.LogManager.#ctor">
            <summary>
            Prevents a default instance of the LogManager class from being created.
            </summary>
        </member>
        <member name="M:NLog.LogManager.GetCurrentClassLogger">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogManager.GetCurrentClassLogger(System.Type)">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <param name="loggerType">The logger class. The class must inherit from <see cref="T:NLog.Logger"/>.</param>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogManager.CreateNullLogger">
            <summary>
            Creates a logger that discards all log messages.
            </summary>
            <returns>Null logger which discards all log messages.</returns>
        </member>
        <member name="M:NLog.LogManager.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogManager.GetLogger(System.String,System.Type)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <param name="loggerType">The logger class. The class must inherit from <see cref="T:NLog.Logger"/>.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogManager.ReconfigExistingLoggers">
            <summary>
            Loops through all loggers previously returned by GetLogger.
            and recalculates their target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
        </member>
        <member name="M:NLog.LogManager.Flush">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
        </member>
        <member name="M:NLog.LogManager.Flush(System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation,System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.DisableLogging">
            <summary>Decreases the log enable counter and if it reaches -1 
            the logs are disabled.</summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
            <returns>An object that iplements IDisposable whose Dispose() method
            reenables logging. To be used with C# <c>using ()</c> statement.</returns>
        </member>
        <member name="M:NLog.LogManager.EnableLogging">
            <summary>Increases the log enable counter and if it reaches 0 the logs are disabled.</summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogManager.IsLoggingEnabled">
            <summary>
            Returns <see langword="true"/> if logging is currently enabled.
            </summary>
            <returns>A value of <see langword="true"/> if logging is currently enabled, 
            <see langword="false"/> otherwise.</returns>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
        </member>
        <member name="E:NLog.LogManager.ConfigurationChanged">
            <summary>
            Occurs when logging <see cref="P:NLog.LogManager.Configuration"/> changes.
            </summary>
        </member>
        <member name="E:NLog.LogManager.ConfigurationReloaded">
            <summary>
            Occurs when logging <see cref="P:NLog.LogManager.Configuration"/> gets reloaded.
            </summary>
        </member>
        <member name="P:NLog.LogManager.ThrowExceptions">
            <summary>
            Gets or sets a value indicating whether NLog should throw exceptions. 
            By default exceptions are not thrown under any circumstances.
            </summary>
        </member>
        <member name="P:NLog.LogManager.Configuration">
            <summary>
            Gets or sets the current logging configuration.
            </summary>
        </member>
        <member name="P:NLog.LogManager.GlobalThreshold">
            <summary>
            Gets or sets the global log threshold. Log events below this threshold are not logged.
            </summary>
        </member>
        <member name="T:NLog.LogMessageGenerator">
            <summary>
            Returns a log message. Used to defer calculation of 
            the log message until it's actually needed.
            </summary>
            <returns>Log message.</returns>
        </member>
        <member name="T:NLog.LogReceiverService.ILogReceiverClient">
            <summary>
            Service contract for Log Receiver client.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverClient.BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>
            Begins processing of log messages.
            </summary>
            <param name="events">The events.</param>
            <param name="callback">The callback.</param>
            <param name="asyncState">Asynchronous state.</param>
            <returns>
            IAsyncResult value which can be passed to <see cref="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)"/>.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)">
            <summary>
            Ends asynchronous processing of log messages.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:NLog.LogReceiverService.LogReceiverServiceConfig">
            <summary>
            Internal configuration of Log Receiver Service contracts.
            </summary>
        </member>
        <member name="T:NLog.LogReceiverService.NLogEvent">
            <summary>
            Wire format for NLog Event.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.NLogEvent"/> class.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvent.ToEventInfo(NLog.LogReceiverService.NLogEvents,System.String)">
            <summary>
            Converts the <see cref="T:NLog.LogReceiverService.NLogEvent"/> to <see cref="T:NLog.LogEventInfo"/>.
            </summary>
            <param name="context">The <see cref="T:NLog.LogReceiverService.NLogEvent"/> object this <see cref="T:NLog.LogReceiverService.NLogEvent"/> is part of..</param>
            <param name="loggerNamePrefix">The logger name prefix to prepend in front of the logger name.</param>
            <returns>Converted <see cref="T:NLog.LogEventInfo"/>.</returns>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.Id">
            <summary>
            Gets or sets the client-generated identifier of the event.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.LevelOrdinal">
            <summary>
            Gets or sets the ordinal of the log level.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.LoggerOrdinal">
            <summary>
            Gets or sets the logger ordinal (index into <see cref="P:NLog.LogReceiverService.NLogEvents.Strings"/>.
            </summary>
            <value>The logger ordinal.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.TimeDelta">
            <summary>
            Gets or sets the time delta (in ticks) between the time of the event and base time.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.MessageOrdinal">
            <summary>
            Gets or sets the message string index.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.Values">
            <summary>
            Gets or sets the collection of layout values.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.ValueIndexes">
            <summary>
            Gets the collection of indexes into <see cref="P:NLog.LogReceiverService.NLogEvents.Strings"/> array for each layout value.
            </summary>
        </member>
        <member name="T:NLog.LogReceiverService.NLogEvents">
            <summary>
            Wire format for NLog event package.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvents.ToEventInfo(System.String)">
            <summary>
            Converts the events to sequence of <see cref="T:NLog.LogEventInfo"/> objects suitable for routing through NLog.
            </summary>
            <param name="loggerNamePrefix">The logger name prefix to prepend in front of each logger name.</param>
            <returns>
            Sequence of <see cref="T:NLog.LogEventInfo"/> objects.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvents.ToEventInfo">
            <summary>
            Converts the events to sequence of <see cref="T:NLog.LogEventInfo"/> objects suitable for routing through NLog.
            </summary>
            <returns>
            Sequence of <see cref="T:NLog.LogEventInfo"/> objects.
            </returns>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>The name of the client.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.BaseTimeUtc">
            <summary>
            Gets or sets the base time (UTC ticks) for all events in the package.
            </summary>
            <value>The base time UTC.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.LayoutNames">
            <summary>
            Gets or sets the collection of layout names which are shared among all events.
            </summary>
            <value>The layout names.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.Strings">
            <summary>
            Gets or sets the collection of logger names.
            </summary>
            <value>The logger names.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.Events">
            <summary>
            Gets or sets the list of events.
            </summary>
            <value>The events.</value>
        </member>
        <member name="T:NLog.LogReceiverService.SoapLogReceiverClient">
            <summary>
            Log Receiver Client using legacy SOAP client.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.SoapLogReceiverClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.SoapLogReceiverClient"/> class.
            </summary>
            <param name="url">The service URL.</param>
        </member>
        <member name="M:NLog.LogReceiverService.SoapLogReceiverClient.ProcessLogMessages(NLog.LogReceiverService.NLogEvents)">
            <summary>
            Processes the log messages.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:NLog.LogReceiverService.SoapLogReceiverClient.BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>
            Begins processing of log messages.
            </summary>
            <param name="events">The events.</param>
            <param name="callback">The callback.</param>
            <param name="asyncState">Asynchronous state.</param>
            <returns>
            IAsyncResult value which can be passed to <see cref="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)"/>.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.SoapLogReceiverClient.EndProcessLogMessages(System.IAsyncResult)">
            <summary>
            Ends asynchronous processing of log messages.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:NLog.LogReceiverService.StringCollection">
            <summary>
            List of strings annotated for more terse serialization.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.StringCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.StringCollection"/> class.
            </summary>
        </member>
        <member name="T:NLog.MappedDiagnosticsContext">
            <summary>
            Mapped Diagnostics Context - a thread-local structure that keeps a dictionary
            of strings and provides methods to output them in layouts. 
            Mostly for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Set(System.String,System.String)">
            <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Get(System.String)">
            <summary>
            Gets the current thread MDC named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The item value of string.Empty if the value is not present.</returns>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in current thread MDC.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread MDC.</returns>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Remove(System.String)">
            <summary>
            Removes the specified item from current thread MDC.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Clear">
            <summary>
            Clears the content of current thread MDC.
            </summary>
        </member>
        <member name="T:NLog.MDC">
            <summary>
            Mapped Diagnostics Context - used for log4net compatibility.
            </summary>
        </member>
        <member name="M:NLog.MDC.Set(System.String,System.String)">
            <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.MDC.Get(System.String)">
            <summary>
            Gets the current thread MDC named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The item value of string.Empty if the value is not present.</returns>
        </member>
        <member name="M:NLog.MDC.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in current thread MDC.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread MDC.</returns>
        </member>
        <member name="M:NLog.MDC.Remove(System.String)">
            <summary>
            Removes the specified item from current thread MDC.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.MDC.Clear">
            <summary>
            Clears the content of current thread MDC.
            </summary>
        </member>
        <member name="T:NLog.NDC">
            <summary>
            Nested Diagnostics Context - for log4net compatibility.
            </summary>
        </member>
        <member name="M:NLog.NDC.Push(System.String)">
            <summary>
            Pushes the specified text on current thread NDC.
            </summary>
            <param name="text">The text to be pushed.</param>
            <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
        </member>
        <member name="M:NLog.NDC.Pop">
            <summary>
            Pops the top message off the NDC stack.
            </summary>
            <returns>The top message which is no longer on the stack.</returns>
        </member>
        <member name="M:NLog.NDC.Clear">
            <summary>
            Clears current thread NDC stack.
            </summary>
        </member>
        <member name="M:NLog.NDC.GetAllMessages">
            <summary>
            Gets all messages on the stack.
            </summary>
            <returns>Array of strings on the stack.</returns>
        </member>
        <member name="P:NLog.NDC.TopMessage">
            <summary>
            Gets the top NDC message but doesn't remove it.
            </summary>
            <returns>The top message. .</returns>
        </member>
        <member name="T:NLog.NestedDiagnosticsContext">
            <summary>
            Nested Diagnostics Context - a thread-local structure that keeps a stack
            of strings and provides methods to output them in layouts
            Mostly for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Push(System.String)">
            <summary>
            Pushes the specified text on current thread NDC.
            </summary>
            <param name="text">The text to be pushed.</param>
            <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Pop">
            <summary>
            Pops the top message off the NDC stack.
            </summary>
            <returns>The top message which is no longer on the stack.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Clear">
            <summary>
            Clears current thread NDC stack.
            </summary>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.GetAllMessages">
            <summary>
            Gets all messages on the stack.
            </summary>
            <returns>Array of strings on the stack.</returns>
        </member>
        <member name="P:NLog.NestedDiagnosticsContext.TopMessage">
            <summary>
            Gets the top NDC message but doesn't remove it.
            </summary>
            <returns>The top message. .</returns>
        </member>
        <member name="T:NLog.NestedDiagnosticsContext.StackPopper">
            <summary>
            Resets the stack to the original count during <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.StackPopper.#ctor(System.Collections.Generic.Stack{System.String},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NestedDiagnosticsContext.StackPopper"/> class.
            </summary>
            <param name="stack">The stack.</param>
            <param name="previousCount">The previous count.</param>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.StackPopper.System#IDisposable#Dispose">
            <summary>
            Reverts the stack to original item count.
            </summary>
        </member>
        <member name="T:NLog.NLogConfigurationException">
            <summary>
            Exception thrown during NLog configuration.
            </summary>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException"/> class.
            </summary>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.NLogRuntimeException">
            <summary>
            Exception thrown during log event processing.
            </summary>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException"/> class.
            </summary>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.NLogTraceListener">
            <summary>
            TraceListener which routes all messages through NLog.
            </summary>
        </member>
        <member name="M:NLog.NLogTraceListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogTraceListener"/> class.
            </summary>
        </member>
        <member name="M:NLog.NLogTraceListener.Write(System.String)">
            <summary>
            When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.WriteLine(System.String)">
            <summary>
            When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.Close">
            <summary>
            When overridden in a derived class, closes the output stream so it no longer receives tracing or debugging output.
            </summary>
        </member>
        <member name="M:NLog.NLogTraceListener.Fail(System.String)">
            <summary>
            Emits an error message.
            </summary>
            <param name="message">A message to emit.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.Fail(System.String,System.String)">
            <summary>
            Emits an error message and a detailed error message.
            </summary>
            <param name="message">A message to emit.</param>
            <param name="detailMessage">A detailed message to emit.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.Flush">
            <summary>
            Flushes the output buffer.
            </summary>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace information, a data object and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data to emit.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes trace information, an array of data objects and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">An array of objects to emit as data.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
            <summary>
            Writes trace and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes trace information, a formatted array of objects and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args"/> array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes trace information, a message, and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
            <summary>
            Writes trace information, a message, a related activity identity and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">A message to write.</param>
            <param name="relatedActivityId">A <see cref="T:System.Guid"/>  object identifying a related activity.</param>
        </member>
        <member name="M:NLog.NLogTraceListener.GetSupportedAttributes">
            <summary>
            Gets the custom attributes supported by the trace listener.
            </summary>
            <returns>
            A string array naming the custom attributes supported by the trace listener, or null if there are no custom attributes.
            </returns>
        </member>
        <member name="M:NLog.NLogTraceListener.TranslateLogLevel(System.Diagnostics.TraceEventType)">
            <summary>
            Translates the event type to level from <see cref="T:System.Diagnostics.TraceEventType"/>.
            </summary>
            <param name="eventType">Type of the event.</param>
            <returns>Translated log level.</returns>
        </member>
        <member name="P:NLog.NLogTraceListener.LogFactory">
            <summary>
            Gets or sets the log factory to use when outputting messages (null - use LogManager).
            </summary>
        </member>
        <member name="P:NLog.NLogTraceListener.DefaultLogLevel">
            <summary>
            Gets or sets the default log level.
            </summary>
        </member>
        <member name="P:NLog.NLogTraceListener.ForceLogLevel">
            <summary>
            Gets or sets the log which should be always used regardless of source level.
            </summary>
        </member>
        <member name="P:NLog.NLogTraceListener.IsThreadSafe">
            <summary>
            Gets a value indicating whether the trace listener is thread safe.
            </summary>
            <value></value>
            <returns>true if the trace listener is thread safe; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:NLog.NLogTraceListener.AutoLoggerName">
            <summary>
            Gets or sets a value indicating whether to use auto logger name detected from the stack trace.
            </summary>
        </member>
        <member name="T:NLog.Targets.ArchiveNumberingMode">
            <summary>
            Specifies the way archive numbering is performed.
            </summary>
        </member>
        <member name="F:NLog.Targets.ArchiveNumberingMode.Sequence">
            <summary>
            Sequence style numbering. The most recent archive has the highest number.
            </summary>
        </member>
        <member name="F:NLog.Targets.ArchiveNumberingMode.Rolling">
            <summary>
            Rolling style numbering (the most recent is always #0 then #1, ..., #N.
            </summary>
        </member>
        <member name="T:NLog.Targets.AspResponseTarget">
            <summary>
            Outputs log messages through the ASP Response object.
            </summary>
            <seealso href="http://nlog-project.org/wiki/AspResponse_target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="T:NLog.Targets.TargetWithLayout">
            <summary>
            Represents target that supports string formatting using layouts.
            </summary>
        </member>
        <member name="M:NLog.Targets.TargetWithLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetWithLayout"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="P:NLog.Targets.TargetWithLayout.Layout">
            <summary>
            Gets or sets the layout used to format log messages.
            </summary>
            <docgen category='Layout Options' order='1' />
        </member>
        <member name="M:NLog.Targets.AspResponseTarget.Write(NLog.LogEventInfo)">
            <summary>
            Outputs the rendered logging event through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.AspResponseTarget.AddComments">
            <summary>
            Gets or sets a value indicating whether to add &lt;!-- --&gt; comments around all written texts.
            </summary>
            <docgen category='Layout Options' order='100' />
        </member>
        <member name="T:NLog.Targets.ChainsawTarget">
            <summary>
            Sends log messages to the remote instance of Chainsaw application from log4j. 
            </summary>
            <seealso href="http://nlog-project.org/wiki/Chainsaw_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Chainsaw/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Chainsaw/Simple/Example.cs" />
            <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
            </example>
        </member>
        <member name="T:NLog.Targets.NLogViewerTarget">
            <summary>
            Sends log messages to the remote instance of NLog Viewer. 
            </summary>
            <seealso href="http://nlog-project.org/wiki/NLogViewer_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/NLogViewer/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/NLogViewer/Simple/Example.cs" />
            <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
            </example>
        </member>
        <member name="T:NLog.Targets.NetworkTarget">
            <summary>
            Sends log messages over the network.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Network_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Network/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Network/Simple/Example.cs" />
            <p>
            To print the results, use any application that's able to receive messages over
            TCP or UDP. <a href="http://m.nu/program/util/netcat/netcat.html">NetCat</a> is
            a simple but very powerful command-line tool that can be used for that. This image
            demonstrates the NetCat tool receiving log messages from Network target.
            </p>
            <img src="examples/targets/Screenshots/Network/Output.gif" />
            <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will be very slow. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
            <p>
            There are two specialized versions of the Network target: <a href="target.Chainsaw.html">Chainsaw</a>
            and <a href="target.NLogViewer.html">NLogViewer</a> which write to instances of Chainsaw log4j viewer
            or NLogViewer application respectively.
            </p>
            </example>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NetworkTarget"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.CloseTarget">
            <summary>
            Closes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Sends the 
            rendered logging event over the network optionally concatenating it with a newline character.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.GetBytesToWrite(NLog.LogEventInfo)">
            <summary>
            Gets the bytes to be written.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.Address">
            <summary>
            Gets or sets the network address.
            </summary>
            <remarks>
            The network address can be:
            <ul>
            <li>tcp://host:port - TCP (auto select IPv4/IPv6) (not supported on Windows Phone 7.0)</li>
            <li>tcp4://host:port - force TCP/IPv4 (not supported on Windows Phone 7.0)</li>
            <li>tcp6://host:port - force TCP/IPv6 (not supported on Windows Phone 7.0)</li>
            <li>udp://host:port - UDP (auto select IPv4/IPv6, not supported on Silverlight and on Windows Phone 7.0)</li>
            <li>udp4://host:port - force UDP/IPv4 (not supported on Silverlight and on Windows Phone 7.0)</li>
            <li>udp6://host:port - force UDP/IPv6  (not supported on Silverlight and on Windows Phone 7.0)</li>
            <li>http://host:port/pageName - HTTP using POST verb</li>
            <li>https://host:port/pageName - HTTPS using POST verb</li>
            </ul>
            For SOAP-based webservice support over HTTP use WebService target.
            </remarks>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.KeepConnection">
            <summary>
            Gets or sets a value indicating whether to keep connection open whenever possible.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.NewLine">
            <summary>
            Gets or sets a value indicating whether to append newline at the end of log message.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.MaxMessageSize">
            <summary>
            Gets or sets the maximum message size in bytes.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.ConnectionCacheSize">
            <summary>
            Gets or sets the size of the connection cache (number of connections which are kept alive).
            </summary>
            <docgen category="Connection Options" order="10"/>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.OnOverflow">
            <summary>
            Gets or sets the action that should be taken if the message is larger than
            maxMessageSize.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.Encoding">
            <summary>
            Gets or sets the encoding to be used.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="M:NLog.Targets.NLogViewerTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NLogViewerTarget"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeNLogData">
            <summary>
            Gets or sets a value indicating whether to include NLog-specific extensions to log4j schema.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.AppInfo">
            <summary>
            Gets or sets the AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeCallSite">
            <summary>
            Gets or sets a value indicating whether to include call site (class and method name) in the information sent over the network.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeSourceInfo">
            <summary>
            Gets or sets a value indicating whether to include source info (file name and line number) in the information sent over the network.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeMdc">
            <summary>
            Gets or sets a value indicating whether to include <see cref="T:NLog.MappedDiagnosticsContext"/> dictionary contents.
            </summary>
            <docgen category="Payload Options" order="10"/>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeNdc">
            <summary>
            Gets or sets a value indicating whether to include <see cref="T:NLog.NestedDiagnosticsContext"/> stack contents.
            </summary>
            <docgen category="Payload Options" order="10"/>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.NdcItemSeparator">
            <summary>
            Gets or sets the NDC item separator.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.Parameters">
            <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a named parameter.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.Renderer">
            <summary>
            Gets the layout renderer which produces Log4j-compatible XML events.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.Layout">
            <summary>
            Gets or sets the instance of <see cref="T:NLog.Layouts.Log4JXmlEventLayout"/> that is used to format log messages.
            </summary>
            <docgen category="Layout Options" order="10"/>
        </member>
        <member name="M:NLog.Targets.ChainsawTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ChainsawTarget"/> class.
            </summary>
        </member>
        <member name="T:NLog.Targets.ColoredConsoleTarget">
            <summary>
            Writes log messages to the console with customizable coloring.
            </summary>
            <seealso href="http://nlog-project.org/wiki/ColoredConsole_target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="T:NLog.Targets.TargetWithLayoutHeaderAndFooter">
            <summary>
            Represents target that supports string formatting using layouts.
            </summary>
        </member>
        <member name="M:NLog.Targets.TargetWithLayoutHeaderAndFooter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetWithLayoutHeaderAndFooter"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Layout">
            <summary>
            Gets or sets the text to be rendered.
            </summary>
            <docgen category='Layout Options' order='1' />
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Footer">
            <summary>
            Gets or sets the footer.
            </summary>
            <docgen category='Layout Options' order='3' />
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <docgen category='Layout Options' order='2' />
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.LHF">
            <summary>
            Gets or sets the layout with header and footer.
            </summary>
            <value>The layout with header and footer.</value>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ColoredConsoleTarget"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified log event to the console highlighting entries
            and words based on a set of defined rules.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.ErrorStream">
            <summary>
            Gets or sets a value indicating whether the error stream (stderr) should be used instead of the output stream (stdout).
            </summary>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.UseDefaultRowHighlightingRules">
            <summary>
            Gets or sets a value indicating whether to use default row highlighting rules.
            </summary>
            <remarks>
            The default rules are:
            <table>
            <tr>
            <th>Condition</th>
            <th>Foreground Color</th>
            <th>Background Color</th>
            </tr>
            <tr>
            <td>level == LogLevel.Fatal</td>
            <td>Red</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Error</td>
            <td>Yellow</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Warn</td>
            <td>Magenta</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Info</td>
            <td>White</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Debug</td>
            <td>Gray</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Trace</td>
            <td>DarkGray</td>
            <td>NoChange</td>
            </tr>
            </table>
            </remarks>
            <docgen category='Highlighting Rules' order='9' />
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.RowHighlightingRules">
            <summary>
            Gets the row highlighting rules.
            </summary>
            <docgen category='Highlighting Rules' order='10' />
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.WordHighlightingRules">
            <summary>
            Gets the word highlighting rules.
            </summary>
            <docgen category='Highlighting Rules' order='11' />
        </member>
        <member name="T:NLog.Targets.ColoredConsoleTarget.ColorPair">
            <summary>
            Color pair (foreground and background).
            </summary>
        </member>
        <member name="T:NLog.Targets.ConsoleOutputColor">
            <summary>
            Colored console output color.
            </summary>
            <remarks>
            Note that this enumeration is defined to be binary compatible with 
            .NET 2.0 System.ConsoleColor + some additions
            </remarks>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Black">
            <summary>
            Black Color (#000000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkBlue">
            <summary>
            Dark blue Color (#000080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkGreen">
            <summary>
            Dark green Color (#008000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkCyan">
            <summary>
            Dark Cyan Color (#008080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkRed">
            <summary>
            Dark Red Color (#800000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkMagenta">
            <summary>
            Dark Magenta Color (#800080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkYellow">
            <summary>
            Dark Yellow Color (#808000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Gray">
            <summary>
            Gray Color (#C0C0C0).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkGray">
            <summary>
            Dark Gray Color (#808080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Blue">
            <summary>
            Blue Color (#0000FF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Green">
            <summary>
            Green Color (#00FF00).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Cyan">
            <summary>
            Cyan Color (#00FFFF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Red">
            <summary>
            Red Color (#FF0000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Magenta">
            <summary>
            Magenta Color (#FF00FF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Yellow">
            <summary>
            Yellow Color (#FFFF00).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.White">
            <summary>
            White Color (#FFFFFF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.NoChange">
            <summary>
            Don't change the color.
            </summary>
        </member>
        <member name="T:NLog.Targets.ConsoleRowHighlightingRule">
            <summary>
            The row-highlighting condition.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#cctor">
            <summary>
            Initializes static members of the ConsoleRowHighlightingRule class.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleRowHighlightingRule"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#ctor(NLog.Conditions.ConditionExpression,NLog.Targets.ConsoleOutputColor,NLog.Targets.ConsoleOutputColor)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleRowHighlightingRule"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="foregroundColor">Color of the foreground.</param>
            <param name="backgroundColor">Color of the background.</param>
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.CheckCondition(NLog.LogEventInfo)">
            <summary>
            Checks whether the specified log event matches the condition (if any).
            </summary>
            <param name="logEvent">
            Log event.
            </param>
            <returns>
            A value of <see langword="true"/> if the condition is not defined or 
            if it matches, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.Default">
            <summary>
            Gets the default highlighting rule. Doesn't change the color.
            </summary>
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.Condition">
            <summary>
            Gets or sets the condition that must be met in order to set the specified foreground and background color.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.ForegroundColor">
            <summary>
            Gets or sets the foreground color.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="T:NLog.Targets.ConsoleTarget">
            <summary>
            Writes log messages to the console.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Console_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Console/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Console/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the Console.Out or
            Console.Error depending on the value of the Error flag.
            </summary>
            <param name="logEvent">The logging event.</param>
            <remarks>
            Note that the Error option is not supported on .NET Compact Framework.
            </remarks>
        </member>
        <member name="P:NLog.Targets.ConsoleTarget.Error">
            <summary>
            Gets or sets a value indicating whether to send the log messages to the standard error instead of the standard output.
            </summary>
            <docgen category='Console Options' order='10' />
        </member>
        <member name="T:NLog.Targets.ConsoleWordHighlightingRule">
            <summary>
            Highlighting rule for Win32 colorful console.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleWordHighlightingRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleWordHighlightingRule"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleWordHighlightingRule.#ctor(System.String,NLog.Targets.ConsoleOutputColor,NLog.Targets.ConsoleOutputColor)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleWordHighlightingRule"/> class.
            </summary>
            <param name="text">The text to be matched..</param>
            <param name="foregroundColor">Color of the foreground.</param>
            <param name="backgroundColor">Color of the background.</param>
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.Regex">
            <summary>
            Gets or sets the regular expression to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.Text">
            <summary>
            Gets or sets the text to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.WholeWords">
            <summary>
            Gets or sets a value indicating whether to match whole words only.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing texts.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.CompiledRegex">
            <summary>
            Gets the compiled regular expression that matches either Text or Regex property.
            </summary>
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.ForegroundColor">
            <summary>
            Gets or sets the foreground color.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="T:NLog.Targets.DatabaseCommandInfo">
            <summary>
            Information about database command + parameters.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseCommandInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseCommandInfo"/> class.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.CommandType">
            <summary>
            Gets or sets the type of the command.
            </summary>
            <value>The type of the command.</value>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.ConnectionString">
            <summary>
            Gets or sets the connection string to run the command against. If not provided, connection string from the target is used.
            </summary>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.Text">
            <summary>
            Gets or sets the command text.
            </summary>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.IgnoreFailures">
            <summary>
            Gets or sets a value indicating whether to ignore failures.
            </summary>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.Parameters">
            <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a database named or positional parameter.
            </summary>
            <docgen category='Command Options' order='10' />
        </member>
        <member name="T:NLog.Targets.DatabaseParameterInfo">
            <summary>
            Represents a parameter to a Database target.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseParameterInfo"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseParameterInfo"/> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterLayout">The parameter layout.</param>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Name">
            <summary>
            Gets or sets the database parameter name.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Layout">
            <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Size">
            <summary>
            Gets or sets the database parameter size.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Precision">
            <summary>
            Gets or sets the database parameter precision.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Scale">
            <summary>
            Gets or sets the database parameter scale.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="T:NLog.Targets.DatabaseTarget">
            <summary>
            Writes log messages to the database using an ADO.NET provider.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Database_target">Documentation on NLog Wiki</seealso>
            <example>
            <para>
            The configuration is dependent on the database type, because
            there are differnet methods of specifying connection string, SQL
            command and command parameters.
            </para>
            <para>MS SQL Server using System.Data.SqlClient:</para>
            <code lang="XML" source="examples/targets/Configuration File/Database/MSSQL/NLog.config" height="450" />
            <para>Oracle using System.Data.OracleClient:</para>
            <code lang="XML" source="examples/targets/Configuration File/Database/Oracle.Native/NLog.config" height="350" />
            <para>Oracle using System.Data.OleDBClient:</para>
            <code lang="XML" source="examples/targets/Configuration File/Database/Oracle.OleDB/NLog.config" height="350" />
            <para>To set up the log target programmatically use code like this (an equivalent of MSSQL configuration):</para>
            <code lang="C#" source="examples/targets/Configuration API/Database/MSSQL/Example.cs" height="630" />
            </example>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.InitializeTarget">
            <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the database. It creates
            a new database command, prepares parameters for it by calculating
            layouts and executes the command.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBProvider">
            <summary>
            Gets or sets the name of the database provider.
            </summary>
            <remarks>
            <para>
            The parameter name should be a provider invariant name as registered in machine.config or app.config. Common values are:
            </para>
            <ul>
            <li><c>System.Data.SqlClient</c> - <see href="http://msdn.microsoft.com/en-us/library/system.data.sqlclient.aspx">SQL Sever Client</see></li>
            <li><c>System.Data.SqlServerCe.3.5</c> - <see href="http://www.microsoft.com/sqlserver/2005/en/us/compact.aspx">SQL Sever Compact 3.5</see></li>
            <li><c>System.Data.OracleClient</c> - <see href="http://msdn.microsoft.com/en-us/library/system.data.oracleclient.aspx">Oracle Client from Microsoft</see> (deprecated in .NET Framework 4)</li>
            <li><c>Oracle.DataAccess.Client</c> - <see href="http://www.oracle.com/technology/tech/windows/odpnet/index.html">ODP.NET provider from Oracle</see></li>
            <li><c>System.Data.SQLite</c> - <see href="http://sqlite.phxsoftware.com/">System.Data.SQLite driver for SQLite</see></li>
            <li><c>Npgsql</c> - <see href="http://npgsql.projects.postgresql.org/">Npgsql driver for PostgreSQL</see></li>
            <li><c>MySql.Data.MySqlClient</c> - <see href="http://www.mysql.com/downloads/connector/net/">MySQL Connector/Net</see></li>
            </ul>
            <para>(Note that provider invariant names are not supported on .NET Compact Framework).</para>
            <para>
            Alternatively the parameter value can be be a fully qualified name of the provider 
            connection type (class implementing <see cref="T:System.Data.IDbConnection"/>) or one of the following tokens:
            </para>
            <ul>
            <li><c>sqlserver</c>, <c>mssql</c>, <c>microsoft</c> or <c>msde</c> - SQL Server Data Provider</li>
            <li><c>oledb</c> - OLEDB Data Provider</li>
            <li><c>odbc</c> - ODBC Data Provider</li>
            </ul>
            </remarks>
            <docgen category="Connection Options" order="10"/>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.ConnectionStringName">
            <summary>
            Gets or sets the name of the connection string (as specified in <see href="http://msdn.microsoft.com/en-us/library/bf7sd233.aspx">&lt;connectionStrings&gt; configuration section</see>.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.ConnectionString">
            <summary>
            Gets or sets the connection string. When provided, it overrides the values
            specified in DBHost, DBUserName, DBPassword, DBDatabase.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.InstallConnectionString">
            <summary>
            Gets or sets the connection string using for installation and uninstallation. If not provided, regular ConnectionString is being used.
            </summary>
            <docgen category='Installation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.InstallDdlCommands">
            <summary>
            Gets the installation DDL commands.
            </summary>
            <docgen category='Installation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.UninstallDdlCommands">
            <summary>
            Gets the uninstallation DDL commands.
            </summary>
            <docgen category='Installation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.KeepConnection">
            <summary>
            Gets or sets a value indicating whether to keep the 
            database connection open between the log events.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.UseTransactions">
            <summary>
            Gets or sets a value indicating whether to use database transactions. 
            Some data providers require this.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBHost">
            <summary>
            Gets or sets the database host name. If the ConnectionString is not provided
            this value will be used to construct the "Server=" part of the
            connection string.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBUserName">
            <summary>
            Gets or sets the database user name. If the ConnectionString is not provided
            this value will be used to construct the "User ID=" part of the
            connection string.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBPassword">
            <summary>
            Gets or sets the database password. If the ConnectionString is not provided
            this value will be used to construct the "Password=" part of the
            connection string.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBDatabase">
            <summary>
            Gets or sets the database name. If the ConnectionString is not provided
            this value will be used to construct the "Database=" part of the
            connection string.
            </summary>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.CommandText">
            <summary>
            Gets or sets the text of the SQL command to be run on each log level.
            </summary>
            <remarks>
            Typically this is a SQL INSERT statement or a stored procedure call. 
            It should use the database-specific parameters (marked as <c>@parameter</c>
            for SQL server or <c>:parameter</c> for Oracle, other data providers
            have their own notation) and not the layout renderers, 
            because the latter is prone to SQL injection attacks.
            The layout renderers should be specified as &lt;parameter /&gt; elements instead.
            </remarks>
            <docgen category='SQL Statement' order='10' />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.Parameters">
            <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a database named or positional parameter.
            </summary>
            <docgen category='SQL Statement' order='11' />
        </member>
        <member name="T:NLog.Targets.DebuggerTarget">
            <summary>
            Writes log messages to the attached managed debugger.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Debugger/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Debugger/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the attached debugger.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.DebugTarget">
            <summary>
            Mock target - useful for testing.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Debug_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Debug/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Debug/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.DebugTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DebugTarget"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.DebugTarget.Write(NLog.LogEventInfo)">
            <summary>
            Increases the number of messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.DebugTarget.Counter">
            <summary>
            Gets the number of times this target has been called.
            </summary>
            <docgen category='Debugging Options' order='10' />
        </member>
        <member name="P:NLog.Targets.DebugTarget.LastMessage">
            <summary>
            Gets the last message rendered by this target.
            </summary>
            <docgen category='Debugging Options' order='10' />
        </member>
        <member name="T:NLog.Targets.EventLogTarget">
            <summary>
            Writes log message to the Event Log.
            </summary>
            <seealso href="http://nlog-project.org/wiki/EventLog_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/EventLog/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/EventLog/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the event log. 
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.MachineName">
            <summary>
            Gets or sets the name of the machine on which Event Log service is running.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.EventId">
            <summary>
            Gets or sets the layout that renders event ID.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Category">
            <summary>
            Gets or sets the layout that renders event Category.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Source">
            <summary>
            Gets or sets the value to be used as the event Source.
            </summary>
            <remarks>
            By default this is the friendly name of the current AppDomain.
            </remarks>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Log">
            <summary>
            Gets or sets the name of the Event Log to write to. This can be System, Application or 
            any user-defined name.
            </summary>
            <docgen category='Event Log Options' order='10' />
        </member>
        <member name="T:NLog.Targets.FileArchivePeriod">
            <summary>
            Modes of archiving files based on time.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.None">
            <summary>
            Don't archive based on time.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Year">
            <summary>
            Archive every year.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Month">
            <summary>
            Archive every month.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Day">
            <summary>
            Archive daily.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Hour">
            <summary>
            Archive every hour.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Minute">
            <summary>
            Archive every minute.
            </summary>
        </member>
        <member name="T:NLog.Targets.FileTarget">
            <summary>
            Writes log messages to one or more files.
            </summary>
            <seealso href="http://nlog-project.org/wiki/File_target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.FileTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.FileTarget"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.CleanupInitializedFiles">
            <summary>
            Removes records of initialized files that have not been 
            accessed in the last two days.
            </summary>
            <remarks>
            Files are marked 'initialized' for the purpose of writing footers when the logging finishes.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.CleanupInitializedFiles(System.DateTime)">
            <summary>
            Removes records of initialized files that have not been
            accessed after the specified date.
            </summary>
            <param name="cleanupThreshold">The cleanup threshold.</param>
            <remarks>
            Files are marked 'initialized' for the purpose of writing footers when the logging finishes.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes all pending file operations.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <remarks>
            The timeout parameter is ignored, because file APIs don't provide
            the needed functionality.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.InitializeTarget">
            <summary>
            Initializes file logging by creating data structures that
            enable efficient multi-file logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.CloseTarget">
            <summary>
            Closes the file(s) opened for writing.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to a file specified in the FileName 
            parameter.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes the specified array of logging events to a file specified in the FileName
            parameter.
            </summary>
            <param name="logEvents">An array of <see cref="T:NLog.LogEventInfo"/> objects.</param>
            <remarks>
            This function makes use of the fact that the events are batched by sorting
            the requests by filename. This optimizes the number of open/close calls
            and can help improve performance.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Formats the log event for write.
            </summary>
            <param name="logEvent">The log event to be formatted.</param>
            <returns>A string representation of the log event.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetBytesToWrite(NLog.LogEventInfo)">
            <summary>
            Gets the bytes to be written to the file.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>Array of bytes that are ready to be written.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.TransformBytes(System.Byte[])">
            <summary>
            Modifies the specified byte array before it gets sent to a file.
            </summary>
            <param name="value">The byte array.</param>
            <returns>The modified byte array. The function can do the modification in-place.</returns>
        </member>
        <member name="P:NLog.Targets.FileTarget.FileName">
            <summary>
            Gets or sets the name of the file to write to.
            </summary>
            <remarks>
            This FileName string is a layout which may include instances of layout renderers.
            This lets you use a single target to write to multiple files.
            </remarks>
            <example>
            The following value makes NLog write logging events to files based on the log level in the directory where
            the application runs.
            <code>${basedir}/${level}.log</code>
            All <c>Debug</c> messages will go to <c>Debug.log</c>, all <c>Info</c> messages will go to <c>Info.log</c> and so on.
            You can combine as many of the layout renderers as you want to produce an arbitrary log file name.
            </example>
            <docgen category='Output Options' order='1' />
        </member>
        <member name="P:NLog.Targets.FileTarget.CreateDirs">
            <summary>
            Gets or sets a value indicating whether to create directories if they don't exist.
            </summary>
            <remarks>
            Setting this to false may improve performance a bit, but you'll receive an error
            when attempting to write to a directory that's not present.
            </remarks>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.DeleteOldFileOnStartup">
            <summary>
            Gets or sets a value indicating whether to delete old log file on startup.
            </summary>
            <remarks>
            This option works only when the "FileName" parameter denotes a single file.
            </remarks>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ReplaceFileContentsOnEachWrite">
            <summary>
            Gets or sets a value indicating whether to replace file contents on each write instead of appending log message at the end.
            </summary>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.KeepFileOpen">
            <summary>
            Gets or sets a value indicating whether to keep log file open instead of opening and closing it on each logging event.
            </summary>
            <remarks>
            Setting this property to <c>True</c> helps improve performance.
            </remarks>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.EnableFileDelete">
            <summary>
            Gets or sets a value indicating whether to enable log file(s) to be deleted.
            </summary>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.FileAttributes">
            <summary>
            Gets or sets the file attributes (Windows only).
            </summary>
            <docgen category='Output Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.LineEnding">
            <summary>
            Gets or sets the line ending mode.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.AutoFlush">
            <summary>
            Gets or sets a value indicating whether to automatically flush the file buffers after each log message.
            </summary>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.OpenFileCacheSize">
            <summary>
            Gets or sets the number of files to be kept open. Setting this to a higher value may improve performance
            in a situation where a single File target is writing to many files
            (such as splitting by level or by logger).
            </summary>
            <remarks>
            The files are managed on a LRU (least recently used) basis, which flushes
            the files that have not been used for the longest period of time should the
            cache become full. As a rule of thumb, you shouldn't set this parameter to 
            a very high value. A number like 10-15 shouldn't be exceeded, because you'd
            be keeping a large number of files open which consumes system resources.
            </remarks>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.OpenFileCacheTimeout">
            <summary>
            Gets or sets the maximum number of seconds that files are kept open. If this number is negative the files are 
            not automatically closed after a period of inactivity.
            </summary>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.BufferSize">
            <summary>
            Gets or sets the log file buffer size in bytes.
            </summary>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.Encoding">
            <summary>
            Gets or sets the file encoding.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWrites">
            <summary>
            Gets or sets a value indicating whether concurrent writes to the log file by multiple processes on the same host.
            </summary>
            <remarks>
            This makes multi-process logging possible. NLog uses a special technique
            that lets it keep the files open for writing.
            </remarks>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.NetworkWrites">
            <summary>
            Gets or sets a value indicating whether concurrent writes to the log file by multiple processes on different network hosts.
            </summary>
            <remarks>
            This effectively prevents files from being kept open.
            </remarks>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts">
            <summary>
            Gets or sets the number of times the write is appended on the file before NLog
            discards the log message.
            </summary>
            <docgen category='Performance Tuning Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttemptDelay">
            <summary>
            Gets or sets the delay in milliseconds to wait before attempting to write to the file again.
            </summary>
            <remarks>
            The actual delay is a random value between 0 and the value specified
            in this parameter. On each failed attempt the delay base is doubled
            up to <see cref="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts"/> times.
            </remarks>
            <example>
            Assuming that ConcurrentWriteAttemptDelay is 10 the time to wait will be:<p/>
            a random value between 0 and 10 milliseconds - 1st attempt<br/>
            a random value between 0 and 20 milliseconds - 2nd attempt<br/>
            a random value between 0 and 40 milliseconds - 3rd attempt<br/>
            a random value between 0 and 80 milliseconds - 4th attempt<br/>
            ...<p/>
            and so on.
            </example>
            <docgen category="Performance Tuning Options" order="10"/>
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveAboveSize">
            <summary>
            Gets or sets the size in bytes above which log files will be automatically archived.
            </summary>
            <remarks>
            Caution: Enabling this option can considerably slow down your file 
            logging in multi-process scenarios. If only one process is going to
            be writing to the file, consider setting <c>ConcurrentWrites</c>
            to <c>false</c> for maximum performance.
            </remarks>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveEvery">
            <summary>
            Gets or sets a value indicating whether to automatically archive log files every time the specified time passes.
            </summary>
            <remarks>
            Files are moved to the archive as part of the write operation if the current period of time changes. For example
            if the current <c>hour</c> changes from 10 to 11, the first write that will occur
            on or after 11:00 will trigger the archiving.
            <p>
            Caution: Enabling this option can considerably slow down your file 
            logging in multi-process scenarios. If only one process is going to
            be writing to the file, consider setting <c>ConcurrentWrites</c>
            to <c>false</c> for maximum performance.
            </p>
            </remarks>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveFileName">
            <summary>
            Gets or sets the name of the file to be used for an archive.
            </summary>
            <remarks>
            It may contain a special placeholder {#####}
            that will be replaced with a sequence of numbers depending on 
            the archiving strategy. The number of hash characters used determines
            the number of numerical digits to be used for numbering files.
            </remarks>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.MaxArchiveFiles">
            <summary>
            Gets or sets the maximum number of archive files that should be kept.
            </summary>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveNumbering">
            <summary>
            Gets or sets the way file archives are numbered. 
            </summary>
            <docgen category='Archival Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FileTarget.NewLineChars">
            <summary>
            Gets the characters that are appended after each line.
            </summary>
        </member>
        <member name="T:NLog.Targets.FormControlTarget">
            <summary>
            Logs text to Windows.Forms.Control.Text property control of specified Name.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/FormControl/NLog.config" />
            <p>
            The result is:
            </p>
            <img src="examples/targets/Screenshots/FormControl/FormControl.gif" />
            <p>
            To set up the log target programmatically similar to above use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/FormControl/Form1.cs" />,
            </example>
        </member>
        <member name="M:NLog.Targets.FormControlTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.FormControlTarget"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.FormControlTarget.Write(NLog.LogEventInfo)">
            <summary>
            Log message to control.
            </summary>
            <param name="logEvent">
            The logging event.
            </param>
        </member>
        <member name="P:NLog.Targets.FormControlTarget.ControlName">
            <summary>
            Gets or sets the name of control to which NLog will log write log text.
            </summary>
            <docgen category='Form Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FormControlTarget.Append">
            <summary>
            Gets or sets a value indicating whether log text should be appended to the text of the control instead of overwriting it. </summary>
            <docgen category='Form Options' order='10' />
        </member>
        <member name="P:NLog.Targets.FormControlTarget.FormName">
            <summary>
            Gets or sets the name of the Form on which the control is located.
            </summary>
            <docgen category='Form Options' order='10' />
        </member>
        <member name="T:NLog.Targets.LineEndingMode">
            <summary>
            Line ending mode.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.Default">
            <summary>
            Insert platform-dependent end-of-line sequence after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.CRLF">
            <summary>
            Insert CR LF sequence (ASCII 13, ASCII 10) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.CR">
            <summary>
            Insert CR character (ASCII 13) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.LF">
            <summary>
            Insert LF character (ASCII 10) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.None">
            <summary>
            Don't insert any line ending.
            </summary>
        </member>
        <member name="T:NLog.Targets.LogReceiverWebServiceTarget">
            <summary>
            Sends log messages to a NLog Receiver Service (using WCF or Web Services).
            </summary>
            <seealso href="http://nlog-project.org/wiki/LogReceiverService_target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.LogReceiverWebServiceTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.OnSend(NLog.LogReceiverService.NLogEvents,System.Collections.Generic.IEnumerable{NLog.Common.AsyncLogEventInfo})">
            <summary>
            Called when log events are being sent (test hook).
            </summary>
            <param name="events">The events.</param>
            <param name="asyncContinuations">The async continuations.</param>
            <returns>True if events should be sent, false to stop processing them.</returns>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes logging event to the log target. Must be overridden in inheriting
            classes.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Append" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.EndpointAddress">
            <summary>
            Gets or sets the endpoint address.
            </summary>
            <value>The endpoint address.</value>
            <docgen category='Connection Options' order='10' />
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.ClientId">
            <summary>
            Gets or sets the client ID.
            </summary>
            <value>The client ID.</value>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.Parameters">
            <summary>
            Gets the list of parameters.
            </summary>
            <value>The parameters.</value>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.IncludeEventProperties">
            <summary>
            Gets or sets a value indicating whether to include per-event properties in the payload sent to the server.
            </summary>
            <docgen category='Payload Options' order='10' />
        </member>
        <member name="T:NLog.Targets.MailTarget">
            <summary>
            Sends log messages by email using SMTP protocol.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Mail_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Mail/Simple/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Mail/Simple/Example.cs" />
            <p>
            Mail target works best when used with BufferingWrapper target
            which lets you send multiple log messages in single mail
            </p>
            <p>
            To set up the buffered mail target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Mail/Buffered/NLog.config" />
            <p>
            To set up the buffered mail target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Mail/Buffered/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.MailTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MailTarget"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.MailTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.MailTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Renders an array logging events.
            </summary>
            <param name="logEvents">Array of logging events.</param>
        </member>
        <member name="P:NLog.Targets.MailTarget.From">
            <summary>
            Gets or sets sender's email address (e.g. joe@domain.com).
            </summary>
            <docgen category='Message Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MailTarget.To">
            <summary>
            Gets or sets recipients' email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
            <docgen category='Message Options' order='11' />
        </member>
        <member name="P:NLog.Targets.MailTarget.CC">
            <summary>
            Gets or sets CC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
            <docgen category='Message Options' order='12' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Bcc">
            <summary>
            Gets or sets BCC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
            <docgen category='Message Options' order='13' />
        </member>
        <member name="P:NLog.Targets.MailTarget.AddNewLines">
            <summary>
            Gets or sets a value indicating whether to add new lines between log entries.
            </summary>
            <value>A value of <c>true</c> if new lines should be added; otherwise, <c>false</c>.</value>
            <docgen category='Layout Options' order='99' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Subject">
            <summary>
            Gets or sets the mail subject.
            </summary>
            <docgen category='Message Options' order='5' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Body">
            <summary>
            Gets or sets mail message body (repeated for each log message send in one mail).
            </summary>
            <remarks>Alias for the <c>Layout</c> property.</remarks>
            <docgen category='Message Options' order='6' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Encoding">
            <summary>
            Gets or sets encoding to be used for sending e-mail.
            </summary>
            <docgen category='Layout Options' order='20' />
        </member>
        <member name="P:NLog.Targets.MailTarget.Html">
            <summary>
            Gets or sets a value indicating whether to send message as HTML instead of plain text.
            </summary>
            <docgen category='Layout Options' order='11' />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpServer">
            <summary>
            Gets or sets SMTP Server to be used for sending.
            </summary>
            <docgen category='SMTP Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpAuthentication">
            <summary>
            Gets or sets SMTP Authentication mode.
            </summary>
            <docgen category='SMTP Options' order='11' />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpUserName">
            <summary>
            Gets or sets the username used to connect to SMTP server (used when SmtpAuthentication is set to "basic").
            </summary>
            <docgen category='SMTP Options' order='12' />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpPassword">
            <summary>
            Gets or sets the password used to authenticate against SMTP server (used when SmtpAuthentication is set to "basic").
            </summary>
            <docgen category='SMTP Options' order='13' />
        </member>
        <member name="P:NLog.Targets.MailTarget.EnableSsl">
            <summary>
            Gets or sets a value indicating whether SSL (secure sockets layer) should be used when communicating with SMTP server.
            </summary>
            <docgen category='SMTP Options' order='14' />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpPort">
            <summary>
            Gets or sets the port number that SMTP Server is listening on.
            </summary>
            <docgen category='SMTP Options' order='15' />
        </member>
        <member name="T:NLog.Targets.MemoryTarget">
            <summary>
            Writes log messages to an ArrayList in memory for programmatic retrieval.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Memory_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Memory/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Memory/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.MemoryTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MemoryTarget"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.MemoryTarget.Write(NLog.LogEventInfo)">
            <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.MemoryTarget.Logs">
            <summary>
            Gets the list of logs gathered in the <see cref="T:NLog.Targets.MemoryTarget"/>.
            </summary>
        </member>
        <member name="T:NLog.Targets.MessageBoxTarget">
            <summary>
            Pops up log messages as message boxes.
            </summary>
            <seealso href="http://nlog-project.org/wiki/MessageBox_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/MessageBox/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            The result is a message box:
            </p>
            <img src="examples/targets/Screenshots/MessageBox/MessageBoxTarget.gif" />
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/MessageBox/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.MessageBoxTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MessageBoxTarget"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.MessageBoxTarget.Write(NLog.LogEventInfo)">
            <summary>
            Displays the message box with the log message and caption specified in the Caption
            parameter.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.MessageBoxTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Displays the message box with the array of rendered logs messages and caption specified in the Caption
            parameter.
            </summary>
            <param name="logEvents">The array of logging events.</param>
        </member>
        <member name="P:NLog.Targets.MessageBoxTarget.Caption">
            <summary>
            Gets or sets the message box title.
            </summary>
            <docgen category='UI Options' order='10' />
        </member>
        <member name="T:NLog.Targets.MethodCallParameter">
            <summary>
            A parameter to MethodCall.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter"/> class.
            </summary>
            <param name="layout">The layout to use for parameter value.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter"/> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="layout">The layout.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String,NLog.Layouts.Layout,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="layout">The layout.</param>
            <param name="type">The type of the parameter.</param>
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Type">
            <summary>
            Gets or sets the type of the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Layout">
            <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="T:NLog.Targets.MethodCallTarget">
            <summary>
            Calls the specified static method on each log message and passes contextual parameters to it.
            </summary>
            <seealso href="http://nlog-project.org/wiki/MethodCall_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/MethodCall/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/MethodCall/Simple/Example.cs" />
            </example>
        </member>
        <member name="T:NLog.Targets.MethodCallTargetBase">
            <summary>
            The base class for all targets which call methods (local or remote). 
            Manages parameters and type coercion.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallTargetBase"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Prepares an array of parameters to be passed based on the logging event and calls DoInvoke().
            </summary>
            <param name="logEvent">
            The logging event.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.DoInvoke(System.Object[],NLog.Common.AsyncContinuation)">
            <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
            <param name="parameters">Method call parameters.</param>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.DoInvoke(System.Object[])">
            <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
            <param name="parameters">Method call parameters.</param>
        </member>
        <member name="P:NLog.Targets.MethodCallTargetBase.Parameters">
            <summary>
            Gets the array of parameters to be passed.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="M:NLog.Targets.MethodCallTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTarget.DoInvoke(System.Object[])">
            <summary>
            Calls the specified Method.
            </summary>
            <param name="parameters">Method parameters.</param>
        </member>
        <member name="P:NLog.Targets.MethodCallTarget.ClassName">
            <summary>
            Gets or sets the class name.
            </summary>
            <docgen category='Invocation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.MethodCallTarget.MethodName">
            <summary>
            Gets or sets the method name. The method must be public and static.
            </summary>
            <docgen category='Invocation Options' order='10' />
        </member>
        <member name="T:NLog.Targets.NetworkTargetOverflowAction">
            <summary>
            Action that should be taken if the message overflows.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetOverflowAction.Error">
            <summary>
            Report an error.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetOverflowAction.Split">
            <summary>
            Split the message into smaller pieces.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetOverflowAction.Discard">
            <summary>
            Discard the entire message.
            </summary>
        </member>
        <member name="T:NLog.Targets.NLogViewerParameterInfo">
            <summary>
            Represents a parameter to a NLogViewer target.
            </summary>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NLogViewerParameterInfo"/> class.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerParameterInfo.Name">
            <summary>
            Gets or sets viewer parameter name.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.NLogViewerParameterInfo.Layout">
            <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
            <docgen category='Parameter Options' order='10' />
        </member>
        <member name="T:NLog.Targets.NullTarget">
            <summary>
            Discards log messages. Used mainly for debugging and benchmarking.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Null_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Null/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Null/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.NullTarget.Write(NLog.LogEventInfo)">
            <summary>
            Does nothing. Optionally it calculates the layout text but
            discards the results.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.NullTarget.FormatMessage">
            <summary>
            Gets or sets a value indicating whether to perform layout calculation.
            </summary>
            <docgen category='Layout Options' order='10' />
        </member>
        <member name="T:NLog.Targets.OutputDebugStringTarget">
            <summary>
            Outputs log messages through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <seealso href="http://nlog-project.org/wiki/OutputDebugString_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/OutputDebugString/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/OutputDebugString/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.OutputDebugStringTarget.Write(NLog.LogEventInfo)">
            <summary>
            Outputs the rendered logging event through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.PerformanceCounterTarget">
            <summary>
            Increments specified performance counter on each write.
            </summary>
            <seealso href="http://nlog-project.org/wiki/PerformanceCounter_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/PerfCounter/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/PerfCounter/Simple/Example.cs" />
            </example>
            <remarks>
            TODO:
            1. Unable to create a category allowing multiple counter instances (.Net 2.0 API only, probably)
            2. Is there any way of adding new counters without deleting the whole category?
            3. There should be some mechanism of resetting the counter (e.g every day starts from 0), or auto-switching to 
               another counter instance (with dynamic creation of new instance). This could be done with layouts. 
            </remarks>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.PerformanceCounterTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.Write(NLog.LogEventInfo)">
            <summary>
            Increments the configured performance counter.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.EnsureInitialized">
            <summary>
            Ensures that the performance counter has been initialized.
            </summary>
            <returns>True if the performance counter is operational, false otherwise.</returns>
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.AutoCreate">
            <summary>
            Gets or sets a value indicating whether performance counter should be automatically created.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CategoryName">
            <summary>
            Gets or sets the name of the performance counter category.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CounterName">
            <summary>
            Gets or sets the name of the performance counter.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.InstanceName">
            <summary>
            Gets or sets the performance counter instance name.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CounterHelp">
            <summary>
            Gets or sets the counter help text.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CounterType">
            <summary>
            Gets or sets the performance counter type.
            </summary>
            <docgen category='Performance Counter Options' order='10' />
        </member>
        <member name="T:NLog.Targets.RichTextBoxRowColoringRule">
            <summary>
            The row-coloring condition.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxRowColoringRule.#cctor">
            <summary>
            Initializes static members of the RichTextBoxRowColoringRule class.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxRowColoringRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxRowColoringRule"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxRowColoringRule.#ctor(System.String,System.String,System.String,System.Drawing.FontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxRowColoringRule"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="fontColor">Color of the foregroung text.</param>
            <param name="backColor">Color of the background text.</param>
            <param name="fontStyle">The font style.</param>
        </member>
        <member name="M:NLog.Targets.RichTextBoxRowColoringRule.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxRowColoringRule"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="fontColor">Color of the text.</param>
            <param name="backColor">Color of the background.</param>
        </member>
        <member name="M:NLog.Targets.RichTextBoxRowColoringRule.CheckCondition(NLog.LogEventInfo)">
            <summary>
            Checks whether the specified log event matches the condition (if any).
            </summary>
            <param name="logEvent">
            Log event.
            </param>
            <returns>
            A value of <see langword="true"/> if the condition is not defined or 
            if it matches, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="P:NLog.Targets.RichTextBoxRowColoringRule.Default">
            <summary>
            Gets the default highlighting rule. Doesn't change the color.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxRowColoringRule.Condition">
            <summary>
            Gets or sets the condition that must be met in order to set the specified font color.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxRowColoringRule.FontColor">
            <summary>
            Gets or sets the font color.
            </summary>
            <remarks>
            Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed.
            </remarks>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxRowColoringRule.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
            <remarks>
            Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed.
            </remarks>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxRowColoringRule.Style">
            <summary>
            Gets or sets the font style of matched text. 
            </summary>
            <remarks>
            Possible values are the same as in <c>FontStyle</c> enum in <c>System.Drawing</c>
            </remarks>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="T:NLog.Targets.RichTextBoxTarget">
            <summary>
            Log text a Rich Text Box control in an existing or new form.
            </summary>
            <seealso href="http://nlog-project.org/wiki/RichTextBox_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p><code lang="XML" source="examples/targets/Configuration File/RichTextBox/Simple/NLog.config">
            </code>
            <p>
            The result is:
            </p><img src="examples/targets/Screenshots/RichTextBox/Simple.gif"/><p>
            To set up the target with coloring rules in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p><code lang="XML" source="examples/targets/Configuration File/RichTextBox/RowColoring/NLog.config">
            </code>
            <code lang="XML" source="examples/targets/Configuration File/RichTextBox/WordColoring/NLog.config">
            </code>
            <p>
            The result is:
            </p><img src="examples/targets/Screenshots/RichTextBox/RowColoring.gif"/><img src="examples/targets/Screenshots/RichTextBox/WordColoring.gif"/><p>
            To set up the log target programmatically similar to above use code like this:
            </p><code lang="C#" source="examples/targets/Configuration API/RichTextBox/Simple/Form1.cs">
            </code>
            ,
            <code lang="C#" source="examples/targets/Configuration API/RichTextBox/RowColoring/Form1.cs">
            </code>
            for RowColoring,
            <code lang="C#" source="examples/targets/Configuration API/RichTextBox/WordColoring/Form1.cs">
            </code>
            for WordColoring
            </example>
        </member>
        <member name="M:NLog.Targets.RichTextBoxTarget.#cctor">
            <summary>
            Initializes static members of the RichTextBoxTarget class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.RichTextBoxTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxTarget"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.RichTextBoxTarget.InitializeTarget">
            <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxTarget.Write(NLog.LogEventInfo)">
            <summary>
            Log message to RichTextBox.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.DefaultRowColoringRules">
            <summary>
            Gets the default set of row coloring rules which applies when <see cref="P:NLog.Targets.RichTextBoxTarget.UseDefaultRowColoringRules"/> is set to true.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.ControlName">
            <summary>
            Gets or sets the Name of RichTextBox to which Nlog will write.
            </summary>
            <docgen category='Form Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.FormName">
            <summary>
            Gets or sets the name of the Form on which the control is located. 
            If there is no open form of a specified name than NLog will create a new one.
            </summary>
            <docgen category='Form Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.UseDefaultRowColoringRules">
            <summary>
            Gets or sets a value indicating whether to use default coloring rules.
            </summary>
            <docgen category='Highlighting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.RowColoringRules">
            <summary>
            Gets the row coloring rules.
            </summary>
            <docgen category='Highlighting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.WordColoringRules">
            <summary>
            Gets the word highlighting rules.
            </summary>
            <docgen category='Highlighting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.ToolWindow">
            <summary>
            Gets or sets a value indicating whether the created window will be a tool window.
            </summary>
            <remarks>
            This parameter is ignored when logging to existing form control.
            Tool windows have thin border, and do not show up in the task bar.
            </remarks>
            <docgen category='Form Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.ShowMinimized">
            <summary>
            Gets or sets a value indicating whether the created form will be initially minimized.
            </summary>
            <remarks>
            This parameter is ignored when logging to existing form control.
            </remarks>
            <docgen category='Form Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.Width">
            <summary>
            Gets or sets the initial width of the form with rich text box.
            </summary>
            <remarks>
            This parameter is ignored when logging to existing form control.
            </remarks>
            <docgen category='Form Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.Height">
            <summary>
            Gets or sets the initial height of the form with rich text box.
            </summary>
            <remarks>
            This parameter is ignored when logging to existing form control.
            </remarks>
            <docgen category='Form Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.AutoScroll">
            <summary>
            Gets or sets a value indicating whether scroll bar will be moved automatically to show most recent log entries.
            </summary>
            <docgen category='Form Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.MaxLines">
            <summary>
            Gets or sets the maximum number of lines the rich text box will store (or 0 to disable this feature).
            </summary>
            <remarks>
            After exceeding the maximum number, first line will be deleted. 
            </remarks>
            <docgen category='Form Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.TargetForm">
            <summary>
            Gets or sets the form to log to.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.TargetRichTextBox">
            <summary>
            Gets or sets the rich text box to log to.
            </summary>
        </member>
        <member name="T:NLog.Targets.RichTextBoxWordColoringRule">
            <summary>
            Highlighting rule for Win32 colorful console.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxWordColoringRule"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRule.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxWordColoringRule"/> class.
            </summary>
            <param name="text">The text to be matched..</param>
            <param name="fontColor">Color of the text.</param>
            <param name="backgroundColor">Color of the background.</param>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRule.#ctor(System.String,System.String,System.String,System.Drawing.FontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxWordColoringRule"/> class.
            </summary>
            <param name="text">The text to be matched..</param>
            <param name="textColor">Color of the text.</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="fontStyle">The font style.</param>
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.Regex">
            <summary>
            Gets or sets the regular expression to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.Text">
            <summary>
            Gets or sets the text to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.WholeWords">
            <summary>
            Gets or sets a value indicating whether to match whole words only.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing texts.
            </summary>
            <docgen category='Rule Matching Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.Style">
            <summary>
            Gets or sets the font style of matched text. 
            Possible values are the same as in <c>FontStyle</c> enum in <c>System.Drawing</c>.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.CompiledRegex">
            <summary>
            Gets the compiled regular expression that matches either Text or Regex property.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.FontColor">
            <summary>
            Gets or sets the font color.
            Names are identical with KnownColor enum extended with Empty value which means that font color won't be changed.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.BackgroundColor">
            <summary>
            Gets or sets the background color. 
            Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed.
            </summary>
            <docgen category='Formatting Options' order='10' />
        </member>
        <member name="T:NLog.Targets.SmtpAuthenticationMode">
            <summary>
            SMTP authentication modes.
            </summary>
        </member>
        <member name="F:NLog.Targets.SmtpAuthenticationMode.None">
            <summary>
            No authentication.
            </summary>
        </member>
        <member name="F:NLog.Targets.SmtpAuthenticationMode.Basic">
            <summary>
            Basic - username and password.
            </summary>
        </member>
        <member name="F:NLog.Targets.SmtpAuthenticationMode.Ntlm">
            <summary>
            NTLM Authentication.
            </summary>
        </member>
        <member name="T:NLog.Targets.TargetAttribute">
            <summary>
            Marks class as a logging target and assigns a name to it.
            </summary>
        </member>
        <member name="M:NLog.Targets.TargetAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetAttribute"/> class.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.TargetAttribute.IsWrapper">
            <summary>
            Gets or sets a value indicating whether to the target is a wrapper target (used to generate the target summary documentation page).
            </summary>
        </member>
        <member name="P:NLog.Targets.TargetAttribute.IsCompound">
            <summary>
            Gets or sets a value indicating whether to the target is a compound target (used to generate the target summary documentation page).
            </summary>
        </member>
        <member name="T:NLog.Targets.TraceTarget">
            <summary>
            Sends log messages through System.Diagnostics.Trace.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Trace_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/Trace/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/Trace/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.TraceTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the <see cref="T:System.Diagnostics.Trace"/> facility.
            If the log level is greater than or equal to <see cref="F:NLog.LogLevel.Error"/> it uses the
            <see cref="M:System.Diagnostics.Trace.Fail(System.String)"/> method, otherwise it uses
            <see cref="M:System.Diagnostics.Trace.Write(System.String)"/> method.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.WebServiceProtocol">
            <summary>
            Web service protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.Soap11">
            <summary>
            Use SOAP 1.1 Protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.Soap12">
            <summary>
            Use SOAP 1.2 Protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.HttpPost">
            <summary>
            Use HTTP POST Protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.HttpGet">
            <summary>
            Use HTTP GET Protocol.
            </summary>
        </member>
        <member name="T:NLog.Targets.WebServiceTarget">
            <summary>
            Calls the specified web service on each log message.
            </summary>
            <seealso href="http://nlog-project.org/wiki/WebService_target">Documentation on NLog Wiki</seealso>
            <remarks>
            The web service must implement a method that accepts a number of string parameters.
            </remarks>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/WebService/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/WebService/Simple/Example.cs" />
            <p>The example web service that works with this example is shown below</p>
            <code lang="C#" source="examples/targets/Configuration API/WebService/Simple/WebService1/Service1.asmx.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.WebServiceTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.DoInvoke(System.Object[])">
            <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
            <param name="parameters">Method call parameters.</param>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.DoInvoke(System.Object[],NLog.Common.AsyncContinuation)">
            <summary>
            Invokes the web service method.
            </summary>
            <param name="parameters">Parameters to be passed.</param>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Url">
            <summary>
            Gets or sets the web service URL.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.MethodName">
            <summary>
            Gets or sets the Web service method name.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Namespace">
            <summary>
            Gets or sets the Web service namespace.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Protocol">
            <summary>
            Gets or sets the protocol to be used when calling web service.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
            <docgen category='Web Service Options' order='10' />
        </member>
        <member name="T:NLog.Targets.Win32FileAttributes">
            <summary>
            Win32 file attributes.
            </summary>
            <remarks>
            For more information see <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp</a>.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.ReadOnly">
            <summary>
            Read-only file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Hidden">
            <summary>
            Hidden file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.System">
            <summary>
            System file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Archive">
            <summary>
            File should be archived.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Device">
            <summary>
            Device file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Normal">
            <summary>
            Normal file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Temporary">
            <summary>
            File is temporary (should be kept in cache and not 
            written to disk if possible).
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.SparseFile">
            <summary>
            Sparse file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.ReparsePoint">
            <summary>
            Reparse point.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Compressed">
            <summary>
            Compress file contents.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.NotContentIndexed">
            <summary>
            File should not be indexed by the content indexing service. 
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Encrypted">
            <summary>
            Encrypted file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.WriteThrough">
            <summary>
            The system writes through any intermediate cache and goes directly to disk. 
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.NoBuffering">
            <summary>
            The system opens a file with no system caching.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.DeleteOnClose">
            <summary>
            Delete file after it is closed.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.PosixSemantics">
            <summary>
            A file is accessed according to POSIX rules.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncRequestQueue">
            <summary>
            Asynchronous request queue.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.#ctor(System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
            <summary>
            Initializes a new instance of the AsyncRequestQueue class.
            </summary>
            <param name="requestLimit">Request limit.</param>
            <param name="overflowAction">The overflow action.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.Enqueue(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Enqueues another item. If the queue is overflown the appropriate
            action is taken as specified by <see cref="P:NLog.Targets.Wrappers.AsyncRequestQueue.OnOverflow"/>.
            </summary>
            <param name="logEventInfo">The log event info.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.DequeueBatch(System.Int32)">
            <summary>
            Dequeues a maximum of <c>count</c> items from the queue
            and adds returns the list containing them.
            </summary>
            <param name="count">Maximum number of items to be dequeued.</param>
            <returns>The array of log events.</returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.Clear">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.RequestLimit">
            <summary>
            Gets or sets the request limit.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.OnOverflow">
            <summary>
            Gets or sets the action to be taken when there's no more room in
            the queue and another request is enqueued.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.RequestCount">
            <summary>
            Gets the number of requests currently in the queue.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapper">
            <summary>
            Provides asynchronous, buffered execution of target writes.
            </summary>
            <seealso href="http://nlog-project.org/wiki/AsyncWrapper_target">Documentation on NLog Wiki</seealso>
            <remarks>
            <p>
            Asynchronous target wrapper allows the logger code to execute more quickly, by queueing
            messages and processing them in a separate thread. You should wrap targets
            that spend a non-trivial amount of time in their Write() method with asynchronous
            target to speed up logging.
            </p>
            <p>
            Because asynchronous logging is quite a common scenario, NLog supports a
            shorthand notation for wrapping all targets with AsyncWrapper. Just add async="true" to
            the &lt;targets/&gt; element in the configuration file.
            </p>
            <code lang="XML">
            <![CDATA[
            <targets async="true">
               ... your targets go here ...
            </targets>
            ]]></code>
            </remarks>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/AsyncWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/AsyncWrapper/Wrapping File/Example.cs" />
            </example>
        </member>
        <member name="T:NLog.Targets.Wrappers.WrapperTargetBase">
            <summary>
            Base class for targets wrap other (single) targets.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.ToString">
            <summary>
            Returns the text representation of the object. Used for diagnostics.
            </summary>
            <returns>A string that describes the target.</returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.Write(NLog.LogEventInfo)">
            <summary>
            Writes logging event to the log target. Must be overridden in inheriting
            classes.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget">
            <summary>
            Gets or sets the target that is wrapped by this target.
            </summary>
            <docgen category='General Options' order='11' />
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper"/> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper"/> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="queueLimit">Maximum number of requests in the queue.</param>
            <param name="overflowAction">The action to be taken when the queue overflows.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Waits for the lazy writer thread to finish writing messages.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.InitializeTarget">
            <summary>
            Initializes the target by starting the lazy writer timer.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.CloseTarget">
            <summary>
            Shuts down the lazy writer timer.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.StartLazyWriterTimer">
            <summary>
            Starts the lazy writer thread which periodically writes
            queued log messages.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.StopLazyWriterThread">
            <summary>
            Starts the lazy writer thread.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the log event to asynchronous queue to be processed by
            the lazy writer thread.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The <see cref="M:NLog.Targets.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)"/> is called
            to ensure that the log event can be processed in another thread.
            </remarks>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.BatchSize">
            <summary>
            Gets or sets the number of log events that should be processed in a batch
            by the lazy writer thread.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.TimeToSleepBetweenBatches">
            <summary>
            Gets or sets the time in milliseconds to sleep between batches.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.OverflowAction">
            <summary>
            Gets or sets the action to be taken when the lazy writer thread request queue count
            exceeds the set limit.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.QueueLimit">
            <summary>
            Gets or sets the limit on the number of requests in the lazy writer thread request queue.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.RequestQueue">
            <summary>
            Gets the queue of lazy writer thread requests.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction">
            <summary>
            The action to be taken when the queue overflows.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Grow">
            <summary>
            Grow the queue.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Discard">
            <summary>
            Discard the overflowing item.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Block">
            <summary>
            Block until there's more room in the queue.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper">
            <summary>
            Causes a flush after each write on a wrapped target.
            </summary>
            <seealso href="http://nlog-project.org/wiki/AutoFlushWrapper_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/AutoFlushWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/AutoFlushWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper"/> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper"/> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>.Write()
            and calls <see cref="M:NLog.Targets.Target.Flush(NLog.Common.AsyncContinuation)"/> on it.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.BufferingTargetWrapper">
            <summary>
            A target that buffers log events and sends them in batches to the wrapped target.
            </summary>
            <seealso href="http://nlog-project.org/wiki/BufferingWrapper_target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper"/> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper"/> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper"/> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="flushTimeout">The flush timeout.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes pending events in the buffer (if any).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.CloseTarget">
            <summary>
            Closes the target by flushing pending events in the buffer (if any).
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the specified log event to the buffer and flushes
            the buffer in case the buffer gets full.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.BufferSize">
            <summary>
            Gets or sets the number of log events to be buffered.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.FlushTimeout">
            <summary>
            Gets or sets the timeout (in milliseconds) after which the contents of buffer will be flushed 
            if there's no write in the specified period of time. Use -1 to disable timed flushes.
            </summary>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.SlidingTimeout">
            <summary>
            Gets or sets a value indicating whether to use sliding timeout.
            </summary>
            <remarks>
            This value determines how the inactivity period is determined. If sliding timeout is enabled,
            the inactivity timer is reset after each write, if it is disabled - inactivity timer will 
            count from the first event written to the buffer. 
            </remarks>
            <docgen category='Buffering Options' order='100' />
        </member>
        <member name="T:NLog.Targets.Wrappers.CompoundTargetBase">
            <summary>
            A base class for targets which wrap other (multiple) targets
            and provide various forms of target routing.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.CompoundTargetBase"/> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.ToString">
            <summary>
            Returns the text representation of the object. Used for diagnostics.
            </summary>
            <returns>A string that describes the target.</returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.Write(NLog.LogEventInfo)">
            <summary>
            Writes logging event to the log target.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages for all wrapped targets.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.CompoundTargetBase.Targets">
            <summary>
            Gets the collection of targets managed by this compound target.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.FallbackGroupTarget">
            <summary>
            Provides fallback-on-error.
            </summary>
            <seealso href="http://nlog-project.org/wiki/FallbackGroup_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages to be written to server1, 
            and if it fails, messages go to server2.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/FallbackGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/FallbackGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FallbackGroupTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FallbackGroupTarget"/> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the log event to the sub-targets until one of them succeeds.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The method remembers the last-known-successful target
            and starts the iteration from it.
            If <see cref="P:NLog.Targets.Wrappers.FallbackGroupTarget.ReturnToFirstOnSuccess"/> is set, the method
            resets the target to the first target
            stored in <see cref="N:NLog.Targets"/>.
            </remarks>
        </member>
        <member name="P:NLog.Targets.Wrappers.FallbackGroupTarget.ReturnToFirstOnSuccess">
            <summary>
            Gets or sets a value indicating whether to return to the first target after any successful write.
            </summary>
            <docgen category='Fallback Options' order='10' />
        </member>
        <member name="T:NLog.Targets.Wrappers.FilteringRule">
            <summary>
            Filtering rule for <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRule.#ctor">
            <summary>
            Initializes a new instance of the FilteringRule class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRule.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the FilteringRule class.
            </summary>
            <param name="whenExistsExpression">Condition to be tested against all events.</param>
            <param name="filterToApply">Filter to apply to all log events when the first condition matches any of them.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRule.Exists">
            <summary>
            Gets or sets the condition to be tested.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRule.Filter">
            <summary>
            Gets or sets the resulting filter to be applied when the condition matches.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="T:NLog.Targets.Wrappers.FilteringTargetWrapper">
            <summary>
            Filters log entries based on a condition.
            </summary>
            <seealso href="http://nlog-project.org/wiki/FilteringWrapper_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages not contains the string '1' to be ignored.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/FilteringWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/FilteringWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor(NLog.Targets.Target,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper"/> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Checks the condition against the passed log event.
            If the condition is met, the log event is forwarded to
            the wrapped target.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringTargetWrapper.Condition">
            <summary>
            Gets or sets the condition expression. Log events who meet this condition will be forwarded 
            to the wrapped target.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper">
            <summary>
            Impersonates another user for the duration of the write.
            </summary>
            <seealso href="http://nlog-project.org/wiki/ImpersonatingWrapper_target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper"/> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.InitializeTarget">
            <summary>
            Initializes the impersonation context.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.CloseTarget">
            <summary>
            Closes the impersonation context.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Changes the security context, forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>.Write()
            and switches the context back to original.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Changes the security context, forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>.Write()
            and switches the context back to original.
            </summary>
            <param name="logEvents">Log events.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.UserName">
            <summary>
            Gets or sets username to change context to.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Password">
            <summary>
            Gets or sets the user account password.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Domain">
            <summary>
            Gets or sets Windows domain name to change context to.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogOnType">
            <summary>
            Gets or sets the Logon Type.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogOnProvider">
            <summary>
            Gets or sets the type of the logon provider.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ImpersonationLevel">
            <summary>
            Gets or sets the required impersonation level.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.RevertToSelf">
            <summary>
            Gets or sets a value indicating whether to revert to the credentials of the process instead of impersonating another user.
            </summary>
            <docgen category='Impersonation Options' order='10' />
        </member>
        <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter">
            <summary>
            Helper class which reverts the given <see cref="T:System.Security.Principal.WindowsImpersonationContext"/> 
            to its original value as part of <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter.#ctor(System.Security.Principal.WindowsImpersonationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter"/> class.
            </summary>
            <param name="windowsImpersonationContext">The windows impersonation context.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter.Dispose">
            <summary>
            Reverts the impersonation context.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.LogOnProviderType">
            <summary>
            Logon provider.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.LogOnProviderType.Default">
            <summary>
            Use the standard logon provider for the system.
            </summary>
            <remarks>
            The default security provider is negotiate, unless you pass NULL for the domain name and the user name
            is not in UPN format. In this case, the default provider is NTLM.
            NOTE: Windows 2000/NT:   The default security provider is NTLM.
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper">
            <summary>
            Filters buffered log entries based on a set of conditions that are evaluated on a group of events.
            </summary>
            <seealso href="http://nlog-project.org/wiki/PostFilteringWrapper_target">Documentation on NLog Wiki</seealso>
            <remarks>
            PostFilteringWrapper must be used with some type of buffering target or wrapper, such as
            AsyncTargetWrapper, BufferingWrapper or ASPNetBufferingWrapper.
            </remarks>
            <example>
            <p>
            This example works like this. If there are no Warn,Error or Fatal messages in the buffer
            only Info messages are written to the file, but if there are any warnings or errors, 
            the output includes detailed trace (levels &gt;= Debug). You can plug in a different type
            of buffering wrapper (such as ASPNetBufferingWrapper) to achieve different
            functionality.
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/PostFilteringWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/PostFilteringWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Evaluates all filtering rules to find the first one that matches.
            The matching rule determines the filtering condition to be applied
            to all items in a buffer. If no condition matches, default filter
            is applied to the array of log events.
            </summary>
            <param name="logEvents">Array of log events to be post-filtered.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.PostFilteringTargetWrapper.DefaultFilter">
            <summary>
            Gets or sets the default filter to be applied when no specific rule matches.
            </summary>
            <docgen category='Filtering Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Rules">
            <summary>
            Gets the collection of filtering rules. The rules are processed top-down
            and the first rule that matches determines the filtering condition to
            be applied to log events.
            </summary>
            <docgen category='Filtering Rules' order='10' />
        </member>
        <member name="T:NLog.Targets.Wrappers.RandomizeGroupTarget">
            <summary>
            Sends log messages to a randomly selected target.
            </summary>
            <seealso href="http://nlog-project.org/wiki/RandomizeGroup_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages to be written to either file1.txt or file2.txt 
            chosen randomly on a per-message basis.
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/RandomizeGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/RandomizeGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RandomizeGroupTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RandomizeGroupTarget"/> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the log event to one of the sub-targets.
            The sub-target is randomly chosen.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.RepeatingTargetWrapper">
            <summary>
            Repeats each log event the specified number of times.
            </summary>
            <seealso href="http://nlog-project.org/wiki/RepeatingWrapper_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes each log message to be repeated 3 times.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/RepeatingWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/RepeatingWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper"/> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="repeatCount">The repeat count.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the log message to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> by calling the <see cref="M:NLog.Targets.Target.Write(NLog.LogEventInfo)"/> method <see cref="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount"/> times.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount">
            <summary>
            Gets or sets the number of times to repeat each log message.
            </summary>
            <docgen category='Repeating Options' order='10' />
        </member>
        <member name="T:NLog.Targets.Wrappers.RetryingTargetWrapper">
            <summary>
            Retries in case of write error.
            </summary>
            <seealso href="http://nlog-project.org/wiki/RetryingWrapper_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes each write attempt to be repeated 3 times, 
            sleeping 1 second between attempts if first one fails.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/RetryingWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/RetryingWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper"/> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="retryCount">The retry count.</param>
            <param name="retryDelayMilliseconds">The retry delay milliseconds.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes the specified log event to the wrapped target, retrying and pausing in case of an error.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryCount">
            <summary>
            Gets or sets the number of retries that should be attempted on the wrapped target in case of a failure.
            </summary>
            <docgen category='Retrying Options' order='10' />
        </member>
        <member name="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryDelayMilliseconds">
            <summary>
            Gets or sets the time to wait between retries in milliseconds.
            </summary>
            <docgen category='Retrying Options' order='10' />
        </member>
        <member name="T:NLog.Targets.Wrappers.RoundRobinGroupTarget">
            <summary>
            Distributes log events to targets in a round-robin fashion.
            </summary>
            <seealso href="http://nlog-project.org/wiki/RoundRobinGroup_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages to be written to either file1.txt or file2.txt.
            Each odd message is written to file2.txt, each even message goes to file1.txt.
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/RoundRobinGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/RoundRobinGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RoundRobinGroupTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RoundRobinGroupTarget"/> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the write to one of the targets from
            the <see cref="N:NLog.Targets"/> collection.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The writes are routed in a round-robin fashion.
            The first log event goes to the first target, the second
            one goes to the second target and so on looping to the
            first target when there are no more targets available.
            In general request N goes to Targets[N % Targets.Count].
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.SecurityImpersonationLevel">
            <summary>
            Impersonation level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Anonymous">
            <summary>
            Anonymous Level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Identification">
            <summary>
            Identification Level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Impersonation">
            <summary>
            Impersonation Level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Delegation">
            <summary>
            Delegation Level.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.SecurityLogOnType">
            <summary>
            Logon type.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Interactive">
            <summary>
            Interactive Logon.
            </summary>
            <remarks>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on  
            by a terminal server, remote shell, or similar process.
            This logon type has the additional expense of caching logon information for disconnected operations;
            therefore, it is inappropriate for some client/server applications,
            such as a mail server.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Network">
            <summary>
            Network Logon.
            </summary>
            <remarks>
            This logon type is intended for high performance servers to authenticate plaintext passwords.
            The LogonUser function does not cache credentials for this logon type.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Batch">
            <summary>
            Batch Logon.
            </summary>
            <remarks>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without
            their direct intervention. This type is also for higher performance servers that process many plaintext
            authentication attempts at a time, such as mail or Web servers.
            The LogonUser function does not cache credentials for this logon type.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Service">
            <summary>
            Logon as a Service.
            </summary>
            <remarks>
            Indicates a service-type logon. The account provided must have the service privilege enabled.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.NetworkClearText">
            <summary>
            Network Clear Text Logon.
            </summary>
            <remarks>
            This logon type preserves the name and password in the authentication package, which allows the server to make
            connections to other network servers while impersonating the client. A server can accept plaintext credentials
            from a client, call LogonUser, verify that the user can access the system across the network, and still
            communicate with other servers.
            NOTE: Windows NT:  This value is not supported.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.NewCredentials">
            <summary>
            New Network Credentials.
            </summary>
            <remarks>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections.
            The new logon session has the same local identifier but uses different credentials for other network connections.
            NOTE: This logon type is supported only by the LOGON32_PROVIDER_WINNT50 logon provider.
            NOTE: Windows NT:  This value is not supported.
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.SplitGroupTarget">
            <summary>
            Writes log events to all targets.
            </summary>
            <seealso href="http://nlog-project.org/wiki/SplitGroup_target">Documentation on NLog Wiki</seealso>
            <example>
            <p>This example causes the messages to be written to both file1.txt or file2.txt 
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" source="examples/targets/Configuration File/SplitGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" source="examples/targets/Configuration API/SplitGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.SplitGroupTarget"/> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.SplitGroupTarget"/> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the specified log event to all sub-targets.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="T:Microsoft.Practices.ServiceLocation.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ServiceLocation.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ServiceLocation.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ServiceLocation.Properties.Resources.ActivateAllExceptionMessage">
            <summary>
              查找类似 Activation error occured while trying to get all instances of type {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Microsoft.Practices.ServiceLocation.Properties.Resources.ActivationExceptionMessage">
            <summary>
              查找类似 Activation error occured while trying to get instance of type {0}, key &quot;{1}&quot; 的本地化字符串。
            </summary>
        </member>
        <member name="M:Sobey.Core.Runtime.PropertyCollection`1.GetProperties``1(``0,System.Func{Sobey.Core.Runtime.RuntimePropertyInfo,System.Object,System.Boolean})">
            <summary>
            将实例中符合指定条件的属性放入属性列表
            </summary>
            <param name="obj"></param>
            <param name="checkProc"></param>
            <returns></returns>
        </member>
        <member name="M:Sobey.Core.Runtime.PropertyCollection`1.GetNotNullProperties``1(``0)">
            <summary>
            获取值不为空的属性列表
            </summary>
            <param name="obj">对象实例</param>
            <returns></returns>
        </member>
        <member name="M:Sobey.Core.Runtime.PropertyCollection`1.getProperties``1(System.Type,System.Object,System.Func{Sobey.Core.Runtime.RuntimePropertyInfo,System.Object,System.Boolean},Sobey.Core.Runtime.PropertyCollection{``0},Sobey.Core.Runtime.RuntimePropertyInfo,System.Collections.Generic.List{System.Object})">
            <summary>
            递归检查符合条件的属性
            </summary>
            <param name="entityType">实例类型</param>
            <param name="obj">实例</param>
            <param name="checkProc">检查委托</param>
            <param name="collection">属性集合</param>
            <param name="parentProperty">上级属性</param>
            <param name="refObjects">已检查的实例列表，防止无限递归</param>
        </member>
        <member name="T:Sobey.Core.Runtime.ReflectionHelper">
            <summary>
            反射辅助类
            </summary>
        </member>
        <member name="M:Sobey.Core.Runtime.ReflectionHelper.GetTypeFromAssembly(System.String,System.Type,System.Type,System.Func{System.Type,System.Boolean},System.Boolean)">
            <summary>
            从指定程序集中获取类型
            </summary>
            <param name="assemblyFile">程序集路径</param>
            <param name="baseType">基类</param>
            <param name="mustHasAttrType">必须具有的特性</param>
            <param name="addtionalCheck">自定义的附加检查</param>
            <param name="useLoadFile">
            是否使用Assembly.LoadFile载入程序集，使用LoadFile时可以载入相同标识但路径不同的程序集，
            否则使用LoadFrom载入程序集，此时在载入多个相同标识的程序集时只会载入第一个程序集
            </param>
            <returns>类型列表</returns>
        </member>
        <member name="T:Sobey.Core.Runtime.SerializationUtility">
            <summary>
            序列化辅助类
            </summary>
        </member>
        <member name="M:Sobey.Core.Runtime.SerializationUtility.ToXmlString(System.Object)">
            <summary>
            序列化为XML字符串
            </summary>
            <param name="value">需要序列化的对象</param>
            <returns>序列化后的XML字符串</returns>
        </member>
        <member name="M:Sobey.Core.Runtime.SerializationUtility.ToXmlString(System.Object,System.IO.Stream)">
            <summary>
            序列化为XML字符串
            </summary>
            <param name="value">需要序列化的对象</param>
            <param name="stream">写入的流</param>
        </member>
        <member name="M:Sobey.Core.Runtime.SerializationUtility.ToBytes(System.Object)">
            <summary>
            序列化为二进制
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sobey.Core.Runtime.SerializationUtility.ToObject``1(System.String)">
            <summary>
            将XML字符串反序列化为对象
            </summary>
            <param name="xmlString">XML序列化字符串</param>
            <param name="objectType">对象类型</param>
            <returns>反序列化后的对象</returns>
        </member>
        <member name="M:Sobey.Core.Runtime.SerializationUtility.ToObject``1(System.IO.Stream)">
            <summary>
            将XML字符串反序列化为对象
            </summary>
            <param name="xmlStream">XML序列化字符串所在的流</param>
            <param name="objectType">对象的类型</param>
            <returns>反序列化后的对象</returns>
        </member>
    </members>
</doc>
